This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:12:36,146 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:12:36,147 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:12:36,158 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:12:36,158 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:12:36,159 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:12:36,160 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:12:36,161 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:12:36,163 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:12:36,163 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:12:36,164 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:12:36,164 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:12:36,165 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:12:36,166 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:12:36,167 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:12:36,167 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:12:36,168 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:12:36,169 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:12:36,170 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:12:36,171 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:12:36,172 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:12:36,173 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:12:36,174 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:12:36,175 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:12:36,175 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:12:36,175 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:12:36,176 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:12:36,176 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:12:36,176 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:12:36,177 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:12:36,177 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:12:36,178 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:12:36,178 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:12:36,178 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:12:36,179 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:12:36,179 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:12:36,180 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:12:36,180 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:12:36,180 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:12:36,181 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:12:36,181 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:12:36,181 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:12:36,189 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:12:36,189 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:12:36,190 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:12:36,190 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:12:36,190 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:12:36,190 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:12:36,190 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:12:36,190 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:12:36,190 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:12:36,190 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:12:36,191 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:12:36,191 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:12:36,192 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:12:36,192 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:12:36,212 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:12:36,226 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:12:36,231 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:12:36,232 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:12:36,233 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:12:36,233 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl
[2020-11-25 16:12:36,233 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl'
[2020-11-25 16:12:36,312 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:12:36,313 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:12:36,313 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:12:36,314 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:12:36,314 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:12:36,330 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,331 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,362 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,363 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,388 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,397 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,403 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,413 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:12:36,414 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:12:36,414 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:12:36,416 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:12:36,420 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/1) ...
[2020-11-25 16:12:36,440 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FASTPAY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_FASTPAY[this][msg.sender] && balances_FASTPAY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][to] >= 0 && balances_FASTPAY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][msg.sender] >= 0 &&  balances_FASTPAY[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FASTPAY.transfer(to, value), return == true && balances_FASTPAY[this][msg.sender] == old(balances_FASTPAY[this][msg.sender]) - value && balances_FASTPAY[this][to] == old(balances_FASTPAY[this][to]) + value && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this]) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this]) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1]) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this]) && name_FASTPAY[this] == old(name_FASTPAY[this]) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:12:36,446 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FASTPAY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_FASTPAY[this][msg.sender] && balances_FASTPAY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][to] >= 0 && balances_FASTPAY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][msg.sender] >= 0 &&  balances_FASTPAY[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FASTPAY.transfer(to, value), return == true && balances_FASTPAY[this][msg.sender] == old(balances_FASTPAY[this][msg.sender]) - value && balances_FASTPAY[this][to] == old(balances_FASTPAY[this][to]) + value && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this]) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this]) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1]) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this]) && name_FASTPAY[this] == old(name_FASTPAY[this]) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:12:36,454 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FASTPAY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_FASTPAY[this][msg.sender] && balances_FASTPAY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][to] >= 0 && balances_FASTPAY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][msg.sender] >= 0 &&  balances_FASTPAY[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FASTPAY.transfer(to, value), return == true && balances_FASTPAY[this][msg.sender] == old(balances_FASTPAY[this][msg.sender]) - value && balances_FASTPAY[this][to] == old(balances_FASTPAY[this][to]) + value && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this]) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this]) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1]) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this]) && name_FASTPAY[this] == old(name_FASTPAY[this]) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:12:36,461 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s371 ) && msg.sender!=to_s371 ) && tokens_s371<=balances_FASTPAY[this][msg.sender] ) && ( balances_FASTPAY[this][to_s371] + tokens_s371 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s371>=0 ) && tokens_s371<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_FASTPAY[this][to_s371]>=0 ) && balances_FASTPAY[this][to_s371]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_FASTPAY[this][msg.sender]>=0 ) && balances_FASTPAY[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>],IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:12:36,464 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( success_s371==true && balances_FASTPAY[this][msg.sender]==( ( old(balances_FASTPAY[this][msg.sender]) ) - tokens_s371 ) ) && balances_FASTPAY[this][to_s371]==( ( old(balances_FASTPAY[this][to_s371]) ) + tokens_s371 ) ) && _totalSupply_FASTPAY[this]==( old(_totalSupply_FASTPAY[this]) ) ) && allowed_FASTPAY[this]==( old(allowed_FASTPAY[this]) ) ) && balances_FASTPAY[this][p1]==( old(balances_FASTPAY[this][p1]) ) ) && symbol_FASTPAY[this]==( old(symbol_FASTPAY[this]) ) ) && name_FASTPAY[this]==( old(name_FASTPAY[this]) ) ) && decimals_FASTPAY[this]==( old(decimals_FASTPAY[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s371,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_FASTPAY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]],IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]],IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_FASTPAY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_FASTPAY>]]]]]]
[2020-11-25 16:12:36,470 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FASTPAY.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_FASTPAY[this][msg.sender] && balances_FASTPAY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][to] >= 0 && balances_FASTPAY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_FASTPAY[this][msg.sender] >= 0 &&  balances_FASTPAY[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FASTPAY.transfer(to, value), return == true && balances_FASTPAY[this][msg.sender] == old(balances_FASTPAY[this][msg.sender]) - value && balances_FASTPAY[this][to] == old(balances_FASTPAY[this][to]) + value && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this]) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this]) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1]) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this]) && name_FASTPAY[this] == old(name_FASTPAY[this]) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:12:36,470 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_FASTPAY0) ==> ( <>AP(success_transfer_FASTPAY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:12:36,479 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:12:36 PropertyContainer
[2020-11-25 16:12:36,479 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:12:36,480 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:12:36,480 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:12:36,480 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:12:36,481 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/2) ...
[2020-11-25 16:12:36,481 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:12:36,481 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:12:36,495 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:12:36" (2/2) ...
[2020-11-25 16:12:36,495 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:12:36,496 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:12:36,496 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:12:36,496 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:12:36,497 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/2) ...
[2020-11-25 16:12:36,549 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:12:36,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 16:12:36,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 16:12:36,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:12:36,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:12:36,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:12:36,551 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:12:36,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:12:36,552 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FASTPAY_FASTPAY_NoBaseCtor__success
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FASTPAY_FASTPAY
[2020-11-25 16:12:36,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure FASTPAY_FASTPAY
[2020-11-25 16:12:36,553 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FASTPAY
[2020-11-25 16:12:36,554 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FASTPAY
[2020-11-25 16:12:36,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FASTPAY
[2020-11-25 16:12:36,554 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FASTPAY
[2020-11-25 16:12:36,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FASTPAY
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_FASTPAY
[2020-11-25 16:12:36,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_FASTPAY
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_FASTPAY__success
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_FASTPAY
[2020-11-25 16:12:36,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_FASTPAY
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FASTPAY
[2020-11-25 16:12:36,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FASTPAY
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FASTPAY
[2020-11-25 16:12:36,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FASTPAY
[2020-11-25 16:12:36,555 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FASTPAY
[2020-11-25 16:12:36,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FASTPAY
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_FASTPAY
[2020-11-25 16:12:36,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_FASTPAY
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 16:12:36,556 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FASTPAY
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:12:36,557 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,558 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:12:36,559 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FASTPAY_FASTPAY_NoBaseCtor__fail
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FASTPAY_FASTPAY__success
[2020-11-25 16:12:36,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FASTPAY_FASTPAY__fail
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FASTPAY__success
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FASTPAY__fail
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FASTPAY__success
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FASTPAY__fail
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,562 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,562 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FASTPAY__success
[2020-11-25 16:12:36,562 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FASTPAY__fail
[2020-11-25 16:12:36,562 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_FASTPAY__success
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_FASTPAY__fail
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_FASTPAY__fail
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FASTPAY__success
[2020-11-25 16:12:36,563 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FASTPAY__fail
[2020-11-25 16:12:36,564 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FASTPAY__success
[2020-11-25 16:12:36,564 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FASTPAY__fail
[2020-11-25 16:12:36,564 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FASTPAY__success
[2020-11-25 16:12:36,564 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FASTPAY__fail
[2020-11-25 16:12:36,564 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_FASTPAY__success
[2020-11-25 16:12:36,565 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_FASTPAY__fail
[2020-11-25 16:12:36,565 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:12:36,565 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:12:36,565 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:12:36,565 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:12:36,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:12:36,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:12:36,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FASTPAY_FASTPAY_NoBaseCtor__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FASTPAY_FASTPAY_NoBaseCtor__success
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FASTPAY_FASTPAY__fail
[2020-11-25 16:12:36,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FASTPAY_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FASTPAY__fail
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FASTPAY__fail
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FASTPAY__success
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_FASTPAY__success
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_FASTPAY__success
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_FASTPAY__success
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FASTPAY__success
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FASTPAY__fail
[2020-11-25 16:12:36,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FASTPAY__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FASTPAY__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FASTPAY__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_FASTPAY__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_FASTPAY__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:12:36,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FASTPAY
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:12:36,574 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:12:36,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:12:36,816 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:12:36,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:12:36,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:12:36,977 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:12:37,256 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:12:37,257 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:12:37,259 INFO  L202        PluginConnector]: Adding new model FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:12:37 BoogieIcfgContainer
[2020-11-25 16:12:37,259 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:12:36" (2/2) ...
[2020-11-25 16:12:37,259 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:12:37,259 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4ae21ef7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:12:37, skipping insertion in model container
[2020-11-25 16:12:37,259 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:12:37,260 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:12:37,260 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:12:37,261 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:12:37,261 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/3) ...
[2020-11-25 16:12:37,262 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@cac056f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:12:37, skipping insertion in model container
[2020-11-25 16:12:37,262 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:12:36" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:12:37,299 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:12:37 NWAContainer
[2020-11-25 16:12:37,299 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:12:37,299 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:12:37,299 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:12:37,300 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:12:37,301 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:12:37" (3/4) ...
[2020-11-25 16:12:37,302 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7901ed54 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:12:37, skipping insertion in model container
[2020-11-25 16:12:37,302 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:12:37" (4/4) ...
[2020-11-25 16:12:37,305 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:12:37,309 INFO  L110   BuchiProductObserver]: Initial RCFG 1564 locations, 1976 edges
[2020-11-25 16:12:37,309 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:12:37,320 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:12:38,836 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:12:38,841 INFO  L110   BuchiProductObserver]: BuchiProgram size 3720 locations, 6402 edges
[2020-11-25 16:12:38,841 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:12:38 BoogieIcfgContainer
[2020-11-25 16:12:38,841 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:12:38,842 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:12:38,842 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:12:38,843 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:12:38,843 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:12:38" (1/1) ...
[2020-11-25 16:12:38,947 INFO  L313           BlockEncoder]: Initial Icfg 3720 locations, 6402 edges
[2020-11-25 16:12:38,947 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:12:38,948 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:12:38,948 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:12:38,949 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:12:38,963 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 16:12:38,973 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 16:12:38,986 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:12:38,991 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:12:38,995 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:12:38,996 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:12:39,002 INFO  L313           BlockEncoder]: Encoded RCFG 3660 locations, 6242 edges
[2020-11-25 16:12:39,002 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:12:39 BasicIcfg
[2020-11-25 16:12:39,002 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:12:39,003 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:12:39,003 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:12:39,005 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:12:39,006 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,006 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:12:36" (1/6) ...
[2020-11-25 16:12:39,008 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25a01f9f and model type FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:12:39, skipping insertion in model container
[2020-11-25 16:12:39,008 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,008 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:12:36" (2/6) ...
[2020-11-25 16:12:39,008 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25a01f9f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:12:39, skipping insertion in model container
[2020-11-25 16:12:39,008 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,008 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:12:37" (3/6) ...
[2020-11-25 16:12:39,008 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25a01f9f and model type FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:12:39, skipping insertion in model container
[2020-11-25 16:12:39,009 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,009 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:12:37" (4/6) ...
[2020-11-25 16:12:39,009 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25a01f9f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:12:39, skipping insertion in model container
[2020-11-25 16:12:39,009 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,009 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:12:38" (5/6) ...
[2020-11-25 16:12:39,009 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25a01f9f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:12:39, skipping insertion in model container
[2020-11-25 16:12:39,009 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:12:39,009 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:12:39" (6/6) ...
[2020-11-25 16:12:39,010 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FASTPAY_0x6302eb80a6bcfa97160b6f931bbaacdfe5a923d1_transfer-normal.bpl_BEv2
[2020-11-25 16:12:39,050 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:12:39,051 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:12:39,051 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:12:39,051 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:12:39,051 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:12:39,051 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:12:39,051 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:12:39,051 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:12:39,051 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:12:39,094 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3660 states.
[2020-11-25 16:12:39,144 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:39,144 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:39,144 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:39,151 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:39,152 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:39,152 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:12:39,152 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3660 states.
[2020-11-25 16:12:39,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:39,169 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:39,169 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:39,170 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:39,171 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:39,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:39,184 INFO  L82        PathProgramCache]: Analyzing trace with hash 689925137, now seen corresponding path program 1 times
[2020-11-25 16:12:39,187 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:39,205 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:39,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:39,246 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:39,246 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:12:39,250 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:39,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:12:39,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:12:39,436 INFO  L87              Difference]: Start difference. First operand 3660 states. Second operand 4 states.
[2020-11-25 16:12:40,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:40,272 INFO  L93              Difference]: Finished difference Result 3926 states and 6333 transitions.
[2020-11-25 16:12:40,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:12:40,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3926 states and 6333 transitions.
[2020-11-25 16:12:40,300 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:12:40,335 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3926 states to 3806 states and 6158 transitions.
[2020-11-25 16:12:40,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 16:12:40,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1381
[2020-11-25 16:12:40,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3806 states and 6158 transitions.
[2020-11-25 16:12:40,354 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:40,354 INFO  L728         BuchiCegarLoop]: Abstraction has 3806 states and 6158 transitions.
[2020-11-25 16:12:40,369 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3806 states and 6158 transitions.
[2020-11-25 16:12:40,421 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3806 to 2742.
[2020-11-25 16:12:40,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2742 states.
[2020-11-25 16:12:40,429 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2742 states to 2742 states and 4187 transitions.
[2020-11-25 16:12:40,430 INFO  L751         BuchiCegarLoop]: Abstraction has 2742 states and 4187 transitions.
[2020-11-25 16:12:40,430 INFO  L631         BuchiCegarLoop]: Abstraction has 2742 states and 4187 transitions.
[2020-11-25 16:12:40,430 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:12:40,430 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2742 states and 4187 transitions.
[2020-11-25 16:12:40,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:40,438 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:40,438 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:40,439 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:40,439 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:40,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:40,442 INFO  L82        PathProgramCache]: Analyzing trace with hash 1356326998, now seen corresponding path program 1 times
[2020-11-25 16:12:40,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:40,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:40,462 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:40,462 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:40,462 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:12:40,463 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:40,463 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:12:40,463 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:12:40,464 INFO  L87              Difference]: Start difference. First operand 2742 states and 4187 transitions. cyclomatic complexity: 1447 Second operand 4 states.
[2020-11-25 16:12:40,977 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:40,977 INFO  L93              Difference]: Finished difference Result 2551 states and 2736 transitions.
[2020-11-25 16:12:40,977 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:12:40,978 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2551 states and 2736 transitions.
[2020-11-25 16:12:40,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:40,993 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2551 states to 2551 states and 2736 transitions.
[2020-11-25 16:12:40,993 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 880
[2020-11-25 16:12:40,994 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 880
[2020-11-25 16:12:40,994 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2551 states and 2736 transitions.
[2020-11-25 16:12:40,995 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:40,996 INFO  L728         BuchiCegarLoop]: Abstraction has 2551 states and 2736 transitions.
[2020-11-25 16:12:40,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2551 states and 2736 transitions.
[2020-11-25 16:12:41,017 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2551 to 2551.
[2020-11-25 16:12:41,017 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2551 states.
[2020-11-25 16:12:41,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2551 states to 2551 states and 2736 transitions.
[2020-11-25 16:12:41,020 INFO  L751         BuchiCegarLoop]: Abstraction has 2551 states and 2736 transitions.
[2020-11-25 16:12:41,020 INFO  L631         BuchiCegarLoop]: Abstraction has 2551 states and 2736 transitions.
[2020-11-25 16:12:41,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:12:41,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2551 states and 2736 transitions.
[2020-11-25 16:12:41,025 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:41,025 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:41,025 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:41,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:41,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND TRUE   revert
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND TRUE   revert
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:41,031 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:41,032 INFO  L82        PathProgramCache]: Analyzing trace with hash -2111015667, now seen corresponding path program 1 times
[2020-11-25 16:12:41,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:41,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:41,111 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:41,111 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:41,111 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:12:41,112 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:41,112 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:12:41,112 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:12:41,112 INFO  L87              Difference]: Start difference. First operand 2551 states and 2736 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 16:12:41,775 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:41,775 INFO  L93              Difference]: Finished difference Result 2759 states and 2962 transitions.
[2020-11-25 16:12:41,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:12:41,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2759 states and 2962 transitions.
[2020-11-25 16:12:41,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:12:41,790 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2759 states to 2759 states and 2962 transitions.
[2020-11-25 16:12:41,790 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 16:12:41,791 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 16:12:41,791 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2759 states and 2962 transitions.
[2020-11-25 16:12:41,793 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:41,793 INFO  L728         BuchiCegarLoop]: Abstraction has 2759 states and 2962 transitions.
[2020-11-25 16:12:41,795 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2759 states and 2962 transitions.
[2020-11-25 16:12:41,814 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2759 to 2607.
[2020-11-25 16:12:41,814 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2607 states.
[2020-11-25 16:12:41,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2607 states to 2607 states and 2800 transitions.
[2020-11-25 16:12:41,817 INFO  L751         BuchiCegarLoop]: Abstraction has 2607 states and 2800 transitions.
[2020-11-25 16:12:41,817 INFO  L631         BuchiCegarLoop]: Abstraction has 2607 states and 2800 transitions.
[2020-11-25 16:12:41,817 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:12:41,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2607 states and 2800 transitions.
[2020-11-25 16:12:41,821 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:41,821 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:41,821 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:41,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:41,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:41,826 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:41,826 INFO  L82        PathProgramCache]: Analyzing trace with hash 1707967913, now seen corresponding path program 1 times
[2020-11-25 16:12:41,827 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:41,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:42,389 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 86
[2020-11-25 16:12:42,745 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 62
[2020-11-25 16:12:42,883 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:42,883 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:42,883 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 16:12:42,883 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:42,883 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 16:12:42,884 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=416, Unknown=0, NotChecked=0, Total=462
[2020-11-25 16:12:42,884 INFO  L87              Difference]: Start difference. First operand 2607 states and 2800 transitions. cyclomatic complexity: 195 Second operand 22 states.
[2020-11-25 16:12:48,290 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:48,291 INFO  L93              Difference]: Finished difference Result 2684 states and 2895 transitions.
[2020-11-25 16:12:48,291 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 16:12:48,291 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2684 states and 2895 transitions.
[2020-11-25 16:12:48,297 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 16:12:48,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2684 states to 2684 states and 2895 transitions.
[2020-11-25 16:12:48,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 918
[2020-11-25 16:12:48,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 918
[2020-11-25 16:12:48,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2684 states and 2895 transitions.
[2020-11-25 16:12:48,307 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:48,307 INFO  L728         BuchiCegarLoop]: Abstraction has 2684 states and 2895 transitions.
[2020-11-25 16:12:48,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2684 states and 2895 transitions.
[2020-11-25 16:12:48,328 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2684 to 2671.
[2020-11-25 16:12:48,328 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2671 states.
[2020-11-25 16:12:48,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2671 states to 2671 states and 2874 transitions.
[2020-11-25 16:12:48,331 INFO  L751         BuchiCegarLoop]: Abstraction has 2671 states and 2874 transitions.
[2020-11-25 16:12:48,331 INFO  L631         BuchiCegarLoop]: Abstraction has 2671 states and 2874 transitions.
[2020-11-25 16:12:48,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:12:48,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2671 states and 2874 transitions.
[2020-11-25 16:12:48,335 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:12:48,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:48,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:48,337 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:48,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND FALSE  !(revert)
[L2334]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2335]              __tmp__balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2336]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2337]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2338]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2338]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L2339]  COND TRUE   revert
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND FALSE  !(revert)
[L2334]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2335]              __tmp__balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2336]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2337]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2338]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2338]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L2339]  COND TRUE   revert
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:48,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:48,342 INFO  L82        PathProgramCache]: Analyzing trace with hash -1004861959, now seen corresponding path program 1 times
[2020-11-25 16:12:48,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:48,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:48,514 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:48,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:48,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 16:12:48,515 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:48,515 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:12:48,515 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:12:48,515 INFO  L87              Difference]: Start difference. First operand 2671 states and 2874 transitions. cyclomatic complexity: 207 Second operand 18 states.
[2020-11-25 16:12:50,734 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:50,734 INFO  L93              Difference]: Finished difference Result 2825 states and 3062 transitions.
[2020-11-25 16:12:50,734 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:12:50,734 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2825 states and 3062 transitions.
[2020-11-25 16:12:50,739 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:12:50,746 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2825 states to 2825 states and 3062 transitions.
[2020-11-25 16:12:50,746 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 16:12:50,747 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 16:12:50,747 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2825 states and 3062 transitions.
[2020-11-25 16:12:50,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:50,749 INFO  L728         BuchiCegarLoop]: Abstraction has 2825 states and 3062 transitions.
[2020-11-25 16:12:50,751 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2825 states and 3062 transitions.
[2020-11-25 16:12:50,767 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2825 to 2731.
[2020-11-25 16:12:50,767 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2731 states.
[2020-11-25 16:12:50,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2731 states to 2731 states and 2935 transitions.
[2020-11-25 16:12:50,769 INFO  L751         BuchiCegarLoop]: Abstraction has 2731 states and 2935 transitions.
[2020-11-25 16:12:50,769 INFO  L631         BuchiCegarLoop]: Abstraction has 2731 states and 2935 transitions.
[2020-11-25 16:12:50,770 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:12:50,770 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2731 states and 2935 transitions.
[2020-11-25 16:12:50,772 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:12:50,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:50,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:50,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:50,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND FALSE  !(revert)
[L2334]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2335]              __tmp__balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2336]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2337]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2338]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2338]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L2339]  COND FALSE  !(revert)
[L2345]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][to_s371];
[L2346]              __tmp__balances_FASTPAY[this][to_s371] := __var_4;
[L2347]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][to_s371];
[L2348]              success_s371 := true;
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND FALSE  !(revert)
[L2334]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2335]              __tmp__balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2336]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2337]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2338]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2338]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L2339]  COND FALSE  !(revert)
[L2345]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][to_s371];
[L2346]              __tmp__balances_FASTPAY[this][to_s371] := __var_4;
[L2347]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][to_s371];
[L2348]              success_s371 := true;
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:50,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:50,777 INFO  L82        PathProgramCache]: Analyzing trace with hash -27979001, now seen corresponding path program 1 times
[2020-11-25 16:12:50,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:50,784 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:50,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:12:50,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:50,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:12:50,810 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:50,810 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:12:50,810 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:12:50,810 INFO  L87              Difference]: Start difference. First operand 2731 states and 2935 transitions. cyclomatic complexity: 208 Second operand 6 states.
[2020-11-25 16:12:51,176 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:51,176 INFO  L93              Difference]: Finished difference Result 3467 states and 3825 transitions.
[2020-11-25 16:12:51,176 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:12:51,176 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3467 states and 3825 transitions.
[2020-11-25 16:12:51,184 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 16:12:51,190 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3467 states to 2658 states and 3013 transitions.
[2020-11-25 16:12:51,190 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 745
[2020-11-25 16:12:51,191 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 745
[2020-11-25 16:12:51,191 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2658 states and 3013 transitions.
[2020-11-25 16:12:51,193 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:51,193 INFO  L728         BuchiCegarLoop]: Abstraction has 2658 states and 3013 transitions.
[2020-11-25 16:12:51,195 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2658 states and 3013 transitions.
[2020-11-25 16:12:51,206 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2658 to 1906.
[2020-11-25 16:12:51,206 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1906 states.
[2020-11-25 16:12:51,208 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1906 states to 1906 states and 2059 transitions.
[2020-11-25 16:12:51,208 INFO  L751         BuchiCegarLoop]: Abstraction has 1906 states and 2059 transitions.
[2020-11-25 16:12:51,208 INFO  L631         BuchiCegarLoop]: Abstraction has 1906 states and 2059 transitions.
[2020-11-25 16:12:51,208 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:12:51,208 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1906 states and 2059 transitions.
[2020-11-25 16:12:51,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:51,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:51,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:51,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:51,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:51,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:51,215 INFO  L82        PathProgramCache]: Analyzing trace with hash 621391528, now seen corresponding path program 1 times
[2020-11-25 16:12:51,215 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:51,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:51,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 16:12:51,487 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:51,487 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 16:12:51,488 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:51,488 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 16:12:51,488 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 16:12:51,488 INFO  L87              Difference]: Start difference. First operand 1906 states and 2059 transitions. cyclomatic complexity: 156 Second operand 14 states.
[2020-11-25 16:12:53,171 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:53,171 INFO  L93              Difference]: Finished difference Result 1923 states and 2074 transitions.
[2020-11-25 16:12:53,171 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 16:12:53,171 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1923 states and 2074 transitions.
[2020-11-25 16:12:53,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:53,178 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1923 states to 1917 states and 2067 transitions.
[2020-11-25 16:12:53,178 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 581
[2020-11-25 16:12:53,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 581
[2020-11-25 16:12:53,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1917 states and 2067 transitions.
[2020-11-25 16:12:53,180 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:53,180 INFO  L728         BuchiCegarLoop]: Abstraction has 1917 states and 2067 transitions.
[2020-11-25 16:12:53,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1917 states and 2067 transitions.
[2020-11-25 16:12:53,189 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1917 to 1898.
[2020-11-25 16:12:53,189 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1898 states.
[2020-11-25 16:12:53,191 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1898 states to 1898 states and 2048 transitions.
[2020-11-25 16:12:53,191 INFO  L751         BuchiCegarLoop]: Abstraction has 1898 states and 2048 transitions.
[2020-11-25 16:12:53,191 INFO  L631         BuchiCegarLoop]: Abstraction has 1898 states and 2048 transitions.
[2020-11-25 16:12:53,191 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:12:53,191 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1898 states and 2048 transitions.
[2020-11-25 16:12:53,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:12:53,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:12:53,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:12:53,196 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:12:53,196 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_FASTPAY0 := false;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == FASTPAY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_FASTPAY[this] := -1992107711;
[L2236]              name_FASTPAY[this] := -1992107711;
[L2237]              decimals_FASTPAY[this] := 0;
[L2238]              _totalSupply_FASTPAY[this] := 0;
[L2239]              balances_FASTPAY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_FASTPAY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_FASTPAY[this] := -427338649;
[L2245]              name_FASTPAY[this] := -427338649;
[L2246]              decimals_FASTPAY[this] := 18;
[L2247]              _totalSupply_FASTPAY[this] := 1000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2249]              balances_FASTPAY[this][275816698117181950596981224632760865204700791384] := _totalSupply_FASTPAY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][275816698117181950596981224632760865204700791384];
[L2251]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2288]  RET         call FASTPAY_FASTPAY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call FASTPAY_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call FASTPAY_FASTPAY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == FASTPAY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][msgsender_MSG];
[L2365]              balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == FASTPAY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_FASTPAY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_FASTPAY[this][to_s371];
[L2376]              balances_FASTPAY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_FASTPAY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_FASTPAY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_FASTPAY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s371 == true && balances_FASTPAY[this][msgsender_MSG] == old(balances_FASTPAY[this][msgsender_MSG]) - tokens_s371) && balances_FASTPAY[this][to_s371] == old(balances_FASTPAY[this][to_s371]) + tokens_s371) && _totalSupply_FASTPAY[this] == old(_totalSupply_FASTPAY[this])) && allowed_FASTPAY[this] == old(allowed_FASTPAY[this])) && balances_FASTPAY[this][p1] == old(balances_FASTPAY[this][p1])) && symbol_FASTPAY[this] == old(symbol_FASTPAY[this])) && name_FASTPAY[this] == old(name_FASTPAY[this])) && decimals_FASTPAY[this] == old(decimals_FASTPAY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s371) && msgsender_MSG != to_s371) && tokens_s371 <= balances_FASTPAY[this][msgsender_MSG]) && balances_FASTPAY[this][to_s371] + tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][to_s371] >= 0) && balances_FASTPAY[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_FASTPAY[this][msgsender_MSG] >= 0) && balances_FASTPAY[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_FASTPAY0 := true;
[L3]                 call_transfer_FASTPAY0 := false;
[L3]                 revert := revert_hold;
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND TRUE   __exception
[L936]               __tmp__Balance := Balance;
[L937]               __tmp__DType := DType;
[L938]               __tmp__Alloc := Alloc;
[L939]               __tmp__balance_ADDR := balance_ADDR;
[L940]               __tmp__M_Ref_int := M_Ref_int;
[L941]               __tmp__sum_balances0 := sum_balances0;
[L942]               __tmp__alloc_allowed_FASTPAY_lvl0 := alloc_allowed_FASTPAY_lvl0;
[L943]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L944]               __tmp__sum_allowed1 := sum_allowed1;
[L945]               __tmp__Length := Length;
[L946]               __tmp__now := now;
[L947]               __tmp__owner_Owned := owner_Owned;
[L948]               __tmp__newOwner_Owned := newOwner_Owned;
[L949]               __tmp__symbol_FASTPAY := symbol_FASTPAY;
[L950]               __tmp__name_FASTPAY := name_FASTPAY;
[L951]               __tmp__decimals_FASTPAY := decimals_FASTPAY;
[L952]               __tmp___totalSupply_FASTPAY := _totalSupply_FASTPAY;
[L953]               __tmp__balances_FASTPAY := balances_FASTPAY;
[L954]               __tmp__allowed_FASTPAY := allowed_FASTPAY;
[L955]   CALL        call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2326]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2327]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2327]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][msgsender_MSG], tokens_s371);
[L2328]  COND FALSE  !(revert)
[L2334]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2335]              __tmp__balances_FASTPAY[this][msgsender_MSG] := __var_3;
[L2336]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_FASTPAY[this][msgsender_MSG];
[L2337]  COND TRUE   __tmp__DType[this] == FASTPAY
[L2338]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2338]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_FASTPAY[this][to_s371], tokens_s371);
[L2339]  COND TRUE   revert
[L955]   RET         call success_s371 := transfer~address~uint256_FASTPAY__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L956]               assume revert || gas < 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_FASTPAY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_FASTPAY(this);

Loop:
[L4261]  CALL        call CorralChoice_FASTPAY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != FASTPAY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_FASTPAY(this);

[2020-11-25 16:12:53,199 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:12:53,199 INFO  L82        PathProgramCache]: Analyzing trace with hash -752248934, now seen corresponding path program 1 times
[2020-11-25 16:12:53,200 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:12:53,217 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:12:53,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 16:12:53,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:12:53,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 16:12:53,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:12:53,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 16:12:53,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 16:12:53,287 INFO  L87              Difference]: Start difference. First operand 1898 states and 2048 transitions. cyclomatic complexity: 153 Second operand 9 states.
[2020-11-25 16:12:53,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:12:53,531 INFO  L93              Difference]: Finished difference Result 1096 states and 1178 transitions.
[2020-11-25 16:12:53,532 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 16:12:53,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1096 states and 1178 transitions.
[2020-11-25 16:12:53,534 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:12:53,534 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1096 states to 0 states and 0 transitions.
[2020-11-25 16:12:53,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:12:53,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:12:53,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:12:53,534 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:12:53,534 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:12:53,534 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:12:53,534 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:12:53,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:12:53,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:12:53,535 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:12:53,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:12:53,537 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:12:53 BasicIcfg
[2020-11-25 16:12:53,537 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:12:53,538 INFO  L168              Benchmark]: Toolchain (without parser) took 17225.46 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -714.5 MB). Peak memory consumption was 478.3 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,539 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,539 INFO  L168              Benchmark]: Boogie Preprocessor took 100.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,539 INFO  L168              Benchmark]: UtopiaSpecLang took 65.51 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,539 INFO  L168              Benchmark]: Boogie Printer took 16.01 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,540 INFO  L168              Benchmark]: RCFGBuilder took 763.49 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.7 MB in the end (delta: 113.0 MB). Peak memory consumption was 113.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,540 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.54 ms. Allocated memory is still 1.0 GB. Free memory was 800.7 MB in the beginning and 797.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,540 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1542.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 161.5 MB). Free memory was 797.1 MB in the beginning and 958.1 MB in the end (delta: -160.9 MB). Peak memory consumption was 163.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,541 INFO  L168              Benchmark]: BlockEncodingV2 took 160.48 ms. Allocated memory is still 1.2 GB. Free memory was 958.1 MB in the beginning and 888.1 MB in the end (delta: 69.9 MB). Peak memory consumption was 69.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,541 INFO  L168              Benchmark]: BuchiAutomizer took 14535.00 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 1.0 GB). Free memory was 888.1 MB in the beginning and 1.6 GB in the end (delta: -761.5 MB). Peak memory consumption was 269.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:12:53,543 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3720 locations, 6402 edges
  - StatisticsResult: Encoded RCFG
    3660 locations, 6242 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 100.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.51 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.01 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 763.49 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.7 MB in the end (delta: 113.0 MB). Peak memory consumption was 113.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.54 ms. Allocated memory is still 1.0 GB. Free memory was 800.7 MB in the beginning and 797.1 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1542.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 161.5 MB). Free memory was 797.1 MB in the beginning and 958.1 MB in the end (delta: -160.9 MB). Peak memory consumption was 163.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 160.48 ms. Allocated memory is still 1.2 GB. Free memory was 958.1 MB in the beginning and 888.1 MB in the end (delta: 69.9 MB). Peak memory consumption was 69.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14535.00 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 1.0 GB). Free memory was 888.1 MB in the beginning and 1.6 GB in the end (delta: -761.5 MB). Peak memory consumption was 269.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1564 locations, 1976 edges
  - StatisticsResult: BuchiProgram size
    3720 locations, 6402 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 22 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.5s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.8s. Construction of modules took 9.7s. BÃ¼chi inclusion checks took 2.4s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 7 MinimizatonAttempts, 2094 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2742 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21260 SDtfs, 25625 SDslu, 49125 SDs, 0 SdLazy, 73365 SolverSat, 4225 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_FASTPAY0) ==> ( <>(success_transfer_FASTPAY0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
