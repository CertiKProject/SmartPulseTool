This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:07:43,030 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:07:43,032 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:07:43,043 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:07:43,043 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:07:43,044 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:07:43,045 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:07:43,047 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:07:43,048 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:07:43,049 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:07:43,050 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:07:43,050 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:07:43,051 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:07:43,052 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:07:43,052 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:07:43,053 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:07:43,054 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:07:43,055 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:07:43,057 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:07:43,058 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:07:43,058 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:07:43,059 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:07:43,061 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:07:43,061 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:07:43,061 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:07:43,062 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:07:43,062 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:07:43,063 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:07:43,063 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:07:43,063 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:07:43,063 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:07:43,064 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:07:43,064 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:07:43,065 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:07:43,066 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:07:43,066 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:07:43,066 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:07:43,067 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:07:43,067 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:07:43,067 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:07:43,068 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:07:43,068 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:07:43,076 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:07:43,076 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:07:43,077 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:07:43,077 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:07:43,077 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:07:43,077 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:07:43,077 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:07:43,078 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:07:43,078 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:07:43,078 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:07:43,079 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:07:43,079 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:07:43,104 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:07:43,118 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:07:43,121 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:07:43,122 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:07:43,122 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:07:43,123 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl
[2020-11-25 16:07:43,123 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl'
[2020-11-25 16:07:43,237 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:07:43,238 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:07:43,239 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:07:43,239 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:07:43,239 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:07:43,256 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,258 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,300 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,300 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,330 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,343 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,353 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,367 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:07:43,367 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:07:43,368 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:07:43,370 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:07:43,374 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/1) ...
[2020-11-25 16:07:43,394 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(EXEToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:07:43,400 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(EXEToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:07:43,409 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(EXEToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:07:43,418 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s1083 && amount_s1083<=_balances_ERC20[this][msg.sender] ) && amount_s1083>=0 ) && amount_s1083<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s1083]>=0 ) && _balances_ERC20[this][recipient_s1083]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1083,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:07:43,421 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _lockTimes_EXEToken[this]==( old(_lockTimes_EXEToken[this]) ) ) && _lockAmounts_EXEToken[this]==( old(_lockAmounts_EXEToken[this]) ) ) && stopped_Stoppable[this]==( old(stopped_Stoppable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_EXEToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_EXEToken>]]]]]]
[2020-11-25 16:07:43,427 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(EXEToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:07:43,427 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_EXEToken0) ==> ( <>AP(success_transfer_EXEToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:07:43,440 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:07:43 PropertyContainer
[2020-11-25 16:07:43,440 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:07:43,441 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:07:43,441 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:07:43,441 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:07:43,442 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/2) ...
[2020-11-25 16:07:43,442 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:07:43,442 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:07:43,467 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:07:43" (2/2) ...
[2020-11-25 16:07:43,467 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:07:43,468 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:07:43,468 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:07:43,468 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:07:43,469 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/2) ...
[2020-11-25 16:07:43,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:07:43,523 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:07:43,523 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:07:43,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:07:43,523 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:07:43,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:07:43,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__success
[2020-11-25 16:07:43,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:07:43,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:07:43,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:07:43,525 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:07:43,526 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:07:43,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:07:43,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:07:43,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable
[2020-11-25 16:07:43,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable
[2020-11-25 16:07:43,529 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable
[2020-11-25 16:07:43,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable
[2020-11-25 16:07:43,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable
[2020-11-25 16:07:43,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken
[2020-11-25 16:07:43,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:07:43,530 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken
[2020-11-25 16:07:43,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken
[2020-11-25 16:07:43,531 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:07:43,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:07:43,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__success
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:07:43,532 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Stoppable
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Stoppable
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EXEToken
[2020-11-25 16:07:43,533 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,534 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__fail
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:07:43,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:07:43,536 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:07:43,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:07:43,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:07:43,539 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__success
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__success
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__fail
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__success
[2020-11-25 16:07:43,540 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__success
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__success
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__success
[2020-11-25 16:07:43,541 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:07:43,542 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__fail
[2020-11-25 16:07:43,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__fail
[2020-11-25 16:07:43,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:07:43,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:07:43,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:07:43,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:07:43,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:07:43,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__success
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__success
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__success
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__success
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__fail
[2020-11-25 16:07:43,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__fail
[2020-11-25 16:07:43,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__success
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:07:43,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:07:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Stoppable
[2020-11-25 16:07:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Stoppable
[2020-11-25 16:07:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EXEToken
[2020-11-25 16:07:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:07:43,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:07:43,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:07:43,876 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:07:43,876 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:07:43,876 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:07:44,498 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:07:44,498 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:07:44,502 INFO  L202        PluginConnector]: Adding new model EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:07:44 BoogieIcfgContainer
[2020-11-25 16:07:44,502 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:07:43" (2/2) ...
[2020-11-25 16:07:44,502 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:07:44,502 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@56d677a8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:07:44, skipping insertion in model container
[2020-11-25 16:07:44,502 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:07:44,502 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:07:44,503 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:07:44,504 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:07:44,504 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/3) ...
[2020-11-25 16:07:44,504 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@13197f2d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:07:44, skipping insertion in model container
[2020-11-25 16:07:44,504 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:07:43" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:07:44,542 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:07:44 NWAContainer
[2020-11-25 16:07:44,542 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:07:44,542 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:07:44,542 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:07:44,543 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:07:44,543 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:07:44" (3/4) ...
[2020-11-25 16:07:44,544 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7be3273c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:07:44, skipping insertion in model container
[2020-11-25 16:07:44,544 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:07:44" (4/4) ...
[2020-11-25 16:07:44,547 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:07:44,553 INFO  L110   BuchiProductObserver]: Initial RCFG 2512 locations, 3420 edges
[2020-11-25 16:07:44,553 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:07:44,565 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:07:46,299 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:07:46,307 INFO  L110   BuchiProductObserver]: BuchiProgram size 6230 locations, 11163 edges
[2020-11-25 16:07:46,308 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:07:46 BoogieIcfgContainer
[2020-11-25 16:07:46,308 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:07:46,308 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:07:46,308 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:07:46,309 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:07:46,310 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:07:46" (1/1) ...
[2020-11-25 16:07:46,422 INFO  L313           BlockEncoder]: Initial Icfg 6230 locations, 11163 edges
[2020-11-25 16:07:46,423 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:07:46,423 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:07:46,423 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:07:46,424 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:07:46,437 INFO  L70    emoveInfeasibleEdges]: Removed 159 edges and 19 locations because of local infeasibility
[2020-11-25 16:07:46,447 INFO  L70        RemoveSinkStates]: Removed 80 edges and 53 locations by removing sink states
[2020-11-25 16:07:46,459 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:07:46,462 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:07:46,466 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:07:46,467 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:07:46,470 INFO  L313           BlockEncoder]: Encoded RCFG 6124 locations, 10874 edges
[2020-11-25 16:07:46,470 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:07:46 BasicIcfg
[2020-11-25 16:07:46,470 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:07:46,471 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:07:46,471 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:07:46,472 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:07:46,472 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,472 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:07:43" (1/6) ...
[2020-11-25 16:07:46,474 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49edf2f1 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:07:46, skipping insertion in model container
[2020-11-25 16:07:46,474 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,475 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:07:43" (2/6) ...
[2020-11-25 16:07:46,475 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49edf2f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:07:46, skipping insertion in model container
[2020-11-25 16:07:46,475 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,475 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:07:44" (3/6) ...
[2020-11-25 16:07:46,475 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49edf2f1 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:07:46, skipping insertion in model container
[2020-11-25 16:07:46,475 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,475 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:07:44" (4/6) ...
[2020-11-25 16:07:46,476 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49edf2f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:07:46, skipping insertion in model container
[2020-11-25 16:07:46,476 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,476 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:07:46" (5/6) ...
[2020-11-25 16:07:46,476 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@49edf2f1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:07:46, skipping insertion in model container
[2020-11-25 16:07:46,476 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:07:46,476 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:07:46" (6/6) ...
[2020-11-25 16:07:46,477 INFO  L404   chiAutomizerObserver]: Analyzing ICFG EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transfer-self.bpl_BEv2
[2020-11-25 16:07:46,503 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:07:46,503 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:07:46,503 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:07:46,503 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:07:46,503 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:07:46,503 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:07:46,503 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:07:46,503 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:07:46,503 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:07:46,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6124 states.
[2020-11-25 16:07:46,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:46,592 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:46,592 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:46,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:46,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:46,599 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:07:46,599 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6124 states.
[2020-11-25 16:07:46,622 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:46,622 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:46,622 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:46,623 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:46,623 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND TRUE   choice == 21
[L6890]              gas := gas - 21000;
[L6891]  COND FALSE  !(gas >= 0)
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:46,636 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:46,636 INFO  L82        PathProgramCache]: Analyzing trace with hash -2029412531, now seen corresponding path program 1 times
[2020-11-25 16:07:46,640 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:46,661 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:46,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:07:46,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:46,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:07:47,041 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:47,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:07:47,051 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:07:47,052 INFO  L87              Difference]: Start difference. First operand 6124 states. Second operand 4 states.
[2020-11-25 16:07:47,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:47,655 INFO  L93              Difference]: Finished difference Result 3831 states and 4414 transitions.
[2020-11-25 16:07:47,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:07:47,656 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3831 states and 4414 transitions.
[2020-11-25 16:07:47,679 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:47,716 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3831 states to 3831 states and 4414 transitions.
[2020-11-25 16:07:47,717 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:07:47,721 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-25 16:07:47,722 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3831 states and 4414 transitions.
[2020-11-25 16:07:47,738 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:47,738 INFO  L728         BuchiCegarLoop]: Abstraction has 3831 states and 4414 transitions.
[2020-11-25 16:07:47,759 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3831 states and 4414 transitions.
[2020-11-25 16:07:47,820 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3831 to 3831.
[2020-11-25 16:07:47,821 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3831 states.
[2020-11-25 16:07:47,829 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3831 states to 3831 states and 4414 transitions.
[2020-11-25 16:07:47,830 INFO  L751         BuchiCegarLoop]: Abstraction has 3831 states and 4414 transitions.
[2020-11-25 16:07:47,830 INFO  L631         BuchiCegarLoop]: Abstraction has 3831 states and 4414 transitions.
[2020-11-25 16:07:47,830 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:07:47,830 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3831 states and 4414 transitions.
[2020-11-25 16:07:47,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:47,841 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:47,841 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:47,844 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:47,844 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND TRUE   revert
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:47,850 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:47,850 INFO  L82        PathProgramCache]: Analyzing trace with hash 1150025913, now seen corresponding path program 1 times
[2020-11-25 16:07:47,851 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:47,862 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:47,892 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:07:47,892 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:47,893 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:07:47,894 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:47,894 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:07:47,894 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:07:47,894 INFO  L87              Difference]: Start difference. First operand 3831 states and 4414 transitions. cyclomatic complexity: 585 Second operand 3 states.
[2020-11-25 16:07:47,984 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:47,984 INFO  L93              Difference]: Finished difference Result 5009 states and 5798 transitions.
[2020-11-25 16:07:47,985 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:07:47,985 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5009 states and 5798 transitions.
[2020-11-25 16:07:48,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:07:48,022 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5009 states to 5009 states and 5798 transitions.
[2020-11-25 16:07:48,022 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1188
[2020-11-25 16:07:48,023 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1188
[2020-11-25 16:07:48,023 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5009 states and 5798 transitions.
[2020-11-25 16:07:48,030 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:48,030 INFO  L728         BuchiCegarLoop]: Abstraction has 5009 states and 5798 transitions.
[2020-11-25 16:07:48,035 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5009 states and 5798 transitions.
[2020-11-25 16:07:48,076 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5009 to 4235.
[2020-11-25 16:07:48,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4235 states.
[2020-11-25 16:07:48,081 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4235 states to 4235 states and 4864 transitions.
[2020-11-25 16:07:48,081 INFO  L751         BuchiCegarLoop]: Abstraction has 4235 states and 4864 transitions.
[2020-11-25 16:07:48,082 INFO  L631         BuchiCegarLoop]: Abstraction has 4235 states and 4864 transitions.
[2020-11-25 16:07:48,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:07:48,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4235 states and 4864 transitions.
[2020-11-25 16:07:48,087 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:48,088 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:48,088 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:48,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:48,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND TRUE   !(account_s654 != null)
[L3741]              revert := true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND TRUE   revert
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND TRUE   !!stopped_Stoppable[this]
[L6068]              revert := true;
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND TRUE   revert
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:48,094 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:48,094 INFO  L82        PathProgramCache]: Analyzing trace with hash -1587672943, now seen corresponding path program 1 times
[2020-11-25 16:07:48,095 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:48,110 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:48,197 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:07:48,197 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:48,198 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:07:48,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:48,199 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:07:48,199 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:07:48,199 INFO  L87              Difference]: Start difference. First operand 4235 states and 4864 transitions. cyclomatic complexity: 631 Second operand 3 states.
[2020-11-25 16:07:48,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:48,281 INFO  L93              Difference]: Finished difference Result 5009 states and 5620 transitions.
[2020-11-25 16:07:48,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:07:48,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5009 states and 5620 transitions.
[2020-11-25 16:07:48,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:07:48,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5009 states to 4655 states and 5202 transitions.
[2020-11-25 16:07:48,310 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1061
[2020-11-25 16:07:48,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-25 16:07:48,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4655 states and 5202 transitions.
[2020-11-25 16:07:48,316 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:48,316 INFO  L728         BuchiCegarLoop]: Abstraction has 4655 states and 5202 transitions.
[2020-11-25 16:07:48,321 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4655 states and 5202 transitions.
[2020-11-25 16:07:48,355 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4655 to 3989.
[2020-11-25 16:07:48,355 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3989 states.
[2020-11-25 16:07:48,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3989 states to 3989 states and 4376 transitions.
[2020-11-25 16:07:48,360 INFO  L751         BuchiCegarLoop]: Abstraction has 3989 states and 4376 transitions.
[2020-11-25 16:07:48,360 INFO  L631         BuchiCegarLoop]: Abstraction has 3989 states and 4376 transitions.
[2020-11-25 16:07:48,360 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:07:48,360 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3989 states and 4376 transitions.
[2020-11-25 16:07:48,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:07:48,365 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:48,365 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:48,367 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:48,367 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6060]              revert := true;
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6060]              revert := true;
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:48,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:48,372 INFO  L82        PathProgramCache]: Analyzing trace with hash 532883016, now seen corresponding path program 1 times
[2020-11-25 16:07:48,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:48,385 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:48,479 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 16:07:48,479 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:48,479 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:07:48,480 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:48,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:07:48,480 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:07:48,480 INFO  L87              Difference]: Start difference. First operand 3989 states and 4376 transitions. cyclomatic complexity: 389 Second operand 13 states.
[2020-11-25 16:07:51,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:51,453 INFO  L93              Difference]: Finished difference Result 6535 states and 7237 transitions.
[2020-11-25 16:07:51,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 16:07:51,453 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6535 states and 7237 transitions.
[2020-11-25 16:07:51,465 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:07:51,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6535 states to 6525 states and 7225 transitions.
[2020-11-25 16:07:51,481 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 16:07:51,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 16:07:51,482 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6525 states and 7225 transitions.
[2020-11-25 16:07:51,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:51,488 INFO  L728         BuchiCegarLoop]: Abstraction has 6525 states and 7225 transitions.
[2020-11-25 16:07:51,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6525 states and 7225 transitions.
[2020-11-25 16:07:51,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6525 to 5623.
[2020-11-25 16:07:51,539 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5623 states.
[2020-11-25 16:07:51,545 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5623 states to 5623 states and 6302 transitions.
[2020-11-25 16:07:51,546 INFO  L751         BuchiCegarLoop]: Abstraction has 5623 states and 6302 transitions.
[2020-11-25 16:07:51,546 INFO  L631         BuchiCegarLoop]: Abstraction has 5623 states and 6302 transitions.
[2020-11-25 16:07:51,546 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:07:51,546 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5623 states and 6302 transitions.
[2020-11-25 16:07:51,552 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 16:07:51,552 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:51,552 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:51,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:51,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND TRUE   revert
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND TRUE   revert
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:51,560 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:51,560 INFO  L82        PathProgramCache]: Analyzing trace with hash 1864377370, now seen corresponding path program 1 times
[2020-11-25 16:07:51,560 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:51,574 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:51,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-11-25 16:07:51,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:51,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 16:07:51,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:51,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:07:51,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=272, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:07:51,710 INFO  L87              Difference]: Start difference. First operand 5623 states and 6302 transitions. cyclomatic complexity: 683 Second operand 18 states.
[2020-11-25 16:07:54,612 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:54,612 INFO  L93              Difference]: Finished difference Result 5939 states and 6817 transitions.
[2020-11-25 16:07:54,612 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:07:54,612 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5939 states and 6817 transitions.
[2020-11-25 16:07:54,626 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 28
[2020-11-25 16:07:54,643 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5939 states to 5939 states and 6817 transitions.
[2020-11-25 16:07:54,643 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 16:07:54,644 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 16:07:54,644 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5939 states and 6817 transitions.
[2020-11-25 16:07:54,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:54,649 INFO  L728         BuchiCegarLoop]: Abstraction has 5939 states and 6817 transitions.
[2020-11-25 16:07:54,652 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5939 states and 6817 transitions.
[2020-11-25 16:07:54,696 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5939 to 5859.
[2020-11-25 16:07:54,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5859 states.
[2020-11-25 16:07:54,703 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5859 states to 5859 states and 6629 transitions.
[2020-11-25 16:07:54,703 INFO  L751         BuchiCegarLoop]: Abstraction has 5859 states and 6629 transitions.
[2020-11-25 16:07:54,703 INFO  L631         BuchiCegarLoop]: Abstraction has 5859 states and 6629 transitions.
[2020-11-25 16:07:54,703 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:07:54,703 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5859 states and 6629 transitions.
[2020-11-25 16:07:54,709 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 16:07:54,709 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:54,709 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:54,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:54,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND TRUE   !!__var_28
[L4517]              revert := true;
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND TRUE   !!__var_28
[L4517]              revert := true;
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:54,715 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:54,715 INFO  L82        PathProgramCache]: Analyzing trace with hash 1590075449, now seen corresponding path program 1 times
[2020-11-25 16:07:54,716 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:54,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:54,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 139 trivial. 0 not checked.
[2020-11-25 16:07:54,868 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:54,868 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 16:07:54,869 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:54,869 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 16:07:54,869 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-25 16:07:54,870 INFO  L87              Difference]: Start difference. First operand 5859 states and 6629 transitions. cyclomatic complexity: 778 Second operand 15 states.
[2020-11-25 16:07:57,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:57,851 INFO  L93              Difference]: Finished difference Result 10035 states and 11628 transitions.
[2020-11-25 16:07:57,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:07:57,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10035 states and 11628 transitions.
[2020-11-25 16:07:57,874 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 16:07:57,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10035 states to 10035 states and 11628 transitions.
[2020-11-25 16:07:57,902 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2424
[2020-11-25 16:07:57,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2424
[2020-11-25 16:07:57,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10035 states and 11628 transitions.
[2020-11-25 16:07:57,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:57,909 INFO  L728         BuchiCegarLoop]: Abstraction has 10035 states and 11628 transitions.
[2020-11-25 16:07:57,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10035 states and 11628 transitions.
[2020-11-25 16:07:57,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10035 to 8977.
[2020-11-25 16:07:58,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8977 states.
[2020-11-25 16:07:58,011 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8977 states to 8977 states and 10446 transitions.
[2020-11-25 16:07:58,011 INFO  L751         BuchiCegarLoop]: Abstraction has 8977 states and 10446 transitions.
[2020-11-25 16:07:58,011 INFO  L631         BuchiCegarLoop]: Abstraction has 8977 states and 10446 transitions.
[2020-11-25 16:07:58,011 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:07:58,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8977 states and 10446 transitions.
[2020-11-25 16:07:58,021 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:07:58,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:58,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:58,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:58,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND TRUE   !(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG])
[L3449]              revert := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND TRUE   !(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG])
[L3449]              revert := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:58,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:58,037 INFO  L82        PathProgramCache]: Analyzing trace with hash 932164896, now seen corresponding path program 1 times
[2020-11-25 16:07:58,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:58,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:58,127 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-11-25 16:07:58,127 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:58,127 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 16:07:58,128 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:58,128 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 16:07:58,128 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 16:07:58,128 INFO  L87              Difference]: Start difference. First operand 8977 states and 10446 transitions. cyclomatic complexity: 1479 Second operand 9 states.
[2020-11-25 16:07:59,135 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:59,135 INFO  L93              Difference]: Finished difference Result 9065 states and 10617 transitions.
[2020-11-25 16:07:59,135 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:07:59,135 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9065 states and 10617 transitions.
[2020-11-25 16:07:59,157 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 16:07:59,180 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9065 states to 9065 states and 10617 transitions.
[2020-11-25 16:07:59,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2228
[2020-11-25 16:07:59,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2228
[2020-11-25 16:07:59,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9065 states and 10617 transitions.
[2020-11-25 16:07:59,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:59,187 INFO  L728         BuchiCegarLoop]: Abstraction has 9065 states and 10617 transitions.
[2020-11-25 16:07:59,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9065 states and 10617 transitions.
[2020-11-25 16:07:59,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9065 to 8989.
[2020-11-25 16:07:59,242 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8989 states.
[2020-11-25 16:07:59,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8989 states to 8989 states and 10458 transitions.
[2020-11-25 16:07:59,253 INFO  L751         BuchiCegarLoop]: Abstraction has 8989 states and 10458 transitions.
[2020-11-25 16:07:59,254 INFO  L631         BuchiCegarLoop]: Abstraction has 8989 states and 10458 transitions.
[2020-11-25 16:07:59,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:07:59,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8989 states and 10458 transitions.
[2020-11-25 16:07:59,263 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:07:59,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:59,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:59,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:59,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND TRUE   !(to_s389 != null)
[L3454]              revert := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND TRUE   !(to_s389 != null)
[L3454]              revert := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:59,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:59,268 INFO  L82        PathProgramCache]: Analyzing trace with hash -1858293909, now seen corresponding path program 1 times
[2020-11-25 16:07:59,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:59,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:59,380 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 139 trivial. 0 not checked.
[2020-11-25 16:07:59,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:59,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:07:59,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:59,381 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:07:59,381 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:07:59,381 INFO  L87              Difference]: Start difference. First operand 8989 states and 10458 transitions. cyclomatic complexity: 1479 Second operand 7 states.
[2020-11-25 16:07:59,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:07:59,441 INFO  L93              Difference]: Finished difference Result 9101 states and 10591 transitions.
[2020-11-25 16:07:59,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:07:59,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9101 states and 10591 transitions.
[2020-11-25 16:07:59,460 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:07:59,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9101 states to 9093 states and 10583 transitions.
[2020-11-25 16:07:59,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2238
[2020-11-25 16:07:59,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2238
[2020-11-25 16:07:59,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9093 states and 10583 transitions.
[2020-11-25 16:07:59,490 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:07:59,490 INFO  L728         BuchiCegarLoop]: Abstraction has 9093 states and 10583 transitions.
[2020-11-25 16:07:59,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9093 states and 10583 transitions.
[2020-11-25 16:07:59,544 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9093 to 9025.
[2020-11-25 16:07:59,544 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9025 states.
[2020-11-25 16:07:59,556 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9025 states to 9025 states and 10498 transitions.
[2020-11-25 16:07:59,556 INFO  L751         BuchiCegarLoop]: Abstraction has 9025 states and 10498 transitions.
[2020-11-25 16:07:59,557 INFO  L631         BuchiCegarLoop]: Abstraction has 9025 states and 10498 transitions.
[2020-11-25 16:07:59,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:07:59,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9025 states and 10498 transitions.
[2020-11-25 16:07:59,566 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:07:59,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:07:59,566 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:07:59,567 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:07:59,568 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND TRUE   revert
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND TRUE   revert
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:07:59,571 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:07:59,571 INFO  L82        PathProgramCache]: Analyzing trace with hash 1618579805, now seen corresponding path program 1 times
[2020-11-25 16:07:59,572 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:07:59,584 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:07:59,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 142 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-11-25 16:07:59,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:07:59,659 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:07:59,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:07:59,660 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 16:07:59,660 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 16:07:59,660 INFO  L87              Difference]: Start difference. First operand 9025 states and 10498 transitions. cyclomatic complexity: 1483 Second operand 10 states.
[2020-11-25 16:08:00,779 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:00,779 INFO  L93              Difference]: Finished difference Result 9101 states and 10641 transitions.
[2020-11-25 16:08:00,779 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 16:08:00,779 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9101 states and 10641 transitions.
[2020-11-25 16:08:00,797 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 16:08:00,819 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9101 states to 9101 states and 10641 transitions.
[2020-11-25 16:08:00,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2262
[2020-11-25 16:08:00,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2262
[2020-11-25 16:08:00,820 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9101 states and 10641 transitions.
[2020-11-25 16:08:00,825 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:00,825 INFO  L728         BuchiCegarLoop]: Abstraction has 9101 states and 10641 transitions.
[2020-11-25 16:08:00,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9101 states and 10641 transitions.
[2020-11-25 16:08:00,876 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9101 to 9025.
[2020-11-25 16:08:00,876 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9025 states.
[2020-11-25 16:08:00,888 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9025 states to 9025 states and 10498 transitions.
[2020-11-25 16:08:00,888 INFO  L751         BuchiCegarLoop]: Abstraction has 9025 states and 10498 transitions.
[2020-11-25 16:08:00,888 INFO  L631         BuchiCegarLoop]: Abstraction has 9025 states and 10498 transitions.
[2020-11-25 16:08:00,888 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:08:00,888 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9025 states and 10498 transitions.
[2020-11-25 16:08:00,898 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:08:00,898 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:00,898 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:00,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:00,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:00,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:00,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 2101832907, now seen corresponding path program 1 times
[2020-11-25 16:08:00,903 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:00,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:01,513 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 13 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:08:01,514 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:01,514 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [37] imperfect sequences [] total 37
[2020-11-25 16:08:01,514 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:01,514 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 16:08:01,515 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1288, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 16:08:01,515 INFO  L87              Difference]: Start difference. First operand 9025 states and 10498 transitions. cyclomatic complexity: 1483 Second operand 38 states.
[2020-11-25 16:08:10,927 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:10,927 INFO  L93              Difference]: Finished difference Result 9205 states and 11060 transitions.
[2020-11-25 16:08:10,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 16:08:10,928 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9205 states and 11060 transitions.
[2020-11-25 16:08:10,950 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-25 16:08:10,976 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9205 states to 9205 states and 11060 transitions.
[2020-11-25 16:08:10,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2282
[2020-11-25 16:08:10,977 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2282
[2020-11-25 16:08:10,977 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9205 states and 11060 transitions.
[2020-11-25 16:08:10,983 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:10,983 INFO  L728         BuchiCegarLoop]: Abstraction has 9205 states and 11060 transitions.
[2020-11-25 16:08:10,987 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9205 states and 11060 transitions.
[2020-11-25 16:08:11,051 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9205 to 9149.
[2020-11-25 16:08:11,051 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9149 states.
[2020-11-25 16:08:11,065 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9149 states to 9149 states and 10803 transitions.
[2020-11-25 16:08:11,065 INFO  L751         BuchiCegarLoop]: Abstraction has 9149 states and 10803 transitions.
[2020-11-25 16:08:11,065 INFO  L631         BuchiCegarLoop]: Abstraction has 9149 states and 10803 transitions.
[2020-11-25 16:08:11,065 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 16:08:11,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9149 states and 10803 transitions.
[2020-11-25 16:08:11,076 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 46
[2020-11-25 16:08:11,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:11,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:11,077 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:11,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND FALSE  !(revert)
[L3461]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L3462]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_4;
[L3463]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L3464]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND TRUE   !(c_s106 >= a_s106)
[L3151]              revert := true;
[L3464]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3465]  COND TRUE   revert
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND FALSE  !(revert)
[L3461]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L3462]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_4;
[L3463]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L3464]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND TRUE   !(c_s106 >= a_s106)
[L3151]              revert := true;
[L3464]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3465]  COND TRUE   revert
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:11,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:11,082 INFO  L82        PathProgramCache]: Analyzing trace with hash -1064471197, now seen corresponding path program 1 times
[2020-11-25 16:08:11,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:11,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:11,226 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 138 trivial. 0 not checked.
[2020-11-25 16:08:11,226 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:11,227 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 16:08:11,227 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:11,227 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:08:11,227 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=208, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:08:11,227 INFO  L87              Difference]: Start difference. First operand 9149 states and 10803 transitions. cyclomatic complexity: 1669 Second operand 16 states.
[2020-11-25 16:08:14,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:14,128 INFO  L93              Difference]: Finished difference Result 9203 states and 10942 transitions.
[2020-11-25 16:08:14,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:08:14,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9203 states and 10942 transitions.
[2020-11-25 16:08:14,152 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 52
[2020-11-25 16:08:14,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9203 states to 9203 states and 10942 transitions.
[2020-11-25 16:08:14,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-25 16:08:14,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-25 16:08:14,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9203 states and 10942 transitions.
[2020-11-25 16:08:14,185 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:14,185 INFO  L728         BuchiCegarLoop]: Abstraction has 9203 states and 10942 transitions.
[2020-11-25 16:08:14,188 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9203 states and 10942 transitions.
[2020-11-25 16:08:14,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9203 to 9141.
[2020-11-25 16:08:14,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9141 states.
[2020-11-25 16:08:14,252 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9141 states to 9141 states and 10795 transitions.
[2020-11-25 16:08:14,252 INFO  L751         BuchiCegarLoop]: Abstraction has 9141 states and 10795 transitions.
[2020-11-25 16:08:14,252 INFO  L631         BuchiCegarLoop]: Abstraction has 9141 states and 10795 transitions.
[2020-11-25 16:08:14,252 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 16:08:14,252 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9141 states and 10795 transitions.
[2020-11-25 16:08:14,262 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 46
[2020-11-25 16:08:14,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:14,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:14,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:14,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND FALSE  !(revert)
[L3461]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L3462]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_4;
[L3463]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L3464]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3464]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3465]  COND FALSE  !(revert)
[L3468]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s389];
[L3469]              __tmp___balances_ERC20[this][to_s389] := __var_5;
[L3470]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s389];
[L3471]              __ret_0_ := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND FALSE  !(revert)
[L4528]              __ret_0_ := __var_29;
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND FALSE  !(revert)
[L4470]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND FALSE  !(revert)
[L4516]  COND FALSE  !(!!__var_28)
[L4520]  COND TRUE   __tmp__DType[this] == EXEToken
[L4521]  CALL        call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3448]  COND FALSE  !(!(value_s389 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L3452]              __var_3 := null;
[L3453]  COND FALSE  !(!(to_s389 != null))
[L3457]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3125]  COND FALSE  !(!(b_s82 <= a_s82))
[L3129]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3130]              __ret_0_ := c_s82;
[L3457]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s389);
[L3458]  COND FALSE  !(revert)
[L3461]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L3462]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_4;
[L3463]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L3464]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3149]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3150]  COND FALSE  !(!(c_s106 >= a_s106))
[L3154]              __ret_0_ := c_s106;
[L3464]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s389], value_s389);
[L3465]  COND FALSE  !(revert)
[L3468]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s389];
[L3469]              __tmp___balances_ERC20[this][to_s389] := __var_5;
[L3470]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s389];
[L3471]              __ret_0_ := true;
[L4521]  RET         call __var_29 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4522]  COND FALSE  !(revert)
[L4528]              __ret_0_ := __var_29;
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:14,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:14,268 INFO  L82        PathProgramCache]: Analyzing trace with hash 2107929458, now seen corresponding path program 1 times
[2020-11-25 16:08:14,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:14,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:14,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 144 trivial. 0 not checked.
[2020-11-25 16:08:14,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:14,342 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:08:14,343 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:14,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 16:08:14,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 16:08:14,343 INFO  L87              Difference]: Start difference. First operand 9141 states and 10795 transitions. cyclomatic complexity: 1669 Second operand 5 states.
[2020-11-25 16:08:14,966 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:14,966 INFO  L93              Difference]: Finished difference Result 12162 states and 15047 transitions.
[2020-11-25 16:08:14,966 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:08:14,966 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12162 states and 15047 transitions.
[2020-11-25 16:08:15,000 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 108
[2020-11-25 16:08:15,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12162 states to 11130 states and 13938 transitions.
[2020-11-25 16:08:15,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2247
[2020-11-25 16:08:15,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2247
[2020-11-25 16:08:15,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11130 states and 13938 transitions.
[2020-11-25 16:08:15,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:15,053 INFO  L728         BuchiCegarLoop]: Abstraction has 11130 states and 13938 transitions.
[2020-11-25 16:08:15,056 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11130 states and 13938 transitions.
[2020-11-25 16:08:15,123 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11130 to 8494.
[2020-11-25 16:08:15,123 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8494 states.
[2020-11-25 16:08:15,134 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8494 states to 8494 states and 9951 transitions.
[2020-11-25 16:08:15,134 INFO  L751         BuchiCegarLoop]: Abstraction has 8494 states and 9951 transitions.
[2020-11-25 16:08:15,134 INFO  L631         BuchiCegarLoop]: Abstraction has 8494 states and 9951 transitions.
[2020-11-25 16:08:15,134 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 16:08:15,134 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8494 states and 9951 transitions.
[2020-11-25 16:08:15,143 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-11-25 16:08:15,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:15,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:15,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:15,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND TRUE   choice == 15
[L6927]              gas := gas - 21000;
[L6928]  COND TRUE   gas >= 0
[L6929]              assume value_s425 >= 0 && value_s425 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6930]              assume msgvalue_MSG == 0;
[L6931]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L747]               havoc __exception;
[L748]               revert := false;
[L749]   COND TRUE   __exception
[L750]               __tmp__Balance := Balance;
[L751]               __tmp__DType := DType;
[L752]               __tmp__Alloc := Alloc;
[L753]               __tmp__balance_ADDR := balance_ADDR;
[L754]               __tmp__M_Ref_int := M_Ref_int;
[L755]               __tmp__sum__balances0 := sum__balances0;
[L756]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L757]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L758]               __tmp__sum__allowed1 := sum__allowed1;
[L759]               __tmp__sum__lockTimes2 := sum__lockTimes2;
[L760]               __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L761]               __tmp__Length := Length;
[L762]               __tmp__now := now;
[L763]               __tmp___owner_Ownable := _owner_Ownable;
[L764]               __tmp___balances_ERC20 := _balances_ERC20;
[L765]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L766]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L767]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L768]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L769]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L770]               __tmp__stopped_Stoppable := stopped_Stoppable;
[L771]               __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L772]               __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L773]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L3511]              __var_6 := null;
[L3512]  COND TRUE   !(spender_s425 != null)
[L3513]              revert := true;
[L773]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L774]               assume revert || gas < 0;
[L6931]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND FALSE  !(choice == 7)
[L6986]  COND FALSE  !(choice == 6)
[L6992]  COND FALSE  !(choice == 5)
[L6998]  COND FALSE  !(choice == 4)
[L7004]  COND FALSE  !(choice == 3)
[L7011]  COND TRUE   choice == 2
[L7012]              gas := gas - 21000;
[L7013]  COND TRUE   gas >= 0
[L7014]              assume releaseTime_s988 >= 0 && releaseTime_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7015]              assume amount_s988 >= 0 && amount_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7016]              assume msgvalue_MSG == 0;
[L7017]  CALL        call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND FALSE  !(choice == 7)
[L6986]  COND FALSE  !(choice == 6)
[L6992]  COND FALSE  !(choice == 5)
[L6998]  COND FALSE  !(choice == 4)
[L7004]  COND FALSE  !(choice == 3)
[L7011]  COND TRUE   choice == 2
[L7012]              gas := gas - 21000;
[L7013]  COND TRUE   gas >= 0
[L7014]              assume releaseTime_s988 >= 0 && releaseTime_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7015]              assume amount_s988 >= 0 && amount_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7016]              assume msgvalue_MSG == 0;
[L7017]  CALL        call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:15,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:15,150 INFO  L82        PathProgramCache]: Analyzing trace with hash 1369796375, now seen corresponding path program 1 times
[2020-11-25 16:08:15,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:15,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:15,884 INFO  L134       CoverageAnalysis]: Checked inductivity of 370 backedges. 15 proven. 0 refuted. 0 times theorem prover too weak. 355 trivial. 0 not checked.
[2020-11-25 16:08:15,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:15,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [35] imperfect sequences [] total 35
[2020-11-25 16:08:15,885 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:15,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 16:08:15,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=1163, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 16:08:15,886 INFO  L87              Difference]: Start difference. First operand 8494 states and 9951 transitions. cyclomatic complexity: 1476 Second operand 36 states.
[2020-11-25 16:08:23,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:23,556 INFO  L93              Difference]: Finished difference Result 8558 states and 10134 transitions.
[2020-11-25 16:08:23,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 16:08:23,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8558 states and 10134 transitions.
[2020-11-25 16:08:23,575 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 44
[2020-11-25 16:08:23,597 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8558 states to 8558 states and 10134 transitions.
[2020-11-25 16:08:23,597 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1886
[2020-11-25 16:08:23,597 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1886
[2020-11-25 16:08:23,598 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8558 states and 10134 transitions.
[2020-11-25 16:08:23,602 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:23,603 INFO  L728         BuchiCegarLoop]: Abstraction has 8558 states and 10134 transitions.
[2020-11-25 16:08:23,605 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8558 states and 10134 transitions.
[2020-11-25 16:08:23,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8558 to 8538.
[2020-11-25 16:08:23,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8538 states.
[2020-11-25 16:08:23,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8538 states to 8538 states and 10108 transitions.
[2020-11-25 16:08:23,665 INFO  L751         BuchiCegarLoop]: Abstraction has 8538 states and 10108 transitions.
[2020-11-25 16:08:23,665 INFO  L631         BuchiCegarLoop]: Abstraction has 8538 states and 10108 transitions.
[2020-11-25 16:08:23,665 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 16:08:23,665 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8538 states and 10108 transitions.
[2020-11-25 16:08:23,674 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 44
[2020-11-25 16:08:23,674 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:23,674 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:23,675 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:23,675 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND TRUE   DType[this] == EXEToken
[L4040]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND FALSE  !(DType[this] == EXEToken)
[L4114]  COND TRUE   DType[this] == ERC20Burnable
[L4115]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4115]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4116]  COND FALSE  !(revert)
[L4040]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4041]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND FALSE  !(DType[this] == EXEToken)
[L4044]  COND TRUE   DType[this] == ERC20Burnable
[L4045]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND FALSE  !(DType[this] == EXEToken)
[L4114]  COND TRUE   DType[this] == ERC20Burnable
[L4115]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4115]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4116]  COND FALSE  !(revert)
[L4045]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4046]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:23,679 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:23,679 INFO  L82        PathProgramCache]: Analyzing trace with hash 1211804586, now seen corresponding path program 1 times
[2020-11-25 16:08:23,679 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:23,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:23,887 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 222 trivial. 0 not checked.
[2020-11-25 16:08:23,887 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:23,887 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:08:23,888 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:23,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:08:23,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:08:23,888 INFO  L87              Difference]: Start difference. First operand 8538 states and 10108 transitions. cyclomatic complexity: 1594 Second operand 7 states.
[2020-11-25 16:08:23,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:23,988 INFO  L93              Difference]: Finished difference Result 8650 states and 10228 transitions.
[2020-11-25 16:08:23,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:08:23,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8650 states and 10228 transitions.
[2020-11-25 16:08:24,017 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 44
[2020-11-25 16:08:24,052 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8650 states to 8514 states and 10076 transitions.
[2020-11-25 16:08:24,052 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1886
[2020-11-25 16:08:24,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1886
[2020-11-25 16:08:24,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8514 states and 10076 transitions.
[2020-11-25 16:08:24,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:24,062 INFO  L728         BuchiCegarLoop]: Abstraction has 8514 states and 10076 transitions.
[2020-11-25 16:08:24,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8514 states and 10076 transitions.
[2020-11-25 16:08:24,124 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8514 to 8514.
[2020-11-25 16:08:24,124 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8514 states.
[2020-11-25 16:08:24,137 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8514 states to 8514 states and 10076 transitions.
[2020-11-25 16:08:24,137 INFO  L751         BuchiCegarLoop]: Abstraction has 8514 states and 10076 transitions.
[2020-11-25 16:08:24,137 INFO  L631         BuchiCegarLoop]: Abstraction has 8514 states and 10076 transitions.
[2020-11-25 16:08:24,137 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 16:08:24,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8514 states and 10076 transitions.
[2020-11-25 16:08:24,146 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 44
[2020-11-25 16:08:24,146 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:24,146 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:24,148 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:24,148 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND TRUE   choice == 8
[L6973]              gas := gas - 21000;
[L6974]  COND TRUE   gas >= 0
[L6975]              assume value_s817 >= 0 && value_s817 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6976]              assume msgvalue_MSG == 0;
[L6977]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1353]              havoc __exception;
[L1354]              revert := false;
[L1355]  COND FALSE  !(__exception)
[L1382]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L4039]  COND TRUE   DType[this] == EXEToken
[L4040]  CALL        call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4109]  COND TRUE   DType[this] == EXEToken
[L4110]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L3792]              __var_18 := null;
[L3793]  COND FALSE  !(!(account_s705 != null))
[L3797]  COND FALSE  !(!(amount_s705 <= _balances_ERC20[this][account_s705]))
[L3801]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3801]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s705);
[L3802]  COND FALSE  !(revert)
[L3805]              _totalSupply_ERC20[this] := __var_19;
[L3806]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3806]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s705], amount_s705);
[L3807]  COND FALSE  !(revert)
[L3810]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s705];
[L3811]              _balances_ERC20[this][account_s705] := __var_20;
[L3812]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s705];
[L3813]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4110]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, who_s845, value_s845);
[L4111]  COND FALSE  !(revert)
[L4040]  RET         call _burn~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s817);
[L4041]  COND FALSE  !(revert)
[L1382]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L1383]              assume !revert && gas >= 0;
[L6977]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s817);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND FALSE  !(__exception)
[L2062]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4537]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6067]  COND FALSE  !(!!stopped_Stoppable[this])
[L4537]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4538]  COND FALSE  !(revert)
[L4541]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4479]  COND TRUE   DType[this] == EXEToken
[L4480]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4480]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4481]  COND FALSE  !(revert)
[L4487]  COND TRUE   DType[this] == EXEToken
[L4488]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3427]              __ret_0_ := _balances_ERC20[this][owner_s312];
[L4488]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4489]  COND FALSE  !(revert)
[L4495]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L4495]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, __var_27, _lockAmounts_EXEToken[this][account_s1055]);
[L4496]  COND FALSE  !(revert)
[L4499]              __ret_0_ := ((_lockTimes_EXEToken[this][account_s1055] != 0 && _lockAmounts_EXEToken[this][account_s1055] != 0) && _lockTimes_EXEToken[this][account_s1055] > now) && (__var_25 <= _lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4541]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4542]  COND FALSE  !(revert)
[L4545]  COND FALSE  !(!!__var_28)
[L4549]  COND TRUE   DType[this] == EXEToken
[L4550]  CALL        call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L3480]  COND FALSE  !(!(value_s389 <= _balances_ERC20[this][msgsender_MSG]))
[L3484]              __var_3 := null;
[L3485]  COND FALSE  !(!(to_s389 != null))
[L3489]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3137]  COND FALSE  !(!(b_s82 <= a_s82))
[L3141]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3142]              __ret_0_ := c_s82;
[L3489]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s389);
[L3490]  COND FALSE  !(revert)
[L3493]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L3494]              _balances_ERC20[this][msgsender_MSG] := __var_4;
[L3495]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L3496]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3496]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s389], value_s389);
[L3497]  COND FALSE  !(revert)
[L3500]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s389];
[L3501]              _balances_ERC20[this][to_s389] := __var_5;
[L3502]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s389];
[L3503]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3504]              __ret_0_ := true;
[L4550]  RET         call __var_29 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4551]  COND FALSE  !(revert)
[L4557]              __ret_0_ := __var_29;
[L2062]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2063]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:24,151 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:24,152 INFO  L82        PathProgramCache]: Analyzing trace with hash -673281722, now seen corresponding path program 1 times
[2020-11-25 16:08:24,152 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:24,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:08:24,467 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 78 proven. 0 refuted. 0 times theorem prover too weak. 145 trivial. 0 not checked.
[2020-11-25 16:08:24,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:08:24,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 16:08:24,468 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:08:24,468 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 16:08:24,468 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=44, Invalid=336, Unknown=0, NotChecked=0, Total=380
[2020-11-25 16:08:24,468 INFO  L87              Difference]: Start difference. First operand 8514 states and 10076 transitions. cyclomatic complexity: 1586 Second operand 20 states.
[2020-11-25 16:08:26,335 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 16:08:26,775 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 16:08:26,793 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 16:08:28,628 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 16:08:28,734 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 16:08:29,841 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:08:29,841 INFO  L93              Difference]: Finished difference Result 11628 states and 14329 transitions.
[2020-11-25 16:08:29,841 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 16:08:29,841 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11628 states and 14329 transitions.
[2020-11-25 16:08:29,871 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 96
[2020-11-25 16:08:29,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11628 states to 11628 states and 14325 transitions.
[2020-11-25 16:08:29,910 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3074
[2020-11-25 16:08:29,912 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3074
[2020-11-25 16:08:29,912 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11628 states and 14325 transitions.
[2020-11-25 16:08:29,920 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:08:29,920 INFO  L728         BuchiCegarLoop]: Abstraction has 11628 states and 14325 transitions.
[2020-11-25 16:08:29,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11628 states and 14325 transitions.
[2020-11-25 16:08:30,001 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11628 to 11194.
[2020-11-25 16:08:30,001 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11194 states.
[2020-11-25 16:08:30,022 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11194 states to 11194 states and 13715 transitions.
[2020-11-25 16:08:30,022 INFO  L751         BuchiCegarLoop]: Abstraction has 11194 states and 13715 transitions.
[2020-11-25 16:08:30,022 INFO  L631         BuchiCegarLoop]: Abstraction has 11194 states and 13715 transitions.
[2020-11-25 16:08:30,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 16:08:30,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11194 states and 13715 transitions.
[2020-11-25 16:08:30,035 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 88
[2020-11-25 16:08:30,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:08:30,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:08:30,036 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:08:30,036 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_EXEToken0 := false;
[L2]                 call_transfer_EXEToken0 := false;
[L2]     CALL        call main();
[L7037]              assume null == 0;
[L7038]  CALL        call this := FreshRefGenerator__success();
[L3028]              havoc newRef;
[L3029]              assume Alloc[newRef] == false;
[L3030]              Alloc[newRef] := true;
[L3031]              assume newRef != null;
[L7038]  RET         call this := FreshRefGenerator__success();
[L7039]              assume now >= 0;
[L7040]              assume DType[this] == EXEToken;
[L7041]              assume msgvalue_MSG == 0;
[L7042]              gas := gas - 53000;
[L7043]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7044]              assume !revert && gas >= 0;
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND FALSE  !(choice == 15)
[L6933]  COND FALSE  !(choice == 14)
[L6940]  COND FALSE  !(choice == 13)
[L6947]  COND FALSE  !(choice == 12)
[L6954]  COND FALSE  !(choice == 11)
[L6960]  COND FALSE  !(choice == 10)
[L6966]  COND FALSE  !(choice == 9)
[L6972]  COND FALSE  !(choice == 8)
[L6979]  COND FALSE  !(choice == 7)
[L6986]  COND FALSE  !(choice == 6)
[L6992]  COND FALSE  !(choice == 5)
[L6998]  COND FALSE  !(choice == 4)
[L7004]  COND FALSE  !(choice == 3)
[L7011]  COND TRUE   choice == 2
[L7012]              gas := gas - 21000;
[L7013]  COND TRUE   gas >= 0
[L7014]              assume releaseTime_s988 >= 0 && releaseTime_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7015]              assume amount_s988 >= 0 && amount_s988 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7016]              assume msgvalue_MSG == 0;
[L7017]  CALL        call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L7047]  RET         call CorralChoice_EXEToken(this);
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND TRUE   choice == 16
[L6920]              gas := gas - 21000;
[L6921]  COND TRUE   gas >= 0
[L6922]              assume amount_s1083 >= 0 && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6923]              assume msgvalue_MSG == 0;
[L6924]  CALL        call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND TRUE   revert
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L7047]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7047]  CALL        call CorralChoice_EXEToken(this);
[L6823]              havoc msgsender_MSG;
[L6824]              havoc msgvalue_MSG;
[L6825]              havoc choice;
[L6826]              havoc __ret_0_owner;
[L6827]              havoc newOwner_s184;
[L6828]              havoc __ret_0_totalSupply;
[L6829]              havoc owner_s312;
[L6830]              havoc __ret_0_balanceOf;
[L6831]              havoc owner_s328;
[L6832]              havoc spender_s328;
[L6833]              havoc __ret_0_allowance;
[L6834]              havoc recipient_s1083;
[L6835]              havoc amount_s1083;
[L6836]              havoc __ret_0_transfer;
[L6837]              havoc spender_s425;
[L6838]              havoc value_s425;
[L6839]              havoc __ret_0_approve;
[L6840]              havoc sender_s1113;
[L6841]              havoc recipient_s1113;
[L6842]              havoc amount_s1113;
[L6843]              havoc __ret_0_transferFrom;
[L6844]              havoc spender_s562;
[L6845]              havoc addedValue_s562;
[L6846]              havoc __ret_0_increaseAllowance;
[L6847]              havoc spender_s612;
[L6848]              havoc subtractedValue_s612;
[L6849]              havoc __ret_0_decreaseAllowance;
[L6850]              havoc name_s778;
[L6851]              havoc symbol_s778;
[L6852]              havoc decimals_s778;
[L6853]              havoc __ret_0_name;
[L6854]              havoc __ret_0_symbol;
[L6855]              havoc __ret_0_decimals;
[L6856]              havoc value_s817;
[L6857]              havoc from_s830;
[L6858]              havoc value_s830;
[L6859]              havoc __ret_0_stopped;
[L6860]              havoc name_s916;
[L6861]              havoc symbol_s916;
[L6862]              havoc totalSupply_s916;
[L6863]              havoc decimals_s916;
[L6864]              havoc account_s942;
[L6865]              havoc amount_s942;
[L6866]              havoc __ret_0_mint;
[L6867]              havoc account_s988;
[L6868]              havoc releaseTime_s988;
[L6869]              havoc amount_s988;
[L6870]              havoc account_s1006;
[L6871]              havoc lockTime_s1006;
[L6872]              havoc lockAmount_s1006;
[L6873]              havoc tmpNow;
[L6874]              havoc gas;
[L6875]              assume gas > 4000000 && gas <= 8000000;
[L6876]              tmpNow := now;
[L6877]              havoc now;
[L6878]              assume now > tmpNow;
[L6879]              assume msgsender_MSG != null;
[L6880]              assume DType[msgsender_MSG] != SafeMath;
[L6881]              assume DType[msgsender_MSG] != Ownable;
[L6882]              assume DType[msgsender_MSG] != IERC20;
[L6883]              assume DType[msgsender_MSG] != ERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6885]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6886]              assume DType[msgsender_MSG] != Stoppable;
[L6887]              assume DType[msgsender_MSG] != EXEToken;
[L6888]              Alloc[msgsender_MSG] := true;
[L6889]  COND FALSE  !(choice == 21)
[L6895]  COND FALSE  !(choice == 20)
[L6901]  COND FALSE  !(choice == 19)
[L6907]  COND FALSE  !(choice == 18)
[L6913]  COND FALSE  !(choice == 17)
[L6919]  COND FALSE  !(choice == 16)
[L6926]  COND TRUE   choice == 15
[L6927]              gas := gas - 21000;
[L6928]  COND TRUE   gas >= 0
[L6929]              assume value_s425 >= 0 && value_s425 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6930]              assume msgvalue_MSG == 0;
[L6931]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L747]               havoc __exception;
[L748]               revert := false;
[L749]   COND TRUE   __exception
[L750]               __tmp__Balance := Balance;
[L751]               __tmp__DType := DType;
[L752]               __tmp__Alloc := Alloc;
[L753]               __tmp__balance_ADDR := balance_ADDR;
[L754]               __tmp__M_Ref_int := M_Ref_int;
[L755]               __tmp__sum__balances0 := sum__balances0;
[L756]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L757]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L758]               __tmp__sum__allowed1 := sum__allowed1;
[L759]               __tmp__sum__lockTimes2 := sum__lockTimes2;
[L760]               __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L761]               __tmp__Length := Length;
[L762]               __tmp__now := now;
[L763]               __tmp___owner_Ownable := _owner_Ownable;
[L764]               __tmp___balances_ERC20 := _balances_ERC20;
[L765]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L766]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L767]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L768]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L769]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L770]               __tmp__stopped_Stoppable := stopped_Stoppable;
[L771]               __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L772]               __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L773]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L3511]              __var_6 := null;
[L3512]  COND TRUE   !(spender_s425 != null)
[L3513]              revert := true;
[L773]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L774]               assume revert || gas < 0;
[L6931]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L7047]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:08:30,040 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:30,040 INFO  L82        PathProgramCache]: Analyzing trace with hash -564475331, now seen corresponding path program 1 times
[2020-11-25 16:08:30,041 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:30,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:30,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:30,162 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:30,162 INFO  L82        PathProgramCache]: Analyzing trace with hash 1996823458, now seen corresponding path program 1 times
[2020-11-25 16:08:30,162 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:30,166 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:30,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:30,177 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:08:30,177 INFO  L82        PathProgramCache]: Analyzing trace with hash 1379107550, now seen corresponding path program 1 times
[2020-11-25 16:08:30,178 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:08:30,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:30,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 547 to 1093
Garbage collection #1: 89 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
[2020-11-25 16:08:30,645 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 230
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8053 to 16103
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 16:08:30,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:08:31,656 WARN  L188               SmtUtils]: Spent 320.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 272
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:08:31,978 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 296
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 16:08:32,302 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 245
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 16:08:32,432 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 347
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 16:08:32,841 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification that was a NOOP. DAG size: 211
[2020-11-25 16:08:33,271 WARN  L188               SmtUtils]: Spent 428.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 260
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 16:08:33,501 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 348
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
[2020-11-25 16:08:33,649 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 283
[2020-11-25 16:08:35,830 WARN  L188               SmtUtils]: Spent 2.18 s on a formula simplification. DAG size of input: 747 DAG size of output: 730
Garbage collection #1: 307 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 307 to 613
Garbage collection #2: 613 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 613 to 1223
Garbage collection #3: 1223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1223 to 2441
Garbage collection #4: 2441 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2441 to 4877
Garbage collection #5: 4877 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4877 to 9749
Garbage collection #6: 9749 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9749 to 19489
Garbage collection #7: 19489 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19489 to 38977
Garbage collection #8: 38977 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 38977 to 77951
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 16:08:36,178 WARN  L188               SmtUtils]: Spent 324.00 ms on a formula simplification. DAG size of input: 256 DAG size of output: 253
[2020-11-25 16:08:36,418 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification that was a NOOP. DAG size: 369
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 16:08:36,570 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 253
[2020-11-25 16:08:37,145 WARN  L188               SmtUtils]: Spent 573.00 ms on a formula simplification. DAG size of input: 371 DAG size of output: 370
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 16:08:37,417 WARN  L188               SmtUtils]: Spent 268.00 ms on a formula simplification that was a NOOP. DAG size: 366
[2020-11-25 16:08:37,433 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:37,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:08:37,464 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:08:37 BasicIcfg
[2020-11-25 16:08:37,464 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:08:37,465 INFO  L168              Benchmark]: Toolchain (without parser) took 54227.25 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.1 GB). Free memory was 929.8 MB in the beginning and 2.3 GB in the end (delta: -1.4 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,465 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,465 INFO  L168              Benchmark]: Boogie Preprocessor took 128.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,465 INFO  L168              Benchmark]: UtopiaSpecLang took 73.00 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,466 INFO  L168              Benchmark]: Boogie Printer took 26.86 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,466 INFO  L168              Benchmark]: RCFGBuilder took 1034.45 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -100.0 MB). Peak memory consumption was 191.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,466 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.31 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 989.4 MB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,466 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1765.91 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.1 MB). Free memory was 989.4 MB in the beginning and 899.2 MB in the end (delta: 90.2 MB). Peak memory consumption was 490.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,467 INFO  L168              Benchmark]: BlockEncodingV2 took 162.27 ms. Allocated memory is still 1.3 GB. Free memory was 899.2 MB in the beginning and 800.3 MB in the end (delta: 99.0 MB). Peak memory consumption was 99.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,467 INFO  L168              Benchmark]: BuchiAutomizer took 50993.83 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.9 GB). Free memory was 800.3 MB in the beginning and 2.3 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-25 16:08:37,470 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6230 locations, 11163 edges
  - StatisticsResult: Encoded RCFG
    6124 locations, 10874 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 128.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 73.00 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.86 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1034.45 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.3 MB). Free memory was 902.9 MB in the beginning and 1.0 GB in the end (delta: -100.0 MB). Peak memory consumption was 191.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.31 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 989.4 MB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1765.91 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.1 MB). Free memory was 989.4 MB in the beginning and 899.2 MB in the end (delta: 90.2 MB). Peak memory consumption was 490.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 162.27 ms. Allocated memory is still 1.3 GB. Free memory was 899.2 MB in the beginning and 800.3 MB in the end (delta: 99.0 MB). Peak memory consumption was 99.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 50993.83 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.9 GB). Free memory was 800.3 MB in the beginning and 2.3 GB in the end (delta: -1.5 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2512 locations, 3420 edges
  - StatisticsResult: BuchiProgram size
    6230 locations, 11163 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.15 modules have a trivial ranking function, the largest among these consists of 38 locations. The remainder module has 11194 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 50.9s and 16 iterations.  TraceHistogramMax:5. Analysis of lassos took 10.8s. Construction of modules took 29.4s. BÃ¼chi inclusion checks took 8.4s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 15 MinimizatonAttempts, 6908 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 11194 states and ocurred in iteration 15.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 62723 SDtfs, 70881 SDslu, 217709 SDs, 0 SdLazy, 393903 SolverSat, 14217 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 29.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(427332518) = (new EXEToken)({from : 427332511, name : 427332530, symbol : 427332525, totalSupply : 427332520, decimals : 0});
[L1769]              havoc __exception;
[L1770]              revert := false;
[L1771]  COND FALSE  !(__exception)
[L1798]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4314]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4314]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3926]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3926]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3927]  COND FALSE  !(revert)
[L3930]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3901]              assume msgsender_MSG != null;
[L3902]              Balance[this] := 0;
[L3903]              _name_ERC20Detailed[this] := 427332508;
[L3904]              _symbol_ERC20Detailed[this] := 427332508;
[L3905]              _decimals_ERC20Detailed[this] := 0;
[L3907]              _name_ERC20Detailed[this] := name_s778;
[L3908]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3909]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3930]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3931]  COND FALSE  !(revert)
[L4318]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4322]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4326]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L4006]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3351]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]              assume msgsender_MSG != null;
[L3337]              Balance[this] := 0;
[L3351]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  COND FALSE  !(revert)
[L3397]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  COND FALSE  !(revert)
[L3401]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3373]              assume msgsender_MSG != null;
[L3374]              Balance[this] := 0;
[L3375]              _balances_ERC20[this] := zeroRefintArr();
[L3376]              sum__balances0[this] := 0;
[L3377]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3378]              sum__allowed1[this] := 0;
[L3379]              _totalSupply_ERC20[this] := 0;
[L3401]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3402]  COND FALSE  !(revert)
[L4010]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4014]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]              assume msgsender_MSG != null;
[L3984]              Balance[this] := 0;
[L4014]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4015]  COND FALSE  !(revert)
[L4326]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4327]  COND FALSE  !(revert)
[L4330]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4330]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3220]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3203]              assume msgsender_MSG != null;
[L3204]              Balance[this] := 0;
[L3205]              _owner_Ownable[this] := null;
[L3207]              _owner_Ownable[this] := msgsender_MSG;
[L3220]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  COND FALSE  !(revert)
[L4156]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  COND FALSE  !(revert)
[L4160]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4136]              assume msgsender_MSG != null;
[L4137]              Balance[this] := 0;
[L4138]              stopped_Stoppable[this] := false;
[L4160]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4161]  COND FALSE  !(revert)
[L4334]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4250]              assume msgsender_MSG != null;
[L4251]              Balance[this] := 0;
[L4252]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4253]              sum__lockTimes2[this] := 0;
[L4254]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4255]              sum__lockAmounts3[this] := 0;
[L4257]  COND TRUE   DType[this] == EXEToken
[L4258]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3234]              __ret_0_ := _owner_Ownable[this];
[L4258]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]  COND FALSE  !(revert)
[L4265]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4266]  COND TRUE   DType[this] == EXEToken
[L4267]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3739]              __var_15 := null;
[L3740]  COND FALSE  !(!(account_s654 != null))
[L3744]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3744]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3745]  COND FALSE  !(revert)
[L3748]              _totalSupply_ERC20[this] := __var_16;
[L3749]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3161]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3162]  COND FALSE  !(!(c_s106 >= a_s106))
[L3166]              __ret_0_ := c_s106;
[L3749]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3750]  COND FALSE  !(revert)
[L3753]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3754]              _balances_ERC20[this][account_s654] := __var_17;
[L3755]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3756]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4267]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4268]  COND FALSE  !(revert)
[L4338]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4339]  COND FALSE  !(revert)
[L1798]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1799]              assume !revert && gas >= 0;
[L7043]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
EXEToken(427332518).setLock~address~uint256~uint256.gas(3979002)({from : 427332511, account : 427332516, releaseTime : 0, amount : 1});
[L1905]              havoc __exception;
[L1906]              revert := false;
[L1907]  COND FALSE  !(__exception)
[L1934]  CALL        call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L4418]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6033]  COND TRUE   DType[this] == EXEToken
[L6034]  CALL        call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3246]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6034]  RET         call __var_1 := _isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6035]  COND FALSE  !(revert)
[L6051]  COND FALSE  !(!__var_1)
[L4418]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4419]  COND FALSE  !(revert)
[L4422]              sum__lockTimes2[this] := sum__lockTimes2[this] - _lockTimes_EXEToken[this][account_s988];
[L4423]              _lockTimes_EXEToken[this][account_s988] := releaseTime_s988;
[L4424]              sum__lockTimes2[this] := sum__lockTimes2[this] + _lockTimes_EXEToken[this][account_s988];
[L4425]              sum__lockAmounts3[this] := sum__lockAmounts3[this] - _lockAmounts_EXEToken[this][account_s988];
[L4426]              _lockAmounts_EXEToken[this][account_s988] := amount_s988;
[L4427]              sum__lockAmounts3[this] := sum__lockAmounts3[this] + _lockAmounts_EXEToken[this][account_s988];
[L4428]              assert { :EventEmitted "LockChanged_EXEToken" } true;
[L1934]  RET         call setLock~address~uint256~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
[L1935]              assume !revert && gas >= 0;
[L7017]  RET         call setLock~address~uint256~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, account_s988, releaseTime_s988, amount_s988);
EXEToken(427332518).transfer~address~uint256.gas(3979003)({from : 427332516, recipient : 427332516, amount : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s1083 && amount_s1083 <= _balances_ERC20[this][msgsender_MSG]) && amount_s1083 >= 0) && amount_s1083 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1083] >= 0) && _balances_ERC20[this][recipient_s1083] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_EXEToken0 := true;
[L2]                 call_transfer_EXEToken0 := false;
[L2]                 revert := revert_hold;
[L2033]              havoc __exception;
[L2034]              revert := false;
[L2035]  COND TRUE   __exception
[L2036]              __tmp__Balance := Balance;
[L2037]              __tmp__DType := DType;
[L2038]              __tmp__Alloc := Alloc;
[L2039]              __tmp__balance_ADDR := balance_ADDR;
[L2040]              __tmp__M_Ref_int := M_Ref_int;
[L2041]              __tmp__sum__balances0 := sum__balances0;
[L2042]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2043]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2044]              __tmp__sum__allowed1 := sum__allowed1;
[L2045]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2046]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2047]              __tmp__Length := Length;
[L2048]              __tmp__now := now;
[L2049]              __tmp___owner_Ownable := _owner_Ownable;
[L2050]              __tmp___balances_ERC20 := _balances_ERC20;
[L2051]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2052]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2053]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2054]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2055]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2056]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2057]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2058]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2059]  CALL        call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L4508]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6059]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4508]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4509]  COND FALSE  !(revert)
[L4512]  CALL        call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4450]  COND TRUE   __tmp__DType[this] == EXEToken
[L4451]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4451]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4452]  COND FALSE  !(revert)
[L4458]  COND TRUE   __tmp__DType[this] == EXEToken
[L4459]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3421]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4459]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4460]  COND FALSE  !(revert)
[L4466]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3125]  COND TRUE   !(b_s82 <= a_s82)
[L3126]              revert := true;
[L4466]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4467]  COND TRUE   revert
[L4512]  RET         call __var_28 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1083);
[L4513]  COND TRUE   revert
[L2059]  RET         call __ret_0_ := transfer~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);
[L2060]              assume revert || gas < 0;
[L6924]  RET         call __ret_0_transfer := transfer~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, recipient_s1083, amount_s1083);

Loop:
ERC20(427332518).approve~address~uint256.gas(3979001)({from : 427332514, spender : 0, value : 0});
[L747]              havoc __exception;
[L748]              revert := false;
[L749]   COND TRUE  __exception
[L750]              __tmp__Balance := Balance;
[L751]              __tmp__DType := DType;
[L752]              __tmp__Alloc := Alloc;
[L753]              __tmp__balance_ADDR := balance_ADDR;
[L754]              __tmp__M_Ref_int := M_Ref_int;
[L755]              __tmp__sum__balances0 := sum__balances0;
[L756]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L757]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L758]              __tmp__sum__allowed1 := sum__allowed1;
[L759]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L760]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L761]              __tmp__Length := Length;
[L762]              __tmp__now := now;
[L763]              __tmp___owner_Ownable := _owner_Ownable;
[L764]              __tmp___balances_ERC20 := _balances_ERC20;
[L765]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L766]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L767]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L768]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L769]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L770]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L771]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L772]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L773]   CALL       call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L3511]             __var_6 := null;
[L3512]  COND TRUE  !(spender_s425 != null)
[L3513]             revert := true;
[L773]   RET        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);
[L774]              assume revert || gas < 0;
[L6931]  RET        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s425, value_s425);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
