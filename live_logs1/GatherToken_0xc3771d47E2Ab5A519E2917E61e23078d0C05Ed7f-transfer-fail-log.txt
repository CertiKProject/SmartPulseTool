This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:52:26,534 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:52:26,535 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:52:26,548 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:52:26,548 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:52:26,549 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:52:26,550 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:52:26,552 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:52:26,553 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:52:26,554 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:52:26,554 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:52:26,555 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:52:26,556 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:52:26,557 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:52:26,558 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:52:26,558 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:52:26,559 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:52:26,560 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:52:26,561 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:52:26,563 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:52:26,564 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:52:26,565 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:52:26,566 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:52:26,566 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:52:26,567 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:52:26,567 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:52:26,567 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:52:26,568 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:52:26,568 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:52:26,568 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:52:26,569 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:52:26,570 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:52:26,570 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:52:26,571 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:52:26,571 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:52:26,572 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:52:26,572 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:52:26,572 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:52:26,573 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:52:26,573 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:52:26,574 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:52:26,574 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:52:26,582 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:52:26,583 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:52:26,583 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:52:26,584 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:52:26,584 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:52:26,584 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:52:26,585 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:52:26,585 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:52:26,586 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:52:26,586 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:52:26,586 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:52:26,586 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:52:26,612 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:52:26,627 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:52:26,629 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:52:26,630 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:52:26,631 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:52:26,631 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl
[2020-11-25 16:52:26,631 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl'
[2020-11-25 16:52:26,742 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:52:26,743 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:52:26,744 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:52:26,744 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:52:26,744 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:52:26,761 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,762 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,808 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,809 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,839 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,851 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,862 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,874 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:52:26,875 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:52:26,875 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:52:26,877 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:52:26,881 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/1) ...
[2020-11-25 16:52:26,901 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(GatherToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transfer)))
[2020-11-25 16:52:26,906 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(GatherToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transfer)))
[2020-11-25 16:52:26,914 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(GatherToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transfer)))
[2020-11-25 16:52:26,923 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s867 && ( _value_s867>balances_BasicToken[this][msg.sender] || ( balances_BasicToken[this][_to_s867] + _value_s867 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s867>=0 ) && _value_s867<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s867]>=0 ) && balances_BasicToken[this][_to_s867]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>],IdentifierExpression[_to_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[_to_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],IdentifierExpression[_value_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[_to_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[_to_s867,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GatherToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:52:26,928 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(GatherToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(GatherToken.transfer)))
[2020-11-25 16:52:26,928 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_GatherToken0) ==> ( <>AP(fail_transfer_GatherToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:52:26,941 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:52:26 PropertyContainer
[2020-11-25 16:52:26,941 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:52:26,942 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:52:26,942 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:52:26,942 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:52:26,943 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/2) ...
[2020-11-25 16:52:26,943 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:52:26,943 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:52:26,964 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:52:26" (2/2) ...
[2020-11-25 16:52:26,964 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:52:26,965 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:52:26,965 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:52:26,965 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:52:26,966 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/2) ...
[2020-11-25 16:52:27,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:52:27,020 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:52:27,020 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:52:27,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:52:27,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:52:27,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:52:27,021 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:52:27,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:52:27,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:52:27,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:52:27,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:52:27,023 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:52:27,023 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:52:27,023 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:52:27,023 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:52:27,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 16:52:27,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 16:52:27,024 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 16:52:27,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 16:52:27,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:52:27,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 16:52:27,025 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 16:52:27,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 16:52:27,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:52:27,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 16:52:27,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 16:52:27,026 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:52:27,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 16:52:27,026 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 16:52:27,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 16:52:27,027 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 16:52:27,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 16:52:27,027 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:52:27,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 16:52:27,027 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:52:27,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 16:52:27,028 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:52:27,028 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 16:52:27,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 16:52:27,028 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:52:27,028 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:52:27,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken
[2020-11-25 16:52:27,029 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 16:52:27,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 16:52:27,029 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:52:27,029 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken
[2020-11-25 16:52:27,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken
[2020-11-25 16:52:27,029 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 16:52:27,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 16:52:27,030 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 16:52:27,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 16:52:27,030 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken
[2020-11-25 16:52:27,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken
[2020-11-25 16:52:27,031 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:52:27,031 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken
[2020-11-25 16:52:27,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken
[2020-11-25 16:52:27,031 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken
[2020-11-25 16:52:27,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken
[2020-11-25 16:52:27,031 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken
[2020-11-25 16:52:27,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken
[2020-11-25 16:52:27,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:52:27,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken
[2020-11-25 16:52:27,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:52:27,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken
[2020-11-25 16:52:27,032 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken
[2020-11-25 16:52:27,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken
[2020-11-25 16:52:27,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken
[2020-11-25 16:52:27,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken
[2020-11-25 16:52:27,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:52:27,033 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__success
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:52:27,034 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 16:52:27,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GatherToken
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:52:27,036 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:52:27,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:52:27,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 16:52:27,039 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 16:52:27,040 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 16:52:27,040 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:52:27,040 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:52:27,040 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:52:27,041 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:52:27,041 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:52:27,041 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 16:52:27,041 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 16:52:27,041 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:52:27,042 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,042 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:52:27,042 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,042 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:52:27,042 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:52:27,043 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:52:27,043 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,043 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:52:27,043 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,044 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:52:27,044 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 16:52:27,044 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 16:52:27,044 INFO  L130     BoogieDeclarations]: Found specification of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,045 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:52:27,046 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:52:27,046 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 16:52:27,046 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 16:52:27,046 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 16:52:27,046 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__success
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure GatherToken_GatherToken__fail
[2020-11-25 16:52:27,047 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:52:27,048 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__success
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GatherToken__fail
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__success
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GatherToken__fail
[2020-11-25 16:52:27,049 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__success
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GatherToken__fail
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__success
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPaused_GatherToken__fail
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:52:27,050 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:52:27,051 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:52:27,051 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 16:52:27,051 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 16:52:27,051 INFO  L130     BoogieDeclarations]: Found specification of procedure tranferable_pre__fail
[2020-11-25 16:52:27,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 16:52:27,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 16:52:27,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 16:52:27,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 16:52:27,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkMintPermission~address_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure setMinter~address~uint256_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintInternal~address~uint256_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAllowed~address_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 16:52:27,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxMintLimit_MintableToken__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken_NoBaseCtor__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure GatherToken_GatherToken__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpauseTransfer_GatherToken__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__fail
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_GatherToken__success
[2020-11-25 16:52:27,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__fail
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GatherToken__success
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__fail
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GatherToken__success
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__fail
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GatherToken__success
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__fail
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GatherToken__success
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__fail
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GatherToken__success
[2020-11-25 16:52:27,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPaused_GatherToken__success
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 16:52:27,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__fail
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure tranferable_pre__success
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:52:27,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GatherToken
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:52:27,062 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:52:27,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:52:27,766 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:52:27,766 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:52:28,009 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:52:28,009 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:52:28,012 INFO  L202        PluginConnector]: Adding new model GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:52:28 BoogieIcfgContainer
[2020-11-25 16:52:28,012 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:52:26" (2/2) ...
[2020-11-25 16:52:28,012 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:52:28,012 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@42069d04 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:52:28, skipping insertion in model container
[2020-11-25 16:52:28,012 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:52:28,012 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:52:28,012 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:52:28,014 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:52:28,014 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/3) ...
[2020-11-25 16:52:28,014 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@435556c1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:52:28, skipping insertion in model container
[2020-11-25 16:52:28,014 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:52:26" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:52:28,051 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:52:28 NWAContainer
[2020-11-25 16:52:28,052 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:52:28,052 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:52:28,052 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:52:28,053 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:52:28,053 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:52:28" (3/4) ...
[2020-11-25 16:52:28,054 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@56cdfc12 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:52:28, skipping insertion in model container
[2020-11-25 16:52:28,054 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:52:28" (4/4) ...
[2020-11-25 16:52:28,057 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:52:28,062 INFO  L110   BuchiProductObserver]: Initial RCFG 2404 locations, 3210 edges
[2020-11-25 16:52:28,062 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:52:28,074 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:52:29,863 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:52:29,871 INFO  L110   BuchiProductObserver]: BuchiProgram size 5922 locations, 10508 edges
[2020-11-25 16:52:29,871 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:52:29 BoogieIcfgContainer
[2020-11-25 16:52:29,871 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:52:29,871 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:52:29,871 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:52:29,872 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:52:29,873 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:52:29" (1/1) ...
[2020-11-25 16:52:29,983 INFO  L313           BlockEncoder]: Initial Icfg 5922 locations, 10508 edges
[2020-11-25 16:52:29,983 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:52:29,985 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:52:29,985 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:52:29,986 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:52:29,999 INFO  L70    emoveInfeasibleEdges]: Removed 105 edges and 21 locations because of local infeasibility
[2020-11-25 16:52:30,009 INFO  L70        RemoveSinkStates]: Removed 174 edges and 90 locations by removing sink states
[2020-11-25 16:52:30,021 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:52:30,024 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:52:30,028 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:52:30,029 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:52:30,031 INFO  L313           BlockEncoder]: Encoded RCFG 5777 locations, 10179 edges
[2020-11-25 16:52:30,032 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:52:30 BasicIcfg
[2020-11-25 16:52:30,032 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:52:30,032 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:52:30,032 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:52:30,034 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:52:30,034 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,034 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:52:26" (1/6) ...
[2020-11-25 16:52:30,035 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f01629 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:52:30, skipping insertion in model container
[2020-11-25 16:52:30,036 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,036 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:52:26" (2/6) ...
[2020-11-25 16:52:30,036 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f01629 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:52:30, skipping insertion in model container
[2020-11-25 16:52:30,036 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,036 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:52:28" (3/6) ...
[2020-11-25 16:52:30,036 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f01629 and model type GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:52:30, skipping insertion in model container
[2020-11-25 16:52:30,036 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,036 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:52:28" (4/6) ...
[2020-11-25 16:52:30,036 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f01629 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:52:30, skipping insertion in model container
[2020-11-25 16:52:30,036 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,037 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:52:29" (5/6) ...
[2020-11-25 16:52:30,037 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f01629 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:52:30, skipping insertion in model container
[2020-11-25 16:52:30,037 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:52:30,037 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:52:30" (6/6) ...
[2020-11-25 16:52:30,038 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GatherToken_0xc3771d47E2Ab5A519E2917E61e23078d0C05Ed7f_transfer-fail.bpl_BEv2
[2020-11-25 16:52:30,067 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:52:30,068 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:52:30,068 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:52:30,068 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:52:30,068 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:52:30,068 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:52:30,068 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:52:30,068 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:52:30,068 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:52:30,112 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5777 states.
[2020-11-25 16:52:30,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:30,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:30,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:30,180 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:30,181 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:30,181 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:52:30,181 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5777 states.
[2020-11-25 16:52:30,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:30,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:30,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:30,210 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:30,210 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND TRUE   revert
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND TRUE   revert
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:30,223 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:30,223 INFO  L82        PathProgramCache]: Analyzing trace with hash -996263830, now seen corresponding path program 1 times
[2020-11-25 16:52:30,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:30,247 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:30,283 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:52:30,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:30,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:52:30,618 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:30,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:52:30,627 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:52:30,628 INFO  L87              Difference]: Start difference. First operand 5777 states. Second operand 4 states.
[2020-11-25 16:52:31,118 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:31,118 INFO  L93              Difference]: Finished difference Result 3341 states and 3749 transitions.
[2020-11-25 16:52:31,118 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:52:31,120 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3341 states and 3749 transitions.
[2020-11-25 16:52:31,137 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:31,162 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3341 states to 3337 states and 3741 transitions.
[2020-11-25 16:52:31,163 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:52:31,166 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 811
[2020-11-25 16:52:31,167 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3337 states and 3741 transitions.
[2020-11-25 16:52:31,177 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:31,177 INFO  L728         BuchiCegarLoop]: Abstraction has 3337 states and 3741 transitions.
[2020-11-25 16:52:31,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3337 states and 3741 transitions.
[2020-11-25 16:52:31,248 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3337 to 3337.
[2020-11-25 16:52:31,248 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3337 states.
[2020-11-25 16:52:31,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3337 states to 3337 states and 3741 transitions.
[2020-11-25 16:52:31,254 INFO  L751         BuchiCegarLoop]: Abstraction has 3337 states and 3741 transitions.
[2020-11-25 16:52:31,254 INFO  L631         BuchiCegarLoop]: Abstraction has 3337 states and 3741 transitions.
[2020-11-25 16:52:31,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:52:31,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3337 states and 3741 transitions.
[2020-11-25 16:52:31,261 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:31,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:31,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:31,263 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:31,263 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND TRUE   revert
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND TRUE   revert
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND TRUE   revert
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:31,266 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:31,267 INFO  L82        PathProgramCache]: Analyzing trace with hash 1807891407, now seen corresponding path program 1 times
[2020-11-25 16:52:31,267 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:31,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:31,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:52:31,302 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:31,302 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:52:31,303 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:31,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:52:31,303 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:52:31,303 INFO  L87              Difference]: Start difference. First operand 3337 states and 3741 transitions. cyclomatic complexity: 406 Second operand 4 states.
[2020-11-25 16:52:31,996 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:31,996 INFO  L93              Difference]: Finished difference Result 4391 states and 4905 transitions.
[2020-11-25 16:52:31,996 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:52:31,996 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4391 states and 4905 transitions.
[2020-11-25 16:52:32,011 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:32,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4391 states to 4219 states and 4711 transitions.
[2020-11-25 16:52:32,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 16:52:32,025 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 973
[2020-11-25 16:52:32,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4219 states and 4711 transitions.
[2020-11-25 16:52:32,030 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:32,030 INFO  L728         BuchiCegarLoop]: Abstraction has 4219 states and 4711 transitions.
[2020-11-25 16:52:32,034 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4219 states and 4711 transitions.
[2020-11-25 16:52:32,063 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4219 to 3553.
[2020-11-25 16:52:32,063 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3553 states.
[2020-11-25 16:52:32,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3553 states to 3553 states and 3857 transitions.
[2020-11-25 16:52:32,067 INFO  L751         BuchiCegarLoop]: Abstraction has 3553 states and 3857 transitions.
[2020-11-25 16:52:32,067 INFO  L631         BuchiCegarLoop]: Abstraction has 3553 states and 3857 transitions.
[2020-11-25 16:52:32,067 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:52:32,067 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3553 states and 3857 transitions.
[2020-11-25 16:52:32,072 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:32,072 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:32,072 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:32,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:32,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:32,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:32,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -1803485839, now seen corresponding path program 1 times
[2020-11-25 16:52:32,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:32,101 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:32,272 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 16:52:32,273 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:32,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:52:32,273 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:32,273 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:52:32,273 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:52:32,274 INFO  L87              Difference]: Start difference. First operand 3553 states and 3857 transitions. cyclomatic complexity: 306 Second operand 11 states.
[2020-11-25 16:52:33,720 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:33,720 INFO  L93              Difference]: Finished difference Result 3588 states and 3908 transitions.
[2020-11-25 16:52:33,720 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 16:52:33,720 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3588 states and 3908 transitions.
[2020-11-25 16:52:33,728 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 16:52:33,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3588 states to 3588 states and 3908 transitions.
[2020-11-25 16:52:33,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 16:52:33,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 16:52:33,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3588 states and 3908 transitions.
[2020-11-25 16:52:33,741 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:33,741 INFO  L728         BuchiCegarLoop]: Abstraction has 3588 states and 3908 transitions.
[2020-11-25 16:52:33,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3588 states and 3908 transitions.
[2020-11-25 16:52:33,765 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3588 to 3404.
[2020-11-25 16:52:33,765 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3404 states.
[2020-11-25 16:52:33,768 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3404 states to 3404 states and 3664 transitions.
[2020-11-25 16:52:33,768 INFO  L751         BuchiCegarLoop]: Abstraction has 3404 states and 3664 transitions.
[2020-11-25 16:52:33,768 INFO  L631         BuchiCegarLoop]: Abstraction has 3404 states and 3664 transitions.
[2020-11-25 16:52:33,768 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:52:33,768 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3404 states and 3664 transitions.
[2020-11-25 16:52:33,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:33,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:33,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:33,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:33,775 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND TRUE   __exception
[L1624]              __tmp__Balance := Balance;
[L1625]              __tmp__DType := DType;
[L1626]              __tmp__Alloc := Alloc;
[L1627]              __tmp__balance_ADDR := balance_ADDR;
[L1628]              __tmp__M_Ref_int := M_Ref_int;
[L1629]              __tmp__sum_balances0 := sum_balances0;
[L1630]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1631]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1632]              __tmp__sum_allowed1 := sum_allowed1;
[L1633]              __tmp__sum_mintPermissions2 := sum_mintPermissions2;
[L1634]              __tmp__Length := Length;
[L1635]              __tmp__now := now;
[L1636]              __tmp__owner_Ownable := owner_Ownable;
[L1637]              __tmp__balances_BasicToken := balances_BasicToken;
[L1638]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1639]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1640]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1641]              __tmp__mintPermissions_MintableToken := mintPermissions_MintableToken;
[L1642]              __tmp__maxMintLimit_MintableToken := maxMintLimit_MintableToken;
[L1643]              __tmp__name_GatherToken := name_GatherToken;
[L1644]              __tmp__symbol_GatherToken := symbol_GatherToken;
[L1645]              __tmp__decimals_GatherToken := decimals_GatherToken;
[L1646]              __tmp__transferPaused_GatherToken := transferPaused_GatherToken;
[L1647]  CALL        call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3964]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3964]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3965]  COND FALSE  !(revert)
[L3968]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3968]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3969]  COND FALSE  !(revert)
[L3972]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3972]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3973]  COND FALSE  !(revert)
[L3976]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3376]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3376]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  COND FALSE  !(revert)
[L3380]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3380]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3384]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3384]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  COND FALSE  !(revert)
[L3388]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3357]              assume msgsender_MSG != null;
[L3358]              __tmp__Balance[this] := 0;
[L3359]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3360]              __tmp__sum_allowed1[this] := 0;
[L3388]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3389]  COND FALSE  !(revert)
[L3976]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3977]  COND FALSE  !(revert)
[L3980]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3090]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__owner_Ownable[this] := null;
[L3075]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3090]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  COND FALSE  !(revert)
[L3980]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]  COND FALSE  !(revert)
[L3984]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3634]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3634]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3638]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3642]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3376]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3376]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]  COND FALSE  !(revert)
[L3380]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3197]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3198]  COND FALSE  !(revert)
[L3201]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3182]              assume msgsender_MSG != null;
[L3183]              __tmp__Balance[this] := 0;
[L3201]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3202]  COND FALSE  !(revert)
[L3380]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3381]  COND FALSE  !(revert)
[L3384]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3243]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3165]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3150]              assume msgsender_MSG != null;
[L3151]              __tmp__Balance[this] := 0;
[L3165]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3166]  COND FALSE  !(revert)
[L3243]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume msgsender_MSG != null;
[L3223]              __tmp__Balance[this] := 0;
[L3224]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L3225]              __tmp__sum_balances0[this] := 0;
[L3226]              __tmp__totalSupply__BasicToken[this] := 0;
[L3247]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3384]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3385]  COND FALSE  !(revert)
[L3388]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3357]              assume msgsender_MSG != null;
[L3358]              __tmp__Balance[this] := 0;
[L3359]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L3360]              __tmp__sum_allowed1[this] := 0;
[L3388]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3389]  COND FALSE  !(revert)
[L3646]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3090]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3071]              assume msgsender_MSG != null;
[L3072]              __tmp__Balance[this] := 0;
[L3073]              __tmp__owner_Ownable[this] := null;
[L3075]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3090]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3091]  COND FALSE  !(revert)
[L3650]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3611]              assume msgsender_MSG != null;
[L3612]              __tmp__Balance[this] := 0;
[L3613]              __tmp__mintingFinished_MintableToken[this] := false;
[L3614]              __tmp__mintPermissions_MintableToken[this] := zeroRefintArr();
[L3615]              __tmp__sum_mintPermissions2[this] := 0;
[L3616]              __tmp__maxMintLimit_MintableToken[this] := 0;
[L3654]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3655]  COND FALSE  !(revert)
[L3984]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3985]  COND FALSE  !(revert)
[L3988]  CALL        call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3935]              assume msgsender_MSG != null;
[L3936]              __tmp__Balance[this] := 0;
[L3937]              __tmp__name_GatherToken[this] := 1979683959;
[L3938]              __tmp__symbol_GatherToken[this] := -286833360;
[L3939]              __tmp__decimals_GatherToken[this] := 18;
[L3940]              __tmp__transferPaused_GatherToken[this] := true;
[L3942]              __var_16 := __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              __tmp__maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, __tmp__decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3988]  RET         call GatherToken_GatherToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3989]  COND FALSE  !(revert)
[L1647]  RET         call GatherToken_GatherToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1648]              assume revert || gas < 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:33,780 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:33,780 INFO  L82        PathProgramCache]: Analyzing trace with hash -655672453, now seen corresponding path program 1 times
[2020-11-25 16:52:33,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:33,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:33,908 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 16:52:33,908 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:33,908 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:52:33,909 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:33,909 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:52:33,909 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:52:33,909 INFO  L87              Difference]: Start difference. First operand 3404 states and 3664 transitions. cyclomatic complexity: 263 Second operand 4 states.
[2020-11-25 16:52:34,170 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:34,170 INFO  L93              Difference]: Finished difference Result 4206 states and 4683 transitions.
[2020-11-25 16:52:34,171 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:52:34,171 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4206 states and 4683 transitions.
[2020-11-25 16:52:34,180 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:52:34,191 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4206 states to 4024 states and 4491 transitions.
[2020-11-25 16:52:34,191 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 16:52:34,192 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 16:52:34,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4024 states and 4491 transitions.
[2020-11-25 16:52:34,196 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:34,196 INFO  L728         BuchiCegarLoop]: Abstraction has 4024 states and 4491 transitions.
[2020-11-25 16:52:34,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4024 states and 4491 transitions.
[2020-11-25 16:52:34,219 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4024 to 3222.
[2020-11-25 16:52:34,219 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3222 states.
[2020-11-25 16:52:34,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3222 states to 3222 states and 3471 transitions.
[2020-11-25 16:52:34,222 INFO  L751         BuchiCegarLoop]: Abstraction has 3222 states and 3471 transitions.
[2020-11-25 16:52:34,222 INFO  L631         BuchiCegarLoop]: Abstraction has 3222 states and 3471 transitions.
[2020-11-25 16:52:34,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:52:34,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3222 states and 3471 transitions.
[2020-11-25 16:52:34,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:52:34,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:34,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:34,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:34,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND FALSE  !(choice == 2)
[L6678]  COND TRUE   choice == 1
[L6679]              gas := gas - 21000;
[L6680]  COND TRUE   gas >= 0
[L6681]              assume msgvalue_MSG == 0;
[L6682]  CALL        call pauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1747]              havoc __exception;
[L1748]              revert := false;
[L1749]  COND FALSE  !(__exception)
[L1776]  CALL        call pauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4056]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4056]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4057]  COND FALSE  !(revert)
[L4060]              transferPaused_GatherToken[this] := true;
[L1776]  RET         call pauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume !revert && gas >= 0;
[L6682]  RET         call pauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:34,233 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:34,233 INFO  L82        PathProgramCache]: Analyzing trace with hash -1383430100, now seen corresponding path program 1 times
[2020-11-25 16:52:34,233 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:34,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:34,427 INFO  L134       CoverageAnalysis]: Checked inductivity of 946 backedges. 64 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 16:52:34,427 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:34,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:52:34,427 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:34,427 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:52:34,428 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:52:34,428 INFO  L87              Difference]: Start difference. First operand 3222 states and 3471 transitions. cyclomatic complexity: 252 Second operand 11 states.
[2020-11-25 16:52:35,612 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:35,612 INFO  L93              Difference]: Finished difference Result 3724 states and 4113 transitions.
[2020-11-25 16:52:35,613 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 16:52:35,613 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3724 states and 4113 transitions.
[2020-11-25 16:52:35,619 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:35,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3724 states to 3721 states and 4109 transitions.
[2020-11-25 16:52:35,628 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 933
[2020-11-25 16:52:35,629 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 933
[2020-11-25 16:52:35,629 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3721 states and 4109 transitions.
[2020-11-25 16:52:35,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:35,632 INFO  L728         BuchiCegarLoop]: Abstraction has 3721 states and 4109 transitions.
[2020-11-25 16:52:35,635 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3721 states and 4109 transitions.
[2020-11-25 16:52:35,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3721 to 3716.
[2020-11-25 16:52:35,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3716 states.
[2020-11-25 16:52:35,655 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3716 states to 3716 states and 4104 transitions.
[2020-11-25 16:52:35,655 INFO  L751         BuchiCegarLoop]: Abstraction has 3716 states and 4104 transitions.
[2020-11-25 16:52:35,655 INFO  L631         BuchiCegarLoop]: Abstraction has 3716 states and 4104 transitions.
[2020-11-25 16:52:35,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:52:35,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3716 states and 4104 transitions.
[2020-11-25 16:52:35,658 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:35,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:35,658 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:35,660 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:35,660 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:35,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:35,665 INFO  L82        PathProgramCache]: Analyzing trace with hash -764793700, now seen corresponding path program 1 times
[2020-11-25 16:52:35,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:35,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:35,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 946 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 16:52:35,998 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:35,998 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 16:52:35,998 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:35,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 16:52:35,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 16:52:35,998 INFO  L87              Difference]: Start difference. First operand 3716 states and 4104 transitions. cyclomatic complexity: 391 Second operand 17 states.
[2020-11-25 16:52:38,087 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:38,087 INFO  L93              Difference]: Finished difference Result 3817 states and 4226 transitions.
[2020-11-25 16:52:38,087 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:52:38,087 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3817 states and 4226 transitions.
[2020-11-25 16:52:38,094 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:38,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3817 states to 3817 states and 4226 transitions.
[2020-11-25 16:52:38,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 949
[2020-11-25 16:52:38,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 949
[2020-11-25 16:52:38,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3817 states and 4226 transitions.
[2020-11-25 16:52:38,106 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:38,106 INFO  L728         BuchiCegarLoop]: Abstraction has 3817 states and 4226 transitions.
[2020-11-25 16:52:38,109 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3817 states and 4226 transitions.
[2020-11-25 16:52:38,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3817 to 3772.
[2020-11-25 16:52:38,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3772 states.
[2020-11-25 16:52:38,133 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3772 states to 3772 states and 4178 transitions.
[2020-11-25 16:52:38,133 INFO  L751         BuchiCegarLoop]: Abstraction has 3772 states and 4178 transitions.
[2020-11-25 16:52:38,133 INFO  L631         BuchiCegarLoop]: Abstraction has 3772 states and 4178 transitions.
[2020-11-25 16:52:38,133 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:52:38,133 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3772 states and 4178 transitions.
[2020-11-25 16:52:38,137 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:38,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:38,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:38,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:38,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND TRUE   choice == 9
[L6630]              gas := gas - 21000;
[L6631]  COND TRUE   gas >= 0
[L6632]              assume _amount_s669 >= 0 && _amount_s669 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]              assume msgvalue_MSG == 0;
[L6634]  CALL        call __ret_0_mint := mint~address~uint256_MintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L1277]              havoc __exception;
[L1278]              revert := false;
[L1279]  COND FALSE  !(__exception)
[L1306]  CALL        call __ret_0_ := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3769]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5673]  CALL        call __var_11 := checkMintPermission~address_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3700]  COND TRUE   _minter_s628 == owner_Ownable[this]
[L3701]              __ret_0_ := true;
[L5673]  RET         call __var_11 := checkMintPermission~address_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5674]  COND FALSE  !(revert)
[L5677]  COND FALSE  !(!__var_11)
[L3769]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5651]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3773]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L3777]  COND FALSE  !(DType[this] == GatherToken)
[L3782]  COND TRUE   DType[this] == MintableToken
[L3783]  CALL        call __var_12 := mintInternal~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3833]  COND FALSE  !(msgsender_MSG != owner_Ownable[this])
[L3842]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s737);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3842]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s737);
[L3843]  COND FALSE  !(revert)
[L3846]              totalSupply__BasicToken[this] := __var_14;
[L3847]  COND FALSE  !(!(totalSupply__BasicToken[this] <= maxMintLimit_MintableToken[this]))
[L3851]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s737], _amount_s737);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3851]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s737], _amount_s737);
[L3852]  COND FALSE  !(revert)
[L3855]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s737];
[L3856]              balances_BasicToken[this][_to_s737] := __var_15;
[L3857]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s737];
[L3858]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3859]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3860]              __ret_0_ := true;
[L3783]  RET         call __var_12 := mintInternal~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3784]  COND FALSE  !(revert)
[L3790]              __ret_0_ := __var_12;
[L1306]  RET         call __ret_0_ := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L1307]              assume !revert && gas >= 0;
[L6634]  RET         call __ret_0_mint := mint~address~uint256_MintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:38,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:38,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 2124631703, now seen corresponding path program 1 times
[2020-11-25 16:52:38,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:38,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:38,373 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1086 trivial. 0 not checked.
[2020-11-25 16:52:38,374 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:52:38,374 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:52:38,374 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:38,374 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:52:38,374 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:52:38,374 INFO  L87              Difference]: Start difference. First operand 3772 states and 4178 transitions. cyclomatic complexity: 411 Second operand 6 states.
[2020-11-25 16:52:38,413 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:38,413 INFO  L93              Difference]: Finished difference Result 3798 states and 4202 transitions.
[2020-11-25 16:52:38,413 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 16:52:38,413 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3798 states and 4202 transitions.
[2020-11-25 16:52:38,419 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:38,426 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3798 states to 3762 states and 4164 transitions.
[2020-11-25 16:52:38,426 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 937
[2020-11-25 16:52:38,427 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 937
[2020-11-25 16:52:38,427 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3762 states and 4164 transitions.
[2020-11-25 16:52:38,429 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:38,430 INFO  L728         BuchiCegarLoop]: Abstraction has 3762 states and 4164 transitions.
[2020-11-25 16:52:38,432 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3762 states and 4164 transitions.
[2020-11-25 16:52:38,450 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3762 to 3762.
[2020-11-25 16:52:38,450 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3762 states.
[2020-11-25 16:52:38,454 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3762 states to 3762 states and 4164 transitions.
[2020-11-25 16:52:38,454 INFO  L751         BuchiCegarLoop]: Abstraction has 3762 states and 4164 transitions.
[2020-11-25 16:52:38,454 INFO  L631         BuchiCegarLoop]: Abstraction has 3762 states and 4164 transitions.
[2020-11-25 16:52:38,454 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:52:38,454 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3762 states and 4164 transitions.
[2020-11-25 16:52:38,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:38,458 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:38,458 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:38,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:38,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND TRUE   choice == 9
[L6630]              gas := gas - 21000;
[L6631]  COND TRUE   gas >= 0
[L6632]              assume _amount_s669 >= 0 && _amount_s669 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]              assume msgvalue_MSG == 0;
[L6634]  CALL        call __ret_0_mint := mint~address~uint256_MintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L1277]              havoc __exception;
[L1278]              revert := false;
[L1279]  COND FALSE  !(__exception)
[L1306]  CALL        call __ret_0_ := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3769]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5673]  CALL        call __var_11 := checkMintPermission~address_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3700]  COND TRUE   _minter_s628 == owner_Ownable[this]
[L3701]              __ret_0_ := true;
[L5673]  RET         call __var_11 := checkMintPermission~address_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5674]  COND FALSE  !(revert)
[L5677]  COND FALSE  !(!__var_11)
[L3769]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5651]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3773]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L3777]  COND TRUE   DType[this] == GatherToken
[L3778]  CALL        call __var_12 := mintInternal~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3833]  COND FALSE  !(msgsender_MSG != owner_Ownable[this])
[L3842]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s737);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3842]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s737);
[L3843]  COND FALSE  !(revert)
[L3846]              totalSupply__BasicToken[this] := __var_14;
[L3847]  COND FALSE  !(!(totalSupply__BasicToken[this] <= maxMintLimit_MintableToken[this]))
[L3851]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s737], _amount_s737);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3851]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s737], _amount_s737);
[L3852]  COND FALSE  !(revert)
[L3855]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s737];
[L3856]              balances_BasicToken[this][_to_s737] := __var_15;
[L3857]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s737];
[L3858]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3859]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3860]              __ret_0_ := true;
[L3778]  RET         call __var_12 := mintInternal~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L3779]  COND FALSE  !(revert)
[L3790]              __ret_0_ := __var_12;
[L1306]  RET         call __ret_0_ := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L1307]              assume !revert && gas >= 0;
[L6634]  RET         call __ret_0_mint := mint~address~uint256_MintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s669, _amount_s669);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:38,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:38,465 INFO  L82        PathProgramCache]: Analyzing trace with hash -2047830339, now seen corresponding path program 1 times
[2020-11-25 16:52:38,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:38,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:38,933 INFO  L134       CoverageAnalysis]: Checked inductivity of 1091 backedges. 31 proven. 5 refuted. 0 times theorem prover too weak. 1055 trivial. 0 not checked.
[2020-11-25 16:52:38,933 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:52:38,933 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 16:52:38,934 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:38,934 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 16:52:38,934 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=70, Invalid=632, Unknown=0, NotChecked=0, Total=702
[2020-11-25 16:52:38,934 INFO  L87              Difference]: Start difference. First operand 3762 states and 4164 transitions. cyclomatic complexity: 407 Second operand 27 states.
[2020-11-25 16:52:42,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:42,308 INFO  L93              Difference]: Finished difference Result 3819 states and 4243 transitions.
[2020-11-25 16:52:42,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 16:52:42,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3819 states and 4243 transitions.
[2020-11-25 16:52:42,315 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:42,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3819 states to 3819 states and 4243 transitions.
[2020-11-25 16:52:42,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 949
[2020-11-25 16:52:42,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 949
[2020-11-25 16:52:42,324 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3819 states and 4243 transitions.
[2020-11-25 16:52:42,326 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:42,326 INFO  L728         BuchiCegarLoop]: Abstraction has 3819 states and 4243 transitions.
[2020-11-25 16:52:42,328 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3819 states and 4243 transitions.
[2020-11-25 16:52:42,348 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3819 to 3772.
[2020-11-25 16:52:42,348 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3772 states.
[2020-11-25 16:52:42,352 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3772 states to 3772 states and 4193 transitions.
[2020-11-25 16:52:42,352 INFO  L751         BuchiCegarLoop]: Abstraction has 3772 states and 4193 transitions.
[2020-11-25 16:52:42,352 INFO  L631         BuchiCegarLoop]: Abstraction has 3772 states and 4193 transitions.
[2020-11-25 16:52:42,352 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:52:42,352 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3772 states and 4193 transitions.
[2020-11-25 16:52:42,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:52:42,355 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:52:42,355 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:52:42,357 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:52:42,357 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_GatherToken0 := false;
[L2]                 call_transfer_GatherToken0 := false;
[L2]     CALL        call main();
[L6692]              assume null == 0;
[L6693]  CALL        call this := FreshRefGenerator__success();
[L2967]              havoc newRef;
[L2968]              assume Alloc[newRef] == false;
[L2969]              Alloc[newRef] := true;
[L2970]              assume newRef != null;
[L6693]  RET         call this := FreshRefGenerator__success();
[L6694]              assume now >= 0;
[L6695]              assume DType[this] == GatherToken;
[L6696]              assume msgvalue_MSG == 0;
[L6697]              gas := gas - 53000;
[L6698]  CALL        call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1621]              havoc __exception;
[L1622]              revert := false;
[L1623]  COND FALSE  !(__exception)
[L1650]  CALL        call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3997]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L4001]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L4005]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L4009]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L4013]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3662]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3662]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3666]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3666]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]  COND FALSE  !(revert)
[L3670]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3670]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3396]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3396]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3209]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3209]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3210]  COND FALSE  !(revert)
[L3213]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3190]              assume msgsender_MSG != null;
[L3191]              Balance[this] := 0;
[L3213]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3214]  COND FALSE  !(revert)
[L3400]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3173]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3158]              assume msgsender_MSG != null;
[L3159]              Balance[this] := 0;
[L3173]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3174]  COND FALSE  !(revert)
[L3255]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]              assume msgsender_MSG != null;
[L3234]              Balance[this] := 0;
[L3235]              balances_BasicToken[this] := zeroRefintArr();
[L3236]              sum_balances0[this] := 0;
[L3237]              totalSupply__BasicToken[this] := 0;
[L3259]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3404]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]              assume msgsender_MSG != null;
[L3368]              Balance[this] := 0;
[L3369]              allowed_StandardToken[this] := zeroRefRefintArr();
[L3370]              sum_allowed1[this] := 0;
[L3408]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3674]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3098]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              Balance[this] := 0;
[L3083]              owner_Ownable[this] := null;
[L3085]              owner_Ownable[this] := msgsender_MSG;
[L3098]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3099]  COND FALSE  !(revert)
[L3678]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L3682]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3623]              assume msgsender_MSG != null;
[L3624]              Balance[this] := 0;
[L3625]              mintingFinished_MintableToken[this] := false;
[L3626]              mintPermissions_MintableToken[this] := zeroRefintArr();
[L3627]              sum_mintPermissions2[this] := 0;
[L3628]              maxMintLimit_MintableToken[this] := 0;
[L3682]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3683]  COND FALSE  !(revert)
[L4017]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L4021]  CALL        call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3950]              assume msgsender_MSG != null;
[L3951]              Balance[this] := 0;
[L3952]              name_GatherToken[this] := 1979683959;
[L3953]              symbol_GatherToken[this] := -286833360;
[L3954]              decimals_GatherToken[this] := 18;
[L3955]              transferPaused_GatherToken[this] := true;
[L3957]              __var_16 := decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3958]              maxMintLimit_MintableToken[this] := 400000000 * (nonlinearPow(10, decimals_GatherToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4021]  RET         call GatherToken_GatherToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4022]  COND FALSE  !(revert)
[L1650]  RET         call GatherToken_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1651]              assume !revert && gas >= 0;
[L6698]  RET         call GatherToken_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6699]              assume !revert && gas >= 0;
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND FALSE  !(choice == 18)
[L6576]  COND FALSE  !(choice == 17)
[L6582]  COND FALSE  !(choice == 16)
[L6589]  COND FALSE  !(choice == 15)
[L6596]  COND FALSE  !(choice == 14)
[L6603]  COND FALSE  !(choice == 13)
[L6610]  COND FALSE  !(choice == 12)
[L6616]  COND FALSE  !(choice == 11)
[L6622]  COND FALSE  !(choice == 10)
[L6629]  COND FALSE  !(choice == 9)
[L6636]  COND FALSE  !(choice == 8)
[L6642]  COND FALSE  !(choice == 7)
[L6648]  COND FALSE  !(choice == 6)
[L6654]  COND FALSE  !(choice == 5)
[L6660]  COND FALSE  !(choice == 4)
[L6666]  COND FALSE  !(choice == 3)
[L6672]  COND TRUE   choice == 2
[L6673]              gas := gas - 21000;
[L6674]  COND TRUE   gas >= 0
[L6675]              assume msgvalue_MSG == 0;
[L6676]  CALL        call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L1684]              havoc __exception;
[L1685]              revert := false;
[L1686]  COND FALSE  !(__exception)
[L1713]  CALL        call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5635]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4038]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L4042]              transferPaused_GatherToken[this] := false;
[L1713]  RET         call unpauseTransfer_GatherToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1714]              assume !revert && gas >= 0;
[L6676]  RET         call unpauseTransfer_GatherToken(this, msgsender_MSG, msgvalue_MSG);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND FALSE  !(choice == 22)
[L6551]  COND FALSE  !(choice == 21)
[L6557]  COND FALSE  !(choice == 20)
[L6563]  COND FALSE  !(choice == 19)
[L6569]  COND TRUE   choice == 18
[L6570]              gas := gas - 21000;
[L6571]  COND TRUE   gas >= 0
[L6572]              assume _value_s867 >= 0 && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6573]              assume msgvalue_MSG == 0;
[L6574]  CALL        call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s867 && (_value_s867 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s867] + _value_s867 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s867 >= 0) && _value_s867 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s867] >= 0) && balances_BasicToken[this][_to_s867] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_GatherToken0 := true;
[L2]                 call_transfer_GatherToken0 := false;
[L2]                 revert := revert_hold;
[L1877]              havoc __exception;
[L1878]              revert := false;
[L1879]  COND FALSE  !(__exception)
[L1906]  CALL        call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4127]  CALL        call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5693]  COND FALSE  !(!!transferPaused_GatherToken[this])
[L4127]  RET         call tranferable_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]  COND FALSE  !(revert)
[L4131]  COND TRUE   DType[this] == GatherToken
[L4132]  CALL        call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L3314]              __var_2 := null;
[L3315]  COND FALSE  !(!(_to_s300 != null))
[L3319]  COND FALSE  !(!(_value_s300 <= balances_BasicToken[this][msgsender_MSG]))
[L3323]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3048]              assert b_s68 <= a_s68;
[L3049]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3323]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s300);
[L3324]  COND FALSE  !(revert)
[L3327]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L3328]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L3329]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L3330]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3062]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              assert c_s92 >= a_s92;
[L3064]              c_s92 := c_s92;
[L3330]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s300], _value_s300);
[L3331]  COND FALSE  !(revert)
[L3334]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s300];
[L3335]              balances_BasicToken[this][_to_s300] := __var_4;
[L3336]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s300];
[L3337]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L3338]              __ret_0_ := true;
[L4132]  RET         call __var_19 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L4133]  COND FALSE  !(revert)
[L4139]              __ret_0_ := __var_19;
[L1906]  RET         call __ret_0_ := transfer~address~uint256_GatherToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L1907]              assume !revert && gas >= 0;
[L6574]  RET         call __ret_0_transfer := transfer~address~uint256_GatherToken(this, msgsender_MSG, msgvalue_MSG, _to_s867, _value_s867);
[L6702]  RET         call CorralChoice_GatherToken(this);

Loop:
[L6702]  CALL        call CorralChoice_GatherToken(this);
[L6488]              havoc msgsender_MSG;
[L6489]              havoc msgvalue_MSG;
[L6490]              havoc choice;
[L6491]              havoc __ret_0_owner;
[L6492]              havoc newOwner_s150;
[L6493]              havoc __ret_0_totalSupply;
[L6494]              havoc _owner_s312;
[L6495]              havoc __ret_0_balanceOf;
[L6496]              havoc _to_s867;
[L6497]              havoc _value_s867;
[L6498]              havoc __ret_0_transfer;
[L6499]              havoc _owner_s453;
[L6500]              havoc _spender_s453;
[L6501]              havoc __ret_0_allowance;
[L6502]              havoc _from_s849;
[L6503]              havoc _to_s849;
[L6504]              havoc _value_s849;
[L6505]              havoc __ret_0_transferFrom;
[L6506]              havoc _spender_s437;
[L6507]              havoc _value_s437;
[L6508]              havoc __ret_0_approve;
[L6509]              havoc _spender_s495;
[L6510]              havoc _addedValue_s495;
[L6511]              havoc __ret_0_increaseApproval;
[L6512]              havoc _spender_s555;
[L6513]              havoc _subtractedValue_s555;
[L6514]              havoc __ret_0_decreaseApproval;
[L6515]              havoc __ret_0_mintingFinished;
[L6516]              havoc __ret_0_maxMintLimit;
[L6517]              havoc _minter_s650;
[L6518]              havoc _amount_s650;
[L6519]              havoc _to_s669;
[L6520]              havoc _amount_s669;
[L6521]              havoc __ret_0_mint;
[L6522]              havoc _minter_s749;
[L6523]              havoc __ret_0_mintAllowed;
[L6524]              havoc __ret_0_finishMinting;
[L6525]              havoc __ret_0_name;
[L6526]              havoc __ret_0_symbol;
[L6527]              havoc __ret_0_decimals;
[L6528]              havoc __ret_0_transferPaused;
[L6529]              havoc tmpNow;
[L6530]              havoc gas;
[L6531]              assume gas > 4000000 && gas <= 8000000;
[L6532]              tmpNow := now;
[L6533]              havoc now;
[L6534]              assume now > tmpNow;
[L6535]              assume msgsender_MSG != null;
[L6536]              assume DType[msgsender_MSG] != SafeMath;
[L6537]              assume DType[msgsender_MSG] != Ownable;
[L6538]              assume DType[msgsender_MSG] != ERC20Basic;
[L6539]              assume DType[msgsender_MSG] != ERC20;
[L6540]              assume DType[msgsender_MSG] != BasicToken;
[L6541]              assume DType[msgsender_MSG] != StandardToken;
[L6542]              assume DType[msgsender_MSG] != MintableToken;
[L6543]              assume DType[msgsender_MSG] != GatherToken;
[L6544]              Alloc[msgsender_MSG] := true;
[L6545]  COND TRUE   choice == 22
[L6546]              gas := gas - 21000;
[L6547]  COND FALSE  !(gas >= 0)
[L6702]  RET         call CorralChoice_GatherToken(this);

[2020-11-25 16:52:42,361 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:52:42,361 INFO  L82        PathProgramCache]: Analyzing trace with hash -307004432, now seen corresponding path program 1 times
[2020-11-25 16:52:42,362 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:52:42,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:52:42,885 INFO  L134       CoverageAnalysis]: Checked inductivity of 1086 backedges. 31 proven. 5 refuted. 0 times theorem prover too weak. 1050 trivial. 0 not checked.
[2020-11-25 16:52:42,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:52:42,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 16:52:42,886 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:52:42,886 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 16:52:42,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=628, Unknown=0, NotChecked=0, Total=702
[2020-11-25 16:52:42,886 INFO  L87              Difference]: Start difference. First operand 3772 states and 4193 transitions. cyclomatic complexity: 428 Second operand 27 states.
[2020-11-25 16:52:45,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:52:45,048 INFO  L93              Difference]: Finished difference Result 2184 states and 2438 transitions.
[2020-11-25 16:52:45,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 16:52:45,049 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2438 transitions.
[2020-11-25 16:52:45,052 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:52:45,052 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 0 states and 0 transitions.
[2020-11-25 16:52:45,052 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 16:52:45,052 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 16:52:45,053 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 16:52:45,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:52:45,053 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:52:45,053 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:52:45,053 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 16:52:45,053 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:52:45,053 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 16:52:45,053 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 16:52:45,053 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 16:52:45,056 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:52:45 BasicIcfg
[2020-11-25 16:52:45,056 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:52:45,056 INFO  L168              Benchmark]: Toolchain (without parser) took 18313.54 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 331.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,057 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,057 INFO  L168              Benchmark]: Boogie Preprocessor took 131.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,058 INFO  L168              Benchmark]: UtopiaSpecLang took 66.11 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,058 INFO  L168              Benchmark]: Boogie Printer took 23.07 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,058 INFO  L168              Benchmark]: RCFGBuilder took 1047.37 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -114.7 MB). Peak memory consumption was 191.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,059 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.20 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,059 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1819.15 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 154.7 MB). Free memory was 1.0 GB in the beginning and 953.8 MB in the end (delta: 56.4 MB). Peak memory consumption was 523.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,059 INFO  L168              Benchmark]: BlockEncodingV2 took 160.94 ms. Allocated memory is still 1.3 GB. Free memory was 953.8 MB in the beginning and 866.3 MB in the end (delta: 87.4 MB). Peak memory consumption was 87.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,059 INFO  L168              Benchmark]: BuchiAutomizer took 15023.59 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 866.3 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 43.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:52:45,062 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5922 locations, 10508 edges
  - StatisticsResult: Encoded RCFG
    5777 locations, 10179 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 131.14 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 66.11 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.07 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1047.37 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -114.7 MB). Peak memory consumption was 191.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.20 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1819.15 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 154.7 MB). Free memory was 1.0 GB in the beginning and 953.8 MB in the end (delta: 56.4 MB). Peak memory consumption was 523.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 160.94 ms. Allocated memory is still 1.3 GB. Free memory was 953.8 MB in the beginning and 866.3 MB in the end (delta: 87.4 MB). Peak memory consumption was 87.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15023.59 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 866.3 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 43.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2404 locations, 3210 edges
  - StatisticsResult: BuchiProgram size
    5922 locations, 10508 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 27 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.9s and 10 iterations.  TraceHistogramMax:12. Analysis of lassos took 2.5s. Construction of modules took 8.6s. BÃ¼chi inclusion checks took 3.1s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 8 MinimizatonAttempts, 1749 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3772 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30155 SDtfs, 26374 SDslu, 76518 SDs, 0 SdLazy, 157392 SolverSat, 3799 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_GatherToken0) ==> ( <>(fail_transfer_GatherToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
