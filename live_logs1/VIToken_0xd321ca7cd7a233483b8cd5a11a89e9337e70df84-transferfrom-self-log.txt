This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:39:42,719 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:39:42,720 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:39:42,732 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:39:42,732 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:39:42,734 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:39:42,735 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:39:42,737 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:39:42,738 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:39:42,739 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:39:42,740 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:39:42,740 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:39:42,741 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:39:42,742 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:39:42,743 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:39:42,743 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:39:42,744 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:39:42,745 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:39:42,747 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:39:42,748 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:39:42,749 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:39:42,750 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:39:42,752 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:39:42,752 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:39:42,752 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:39:42,753 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:39:42,753 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:39:42,754 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:39:42,754 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:39:42,754 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:39:42,755 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:39:42,755 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:39:42,756 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:39:42,756 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:39:42,757 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:39:42,757 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:39:42,758 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:39:42,758 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:39:42,758 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:39:42,759 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:39:42,759 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:39:42,759 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:39:42,768 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:39:42,768 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:39:42,769 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:39:42,769 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:39:42,769 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:39:42,769 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:39:42,769 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:39:42,769 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:39:42,769 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:39:42,769 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:39:42,770 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:39:42,770 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:39:42,771 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:39:42,771 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:39:42,771 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:39:42,771 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:39:42,771 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:39:42,771 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:39:42,796 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:39:42,809 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:39:42,812 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:39:42,813 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:39:42,814 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:39:42,814 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl
[2020-11-25 08:39:42,814 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl'
[2020-11-25 08:39:42,925 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:39:42,926 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:39:42,927 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:39:42,927 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:39:42,927 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:39:42,944 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:42,946 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:42,991 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:42,992 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:43,024 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:43,040 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:43,053 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:43,070 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:39:43,070 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:39:43,070 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:39:43,073 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:39:43,076 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/1) ...
[2020-11-25 08:39:43,098 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:39:43,104 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:39:43,112 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:39:43,122 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=sender_s407 || p2!=msg.sender ) && sender_s407==recipient_s407 ) && amount_s407<=_balances_ERC20[this][sender_s407] ) && amount_s407<=_allowances_ERC20[this][sender_s407][msg.sender] ) && amount_s407>=0 ) && amount_s407<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s407]>=0 ) && _balances_ERC20[this][recipient_s407]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s407]>=0 ) && _balances_ERC20[this][sender_s407]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s407][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s407][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:39:43,126 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][sender_s407][msg.sender]==( ( old(_allowances_ERC20[this][sender_s407][msg.sender]) ) - amount_s407 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],IdentifierExpression[amount_s407,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]]
[2020-11-25 08:39:43,135 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transferFrom(from, to, value), return == true && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:39:43,135 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(success_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:39:43,151 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:43 PropertyContainer
[2020-11-25 08:39:43,152 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:39:43,152 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:39:43,152 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:39:43,152 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:39:43,153 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/2) ...
[2020-11-25 08:39:43,154 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:39:43,154 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:39:43,181 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:43" (2/2) ...
[2020-11-25 08:39:43,181 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:39:43,182 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:39:43,182 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:39:43,182 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:39:43,183 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/2) ...
[2020-11-25 08:39:43,239 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:39:43,239 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:39:43,239 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:39:43,239 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:39:43,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:39:43,239 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:39:43,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:39:43,240 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:39:43,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:39:43,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:39:43,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:39:43,241 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:39:43,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:39:43,242 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:39:43,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:39:43,243 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:39:43,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:39:43,243 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:39:43,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:39:43,243 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:39:43,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:39:43,243 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:39:43,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:39:43,243 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:39:43,244 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:39:43,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:39:43,245 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:39:43,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:39:43,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:39:43,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:39:43,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:39:43,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:39:43,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:39:43,247 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:39:43,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:39:43,247 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:39:43,247 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:39:43,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:39:43,247 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:39:43,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:39:43,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:39:43,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:39:43,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:39:43,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:39:43,248 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:39:43,249 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:39:43,250 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:39:43,251 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:39:43,252 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:39:43,252 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:39:43,252 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:39:43,253 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:39:43,253 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:39:43,253 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:39:43,253 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:39:43,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:39:43,254 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:39:43,254 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:39:43,254 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:39:43,255 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:43,255 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,255 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:43,255 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,256 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:39:43,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:39:43,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:39:43,257 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:39:43,257 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:39:43,257 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:39:43,257 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:39:43,258 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:39:43,258 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:39:43,258 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:39:43,258 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:39:43,258 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:39:43,259 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:39:43,259 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,260 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,260 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:43,260 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:43,260 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:43,261 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:43,261 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,261 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:39:43,261 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:39:43,261 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,262 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:39:43,262 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:39:43,262 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:39:43,262 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:39:43,262 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:39:43,263 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:39:43,263 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:39:43,263 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:39:43,263 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:39:43,263 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:39:43,264 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:39:43,265 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:39:43,266 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:39:43,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:39:43,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:39:43,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:39:43,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:39:43,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:43,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:39:43,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:39:43,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:39:43,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:39:43,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:39:43,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:39:43,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:39:43,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:39:43,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:39:43,278 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:39:43,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:39:43,782 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:43,782 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:43,784 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:44,006 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:44,380 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:39:44,381 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:39:44,383 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:44 BoogieIcfgContainer
[2020-11-25 08:39:44,383 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:43" (2/2) ...
[2020-11-25 08:39:44,383 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:39:44,384 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5c8a834a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:44, skipping insertion in model container
[2020-11-25 08:39:44,384 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:39:44,384 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:39:44,384 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:39:44,385 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:39:44,385 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/3) ...
[2020-11-25 08:39:44,386 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@253db049 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:44, skipping insertion in model container
[2020-11-25 08:39:44,386 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:43" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:39:44,426 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:44 NWAContainer
[2020-11-25 08:39:44,426 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:39:44,426 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:39:44,426 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:39:44,428 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:39:44,429 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:44" (3/4) ...
[2020-11-25 08:39:44,430 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@281f36ee and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:44, skipping insertion in model container
[2020-11-25 08:39:44,431 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:44" (4/4) ...
[2020-11-25 08:39:44,435 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:39:44,441 INFO  L110   BuchiProductObserver]: Initial RCFG 3086 locations, 4751 edges
[2020-11-25 08:39:44,441 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:39:44,455 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:39:46,880 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:39:46,891 INFO  L110   BuchiProductObserver]: BuchiProgram size 8164 locations, 15606 edges
[2020-11-25 08:39:46,891 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:46 BoogieIcfgContainer
[2020-11-25 08:39:46,891 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:39:46,892 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:39:46,892 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:39:46,893 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:39:46,893 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:46" (1/1) ...
[2020-11-25 08:39:47,037 INFO  L313           BlockEncoder]: Initial Icfg 8164 locations, 15606 edges
[2020-11-25 08:39:47,037 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:39:47,037 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:39:47,038 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:39:47,038 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:39:47,054 INFO  L70    emoveInfeasibleEdges]: Removed 252 edges and 23 locations because of local infeasibility
[2020-11-25 08:39:47,069 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:39:47,087 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:39:47,094 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:39:47,100 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:39:47,100 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:39:47,104 INFO  L313           BlockEncoder]: Encoded RCFG 7996 locations, 15137 edges
[2020-11-25 08:39:47,105 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:39:47 BasicIcfg
[2020-11-25 08:39:47,105 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:39:47,105 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:39:47,105 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:39:47,107 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:39:47,107 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,107 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:42" (1/6) ...
[2020-11-25 08:39:47,108 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35addecf and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:47, skipping insertion in model container
[2020-11-25 08:39:47,108 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,108 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:43" (2/6) ...
[2020-11-25 08:39:47,108 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35addecf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:47, skipping insertion in model container
[2020-11-25 08:39:47,108 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,108 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:44" (3/6) ...
[2020-11-25 08:39:47,109 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35addecf and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:39:47, skipping insertion in model container
[2020-11-25 08:39:47,109 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,109 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:44" (4/6) ...
[2020-11-25 08:39:47,109 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35addecf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:47, skipping insertion in model container
[2020-11-25 08:39:47,109 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,109 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:46" (5/6) ...
[2020-11-25 08:39:47,109 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35addecf and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:39:47, skipping insertion in model container
[2020-11-25 08:39:47,109 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:47,110 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:39:47" (6/6) ...
[2020-11-25 08:39:47,110 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transferfrom-self.bpl_BEv2
[2020-11-25 08:39:47,141 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:39:47,141 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:39:47,141 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:39:47,141 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:39:47,141 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:39:47,141 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:39:47,141 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:39:47,141 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:39:47,141 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:39:47,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7996 states.
[2020-11-25 08:39:47,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:47,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:47,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:47,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:47,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:47,268 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:39:47,268 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7996 states.
[2020-11-25 08:39:47,300 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:47,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:47,300 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:47,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:47,302 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND TRUE   revert
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND TRUE   revert
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:47,315 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:47,316 INFO  L82        PathProgramCache]: Analyzing trace with hash 2046866213, now seen corresponding path program 1 times
[2020-11-25 08:39:47,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:47,341 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:47,379 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:39:47,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:47,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:47,779 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:47,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:47,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:47,794 INFO  L87              Difference]: Start difference. First operand 7996 states. Second operand 3 states.
[2020-11-25 08:39:48,261 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:48,261 INFO  L93              Difference]: Finished difference Result 6710 states and 11827 transitions.
[2020-11-25 08:39:48,262 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:48,263 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6710 states and 11827 transitions.
[2020-11-25 08:39:48,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:48,368 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6710 states to 6010 states and 10130 transitions.
[2020-11-25 08:39:48,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 08:39:48,373 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1159
[2020-11-25 08:39:48,373 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6010 states and 10130 transitions.
[2020-11-25 08:39:48,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:48,392 INFO  L728         BuchiCegarLoop]: Abstraction has 6010 states and 10130 transitions.
[2020-11-25 08:39:48,410 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6010 states and 10130 transitions.
[2020-11-25 08:39:48,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6010 to 5460.
[2020-11-25 08:39:48,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5460 states.
[2020-11-25 08:39:48,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5460 states to 5460 states and 9148 transitions.
[2020-11-25 08:39:48,529 INFO  L751         BuchiCegarLoop]: Abstraction has 5460 states and 9148 transitions.
[2020-11-25 08:39:48,529 INFO  L631         BuchiCegarLoop]: Abstraction has 5460 states and 9148 transitions.
[2020-11-25 08:39:48,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:39:48,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5460 states and 9148 transitions.
[2020-11-25 08:39:48,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:48,543 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:48,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:48,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [11, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:48,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4703]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4703]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4704]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4703]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4703]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4704]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4703]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4703]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4704]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L4703]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4703]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4704]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND TRUE   __tmp__DType[this] == VIToken
[L5275]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5275]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5276]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:48,559 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:48,559 INFO  L82        PathProgramCache]: Analyzing trace with hash 1404815739, now seen corresponding path program 1 times
[2020-11-25 08:39:48,560 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:48,578 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:48,794 INFO  L134       CoverageAnalysis]: Checked inductivity of 1303 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 1296 trivial. 0 not checked.
[2020-11-25 08:39:48,795 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:39:48,795 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 08:39:48,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:48,797 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:39:48,797 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:39:48,797 INFO  L87              Difference]: Start difference. First operand 5460 states and 9148 transitions. cyclomatic complexity: 3690 Second operand 4 states.
[2020-11-25 08:39:49,427 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:49,427 INFO  L93              Difference]: Finished difference Result 4944 states and 6008 transitions.
[2020-11-25 08:39:49,427 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:39:49,427 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4944 states and 6008 transitions.
[2020-11-25 08:39:49,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:49,452 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4944 states to 4944 states and 6008 transitions.
[2020-11-25 08:39:49,452 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 994
[2020-11-25 08:39:49,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:39:49,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4944 states and 6008 transitions.
[2020-11-25 08:39:49,457 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:49,457 INFO  L728         BuchiCegarLoop]: Abstraction has 4944 states and 6008 transitions.
[2020-11-25 08:39:49,461 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4944 states and 6008 transitions.
[2020-11-25 08:39:49,496 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4944 to 4944.
[2020-11-25 08:39:49,496 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4944 states.
[2020-11-25 08:39:49,501 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4944 states to 4944 states and 6008 transitions.
[2020-11-25 08:39:49,501 INFO  L751         BuchiCegarLoop]: Abstraction has 4944 states and 6008 transitions.
[2020-11-25 08:39:49,501 INFO  L631         BuchiCegarLoop]: Abstraction has 4944 states and 6008 transitions.
[2020-11-25 08:39:49,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:39:49,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4944 states and 6008 transitions.
[2020-11-25 08:39:49,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:49,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:49,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:49,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:49,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4708]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4708]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4709]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4708]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4708]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4709]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4708]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4708]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4709]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L4702]  COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L4707]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L4708]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4708]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4709]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND TRUE   __tmp__DType[this] == VIToken
[L5275]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5275]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5276]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:49,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:49,528 INFO  L82        PathProgramCache]: Analyzing trace with hash 894080760, now seen corresponding path program 1 times
[2020-11-25 08:39:49,529 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:49,543 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:49,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 1553 backedges. 0 proven. 45 refuted. 0 times theorem prover too weak. 1508 trivial. 0 not checked.
[2020-11-25 08:39:49,848 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:39:49,848 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:39:49,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:49,849 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:49,849 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:49,849 INFO  L87              Difference]: Start difference. First operand 4944 states and 6008 transitions. cyclomatic complexity: 1066 Second operand 3 states.
[2020-11-25 08:39:49,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:49,912 INFO  L93              Difference]: Finished difference Result 4947 states and 6011 transitions.
[2020-11-25 08:39:49,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:49,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4947 states and 6011 transitions.
[2020-11-25 08:39:49,925 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:49,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4947 states to 4947 states and 6011 transitions.
[2020-11-25 08:39:49,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1015
[2020-11-25 08:39:49,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1015
[2020-11-25 08:39:49,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4947 states and 6011 transitions.
[2020-11-25 08:39:49,954 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:49,954 INFO  L728         BuchiCegarLoop]: Abstraction has 4947 states and 6011 transitions.
[2020-11-25 08:39:49,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4947 states and 6011 transitions.
[2020-11-25 08:39:49,983 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4947 to 4945.
[2020-11-25 08:39:49,983 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4945 states.
[2020-11-25 08:39:49,988 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4945 states to 4945 states and 6009 transitions.
[2020-11-25 08:39:49,988 INFO  L751         BuchiCegarLoop]: Abstraction has 4945 states and 6009 transitions.
[2020-11-25 08:39:49,988 INFO  L631         BuchiCegarLoop]: Abstraction has 4945 states and 6009 transitions.
[2020-11-25 08:39:49,988 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:39:49,988 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4945 states and 6009 transitions.
[2020-11-25 08:39:49,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:49,994 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:49,994 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:49,997 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:49,997 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND FALSE  !(__tmp__DType[this] == VIToken)
[L5279]  COND TRUE   __tmp__DType[this] == ERC20Capped
[L5280]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5280]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5281]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:50,003 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:50,004 INFO  L82        PathProgramCache]: Analyzing trace with hash 1488996494, now seen corresponding path program 1 times
[2020-11-25 08:39:50,005 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:50,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:50,225 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:39:50,225 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:50,225 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:50,225 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:50,226 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:50,226 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:50,226 INFO  L87              Difference]: Start difference. First operand 4945 states and 6009 transitions. cyclomatic complexity: 1066 Second operand 3 states.
[2020-11-25 08:39:50,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:50,273 INFO  L93              Difference]: Finished difference Result 4969 states and 6046 transitions.
[2020-11-25 08:39:50,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:50,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4969 states and 6046 transitions.
[2020-11-25 08:39:50,281 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:50,294 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4969 states to 4969 states and 6046 transitions.
[2020-11-25 08:39:50,294 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-11-25 08:39:50,295 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1022
[2020-11-25 08:39:50,295 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4969 states and 6046 transitions.
[2020-11-25 08:39:50,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:50,298 INFO  L728         BuchiCegarLoop]: Abstraction has 4969 states and 6046 transitions.
[2020-11-25 08:39:50,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4969 states and 6046 transitions.
[2020-11-25 08:39:50,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4969 to 4955.
[2020-11-25 08:39:50,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4955 states.
[2020-11-25 08:39:50,335 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4955 states to 4955 states and 6027 transitions.
[2020-11-25 08:39:50,335 INFO  L751         BuchiCegarLoop]: Abstraction has 4955 states and 6027 transitions.
[2020-11-25 08:39:50,336 INFO  L631         BuchiCegarLoop]: Abstraction has 4955 states and 6027 transitions.
[2020-11-25 08:39:50,336 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:39:50,336 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4955 states and 6027 transitions.
[2020-11-25 08:39:50,340 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:50,340 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:50,341 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:50,343 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:50,343 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND TRUE   __exception
[L1866]              __tmp__Balance := Balance;
[L1867]              __tmp__DType := DType;
[L1868]              __tmp__Alloc := Alloc;
[L1869]              __tmp__balance_ADDR := balance_ADDR;
[L1870]              __tmp__M_Ref_int := M_Ref_int;
[L1871]              __tmp__sum__balances0 := sum__balances0;
[L1872]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1873]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1874]              __tmp__sum__allowances1 := sum__allowances1;
[L1875]              __tmp__M_Ref_bool := M_Ref_bool;
[L1876]              __tmp__sum := sum;
[L1877]              __tmp__Length := Length;
[L1878]              __tmp__now := now;
[L1879]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1880]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1881]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1882]              __tmp___balances_ERC20 := _balances_ERC20;
[L1883]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1884]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1885]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1886]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1887]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1888]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1889]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1890]  CALL        call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5373]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5373]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5378]  COND FALSE  !(revert)
[L5381]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L3038]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3038]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3039]  COND FALSE  !(revert)
[L3042]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3011]              assume msgsender_MSG != null;
[L3012]              __tmp__Balance[this] := 0;
[L3013]              __tmp___name_ERC20Detailed[this] := 890295274;
[L3014]              __tmp___symbol_ERC20Detailed[this] := 890295274;
[L3015]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3017]              __tmp___name_ERC20Detailed[this] := name_s99;
[L3018]              __tmp___symbol_ERC20Detailed[this] := symbol_s99;
[L3019]              __tmp___decimals_ERC20Detailed[this] := decimals_s99;
[L3042]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3043]  COND FALSE  !(revert)
[L5381]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, __tmp__DECIMALS_VIToken[this]);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5385]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5389]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5389]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5390]  COND FALSE  !(revert)
[L5393]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5393]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5394]  COND FALSE  !(revert)
[L5397]  CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5182]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5182]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5183]  COND FALSE  !(revert)
[L5186]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5186]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5190]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5194]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5194]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]  COND FALSE  !(revert)
[L5198]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L5050]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L5054]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3324]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L3324]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3325]  COND FALSE  !(revert)
[L3328]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2994]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              __tmp__Balance[this] := 0;
[L2994]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  COND FALSE  !(revert)
[L3328]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3329]  COND FALSE  !(revert)
[L3332]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3299]              assume msgsender_MSG != null;
[L3300]              __tmp__Balance[this] := 0;
[L3301]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3302]              __tmp__sum__balances0[this] := 0;
[L3303]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3304]              __tmp__sum__allowances1[this] := 0;
[L3305]              __tmp___totalSupply_ERC20[this] := 0;
[L3332]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3333]  COND FALSE  !(revert)
[L5058]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3114]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3099]              assume msgsender_MSG != null;
[L3100]              __tmp__Balance[this] := 0;
[L3114]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3115]  COND FALSE  !(revert)
[L4788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4789]  COND FALSE  !(revert)
[L4792]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4665]              assume msgsender_MSG != null;
[L4666]              __tmp__Balance[this] := 0;
[L4668]  CALL        call __var_31 := FreshRefGenerator__fail();
[L2952]              havoc newRef;
[L2953]              assume __tmp__Alloc[newRef] == false;
[L2954]              __tmp__Alloc[newRef] := true;
[L2955]              assume newRef != null;
[L4668]  RET         call __var_31 := FreshRefGenerator__fail();
[L4669]  COND FALSE  !(revert)
[L4672]              __tmp___minters_MinterRole[this] := __var_31;
[L4674]  COND TRUE   __tmp__DType[this] == VIToken
[L4675]  CALL        call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3130]              __ret_0_ := msgsender_MSG;
[L4675]  RET         call __var_30 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4697]  COND TRUE   __tmp__DType[this] == VIToken
[L4698]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5000]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L4583]  CALL        call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4639]              __var_29 := null;
[L4640]  COND FALSE  !(!(account_s758 != null))
[L4644]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s758]][account_s758];
[L4583]  RET         call __var_27 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4584]  COND FALSE  !(revert)
[L4587]  COND FALSE  !(!!__var_27)
[L4591]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := true;
[L5000]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s846);
[L5001]  COND FALSE  !(revert)
[L4698]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4699]  COND FALSE  !(revert)
[L4792]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4793]  COND FALSE  !(revert)
[L5062]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5035]              assume msgsender_MSG != null;
[L5036]              __tmp__Balance[this] := 0;
[L5066]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5198]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]  COND FALSE  !(revert)
[L5202]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___cap_ERC20Capped[this] := 0;
[L5159]  COND FALSE  !(!(cap_s910 > 0))
[L5163]              __tmp___cap_ERC20Capped[this] := cap_s910;
[L5202]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5203]  COND FALSE  !(revert)
[L5397]  RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5398]  COND FALSE  !(revert)
[L5401]  CALL        call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]              assume msgsender_MSG != null;
[L5335]              __tmp__Balance[this] := 0;
[L5336]              __tmp__DECIMALS_VIToken[this] := 18;
[L5337]              __var_39 := __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5338]              __tmp__INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, __tmp__DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5340]  COND TRUE   __tmp__DType[this] == VIToken
[L5341]  CALL        call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5253]  COND TRUE   __tmp__DType[this] == VIToken
[L5254]  CALL        call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3356]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L5254]  RET         call __var_37 := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5255]  COND FALSE  !(revert)
[L5266]  CALL        call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L5266]  RET         call __var_36 := add~uint256~uint256_SafeMath__fail(this, this, 0, __var_37, value_s944);
[L5267]  COND FALSE  !(revert)
[L5270]  COND FALSE  !(!(__var_36 <= __tmp___cap_ERC20Capped[this]))
[L5274]  COND TRUE   __tmp__DType[this] == VIToken
[L5275]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4210]              __var_16 := null;
[L4211]  COND FALSE  !(!(account_s562 != null))
[L4215]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4215]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s562);
[L4216]  COND FALSE  !(revert)
[L4219]              __tmp___totalSupply_ERC20[this] := __var_17;
[L4220]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L3175]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3176]  COND FALSE  !(!(c_s165 >= a_s165))
[L3180]              __ret_0_ := c_s165;
[L4220]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s562], amount_s562);
[L4221]  COND FALSE  !(revert)
[L4224]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s562];
[L4225]              __tmp___balances_ERC20[this][account_s562] := __var_18;
[L4226]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s562];
[L5275]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5276]  COND FALSE  !(revert)
[L5341]  RET         call _mint~address~uint256_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_VIToken[this]);
[L5342]  COND FALSE  !(revert)
[L5401]  RET         call VIToken_VIToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5402]  COND FALSE  !(revert)
[L1890]  RET         call VIToken_VIToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1891]              assume revert || gas < 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:50,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:50,349 INFO  L82        PathProgramCache]: Analyzing trace with hash -2126481428, now seen corresponding path program 1 times
[2020-11-25 08:39:50,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:50,373 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:50,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 1541 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:39:50,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:50,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:39:50,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:50,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:39:50,620 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:39:50,620 INFO  L87              Difference]: Start difference. First operand 4955 states and 6027 transitions. cyclomatic complexity: 1074 Second operand 4 states.
[2020-11-25 08:39:50,889 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:50,889 INFO  L93              Difference]: Finished difference Result 5809 states and 6871 transitions.
[2020-11-25 08:39:50,889 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:39:50,890 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5809 states and 6871 transitions.
[2020-11-25 08:39:50,902 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:39:50,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5809 states to 5543 states and 6577 transitions.
[2020-11-25 08:39:50,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1206
[2020-11-25 08:39:50,918 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1206
[2020-11-25 08:39:50,918 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5543 states and 6577 transitions.
[2020-11-25 08:39:50,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:50,921 INFO  L728         BuchiCegarLoop]: Abstraction has 5543 states and 6577 transitions.
[2020-11-25 08:39:50,925 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5543 states and 6577 transitions.
[2020-11-25 08:39:50,962 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5543 to 4933.
[2020-11-25 08:39:50,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4933 states.
[2020-11-25 08:39:50,969 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4933 states to 4933 states and 5818 transitions.
[2020-11-25 08:39:50,969 INFO  L751         BuchiCegarLoop]: Abstraction has 4933 states and 5818 transitions.
[2020-11-25 08:39:50,969 INFO  L631         BuchiCegarLoop]: Abstraction has 4933 states and 5818 transitions.
[2020-11-25 08:39:50,969 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:39:50,969 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4933 states and 5818 transitions.
[2020-11-25 08:39:50,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:50,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:50,975 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:50,978 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:50,978 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND FALSE  !(DType[this] == VIToken)
[L4764]  COND FALSE  !(DType[this] == ERC20Capped)
[L4769]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4774]  COND TRUE   DType[this] == MinterRole
[L4775]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4775]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4776]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:50,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:50,983 INFO  L82        PathProgramCache]: Analyzing trace with hash 264580184, now seen corresponding path program 1 times
[2020-11-25 08:39:50,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:50,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:51,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 1589 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1541 trivial. 0 not checked.
[2020-11-25 08:39:51,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:39:51,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 08:39:51,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:51,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:51,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:51,191 INFO  L87              Difference]: Start difference. First operand 4933 states and 5818 transitions. cyclomatic complexity: 887 Second operand 3 states.
[2020-11-25 08:39:51,234 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:51,234 INFO  L93              Difference]: Finished difference Result 4936 states and 5821 transitions.
[2020-11-25 08:39:51,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:51,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4936 states and 5821 transitions.
[2020-11-25 08:39:51,244 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:51,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4936 states to 4936 states and 5821 transitions.
[2020-11-25 08:39:51,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1156
[2020-11-25 08:39:51,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1156
[2020-11-25 08:39:51,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4936 states and 5821 transitions.
[2020-11-25 08:39:51,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:51,263 INFO  L728         BuchiCegarLoop]: Abstraction has 4936 states and 5821 transitions.
[2020-11-25 08:39:51,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4936 states and 5821 transitions.
[2020-11-25 08:39:51,306 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4936 to 4934.
[2020-11-25 08:39:51,307 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4934 states.
[2020-11-25 08:39:51,313 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4934 states to 4934 states and 5819 transitions.
[2020-11-25 08:39:51,313 INFO  L751         BuchiCegarLoop]: Abstraction has 4934 states and 5819 transitions.
[2020-11-25 08:39:51,313 INFO  L631         BuchiCegarLoop]: Abstraction has 4934 states and 5819 transitions.
[2020-11-25 08:39:51,313 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:39:51,313 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4934 states and 5819 transitions.
[2020-11-25 08:39:51,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:51,320 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:51,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:51,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:51,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND FALSE  !(DType[this] == VIToken)
[L5320]  COND TRUE   DType[this] == ERC20Capped
[L5321]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5321]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5322]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:51,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:51,327 INFO  L82        PathProgramCache]: Analyzing trace with hash 665827040, now seen corresponding path program 1 times
[2020-11-25 08:39:51,328 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:51,346 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:51,544 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:39:51,544 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:51,544 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:51,545 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:51,545 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:51,545 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:51,545 INFO  L87              Difference]: Start difference. First operand 4934 states and 5819 transitions. cyclomatic complexity: 887 Second operand 3 states.
[2020-11-25 08:39:51,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:51,595 INFO  L93              Difference]: Finished difference Result 4948 states and 5838 transitions.
[2020-11-25 08:39:51,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:51,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4948 states and 5838 transitions.
[2020-11-25 08:39:51,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:51,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4948 states to 4948 states and 5838 transitions.
[2020-11-25 08:39:51,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 08:39:51,618 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 08:39:51,618 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4948 states and 5838 transitions.
[2020-11-25 08:39:51,622 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:51,622 INFO  L728         BuchiCegarLoop]: Abstraction has 4948 states and 5838 transitions.
[2020-11-25 08:39:51,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4948 states and 5838 transitions.
[2020-11-25 08:39:51,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4948 to 4944.
[2020-11-25 08:39:51,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4944 states.
[2020-11-25 08:39:51,677 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4944 states to 4944 states and 5831 transitions.
[2020-11-25 08:39:51,677 INFO  L751         BuchiCegarLoop]: Abstraction has 4944 states and 5831 transitions.
[2020-11-25 08:39:51,677 INFO  L631         BuchiCegarLoop]: Abstraction has 4944 states and 5831 transitions.
[2020-11-25 08:39:51,677 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:39:51,678 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4944 states and 5831 transitions.
[2020-11-25 08:39:51,686 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:51,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:51,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:51,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:51,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND TRUE   choice == 18
[L8129]              gas := gas - 21000;
[L8130]  COND FALSE  !(gas >= 0)
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:51,693 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:51,693 INFO  L82        PathProgramCache]: Analyzing trace with hash -681708754, now seen corresponding path program 1 times
[2020-11-25 08:39:51,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:51,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:51,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:51,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:51,958 INFO  L82        PathProgramCache]: Analyzing trace with hash -1814326086, now seen corresponding path program 1 times
[2020-11-25 08:39:51,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:51,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:51,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:39:51,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:51,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:39:51,970 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 08:39:51,970 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:39:51,970 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:39:51,970 INFO  L87              Difference]: Start difference. First operand 4944 states and 5831 transitions. cyclomatic complexity: 889 Second operand 4 states.
[2020-11-25 08:39:52,404 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:52,404 INFO  L93              Difference]: Finished difference Result 5211 states and 6064 transitions.
[2020-11-25 08:39:52,404 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:39:52,404 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5211 states and 6064 transitions.
[2020-11-25 08:39:52,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:39:52,431 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5211 states to 5211 states and 6064 transitions.
[2020-11-25 08:39:52,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1162
[2020-11-25 08:39:52,432 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1162
[2020-11-25 08:39:52,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5211 states and 6064 transitions.
[2020-11-25 08:39:52,435 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:52,435 INFO  L728         BuchiCegarLoop]: Abstraction has 5211 states and 6064 transitions.
[2020-11-25 08:39:52,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5211 states and 6064 transitions.
[2020-11-25 08:39:52,463 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5211 to 4843.
[2020-11-25 08:39:52,463 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4843 states.
[2020-11-25 08:39:52,468 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4843 states to 4843 states and 5657 transitions.
[2020-11-25 08:39:52,468 INFO  L751         BuchiCegarLoop]: Abstraction has 4843 states and 5657 transitions.
[2020-11-25 08:39:52,468 INFO  L631         BuchiCegarLoop]: Abstraction has 4843 states and 5657 transitions.
[2020-11-25 08:39:52,468 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:39:52,468 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4843 states and 5657 transitions.
[2020-11-25 08:39:52,476 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:52,476 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:52,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:52,477 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:52,477 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_ERC200 := false;
[L3]                 call_transferFrom_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8250]              assume null == 0;
[L8251]  CALL        call this := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L8251]  RET         call this := FreshRefGenerator__success();
[L8252]              assume now >= 0;
[L8253]              assume DType[this] == VIToken;
[L8254]              assume msgvalue_MSG == 0;
[L8255]              gas := gas - 53000;
[L8256]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8257]              assume !revert && gas >= 0;
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

Loop:
[L8260]  CALL        call CorralChoice_VIToken(this);
[L8069]              havoc msgsender_MSG;
[L8070]              havoc msgvalue_MSG;
[L8071]              havoc choice;
[L8072]              havoc __ret_0_totalSupply;
[L8073]              havoc account_s317;
[L8074]              havoc __ret_0_balanceOf;
[L8075]              havoc recipient_s336;
[L8076]              havoc amount_s336;
[L8077]              havoc __ret_0_transfer;
[L8078]              havoc owner_s352;
[L8079]              havoc spender_s352;
[L8080]              havoc __ret_0_allowance;
[L8081]              havoc spender_s371;
[L8082]              havoc amount_s371;
[L8083]              havoc __ret_0_approve;
[L8084]              havoc sender_s407;
[L8085]              havoc recipient_s407;
[L8086]              havoc amount_s407;
[L8087]              havoc __ret_0_transferFrom;
[L8088]              havoc name_s99;
[L8089]              havoc symbol_s99;
[L8090]              havoc decimals_s99;
[L8091]              havoc __ret_0_name;
[L8092]              havoc __ret_0_symbol;
[L8093]              havoc __ret_0_decimals;
[L8094]              havoc spender_s434;
[L8095]              havoc addedValue_s434;
[L8096]              havoc __ret_0_increaseAllowance;
[L8097]              havoc spender_s462;
[L8098]              havoc subtractedValue_s462;
[L8099]              havoc __ret_0_decreaseAllowance;
[L8100]              havoc account_s809;
[L8101]              havoc __ret_0_isMinter;
[L8102]              havoc account_s821;
[L8103]              havoc account_s887;
[L8104]              havoc amount_s887;
[L8105]              havoc __ret_0_mint;
[L8106]              havoc cap_s910;
[L8107]              havoc __ret_0_cap;
[L8108]              havoc __ret_0_DECIMALS;
[L8109]              havoc __ret_0_INITIAL_SUPPLY;
[L8110]              havoc tmpNow;
[L8111]              havoc gas;
[L8112]              assume gas > 4000000 && gas <= 8000000;
[L8113]              tmpNow := now;
[L8114]              havoc now;
[L8115]              assume now > tmpNow;
[L8116]              assume msgsender_MSG != null;
[L8117]              assume DType[msgsender_MSG] != IERC20;
[L8118]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8119]              assume DType[msgsender_MSG] != Context;
[L8120]              assume DType[msgsender_MSG] != SafeMath;
[L8121]              assume DType[msgsender_MSG] != ERC20;
[L8122]              assume DType[msgsender_MSG] != Roles;
[L8123]              assume DType[msgsender_MSG] != MinterRole;
[L8124]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8125]              assume DType[msgsender_MSG] != ERC20Capped;
[L8126]              assume DType[msgsender_MSG] != VIToken;
[L8127]              Alloc[msgsender_MSG] := true;
[L8128]  COND FALSE  !(choice == 18)
[L8134]  COND FALSE  !(choice == 17)
[L8140]  COND FALSE  !(choice == 16)
[L8147]  COND FALSE  !(choice == 15)
[L8153]  COND FALSE  !(choice == 14)
[L8160]  COND TRUE   choice == 13
[L8161]              gas := gas - 21000;
[L8162]  COND TRUE   gas >= 0
[L8163]              assume amount_s407 >= 0 && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8164]              assume msgvalue_MSG == 0;
[L8165]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_ERC200 := true;
[L3]                 call_transferFrom_ERC200 := false;
[L3]                 revert := revert_hold;
[L976]               havoc __exception;
[L977]               revert := false;
[L978]   COND TRUE   __exception
[L979]               __tmp__Balance := Balance;
[L980]               __tmp__DType := DType;
[L981]               __tmp__Alloc := Alloc;
[L982]               __tmp__balance_ADDR := balance_ADDR;
[L983]               __tmp__M_Ref_int := M_Ref_int;
[L984]               __tmp__sum__balances0 := sum__balances0;
[L985]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]               __tmp__sum__allowances1 := sum__allowances1;
[L988]               __tmp__M_Ref_bool := M_Ref_bool;
[L989]               __tmp__sum := sum;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]               __tmp___balances_ERC20 := _balances_ERC20;
[L996]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]               __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE   __tmp__DType[this] == VIToken
[L3608]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]              __var_12 := null;
[L4147]  COND TRUE   !(sender_s519 != null)
[L4148]              revert := true;
[L3608]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE   revert
[L1003]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]              assume revert || gas < 0;
[L8165]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L8260]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:52,483 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:52,483 INFO  L82        PathProgramCache]: Analyzing trace with hash -681708754, now seen corresponding path program 2 times
[2020-11-25 08:39:52,484 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:52,512 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:52,547 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:52,648 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:52,648 INFO  L82        PathProgramCache]: Analyzing trace with hash 1766428231, now seen corresponding path program 1 times
[2020-11-25 08:39:52,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:52,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:52,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:52,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:52,667 INFO  L82        PathProgramCache]: Analyzing trace with hash -1224232588, now seen corresponding path program 1 times
[2020-11-25 08:39:52,667 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:52,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:39:52,731 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:39:53,019 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 165
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 08:39:53,191 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 117
[2020-11-25 08:39:53,371 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 292
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
[2020-11-25 08:39:54,068 WARN  L188               SmtUtils]: Spent 682.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 238
[2020-11-25 08:39:54,995 WARN  L188               SmtUtils]: Spent 923.00 ms on a formula simplification. DAG size of input: 311 DAG size of output: 292
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 08:39:55,267 WARN  L188               SmtUtils]: Spent 237.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 175
[2020-11-25 08:39:55,514 WARN  L188               SmtUtils]: Spent 244.00 ms on a formula simplification that was a NOOP. DAG size: 353
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 08:39:55,977 WARN  L188               SmtUtils]: Spent 454.00 ms on a formula simplification. DAG size of input: 282 DAG size of output: 282
[2020-11-25 08:39:56,207 WARN  L188               SmtUtils]: Spent 227.00 ms on a formula simplification that was a NOOP. DAG size: 282
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4943 to 9883
[2020-11-25 08:39:56,587 WARN  L188               SmtUtils]: Spent 362.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 194
[2020-11-25 08:39:56,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 08:39:57,479 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:39:57,927 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 100 DAG size of output: 96
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 08:39:59,138 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 414 DAG size of output: 388
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 08:39:59,316 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 224
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:39:59,561 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 196
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 08:39:59,807 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 347
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 08:39:59,976 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 08:40:00,818 WARN  L188               SmtUtils]: Spent 552.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 237
[2020-11-25 08:40:01,580 WARN  L188               SmtUtils]: Spent 760.00 ms on a formula simplification. DAG size of input: 309 DAG size of output: 291
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 08:40:01,857 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 175
[2020-11-25 08:40:02,062 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification that was a NOOP. DAG size: 353
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17419 to 34819
[2020-11-25 08:40:02,574 WARN  L188               SmtUtils]: Spent 503.00 ms on a formula simplification. DAG size of input: 282 DAG size of output: 282
[2020-11-25 08:40:04,628 WARN  L188               SmtUtils]: Spent 2.05 s on a formula simplification. DAG size of input: 568 DAG size of output: 556
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5281 to 10559
[2020-11-25 08:40:05,253 WARN  L188               SmtUtils]: Spent 603.00 ms on a formula simplification. DAG size of input: 279 DAG size of output: 272
[2020-11-25 08:40:05,756 WARN  L188               SmtUtils]: Spent 481.00 ms on a formula simplification that was a NOOP. DAG size: 396
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 08:40:06,453 WARN  L188               SmtUtils]: Spent 686.00 ms on a formula simplification. DAG size of input: 272 DAG size of output: 272
[2020-11-25 08:40:07,345 WARN  L188               SmtUtils]: Spent 890.00 ms on a formula simplification. DAG size of input: 398 DAG size of output: 397
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 16103 to 32203
[2020-11-25 08:40:08,443 WARN  L188               SmtUtils]: Spent 1.09 s on a formula simplification. DAG size of input: 392 DAG size of output: 392
[2020-11-25 08:40:08,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:40:08,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:40:08,506 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:40:08 BasicIcfg
[2020-11-25 08:40:08,506 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:40:08,506 INFO  L168              Benchmark]: Toolchain (without parser) took 25581.02 ms. Allocated memory was 1.0 GB in the beginning and 3.2 GB in the end (delta: 2.1 GB). Free memory was 929.8 MB in the beginning and 1.9 GB in the end (delta: -963.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,507 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,507 INFO  L168              Benchmark]: Boogie Preprocessor took 143.26 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,507 INFO  L168              Benchmark]: UtopiaSpecLang took 81.58 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,508 INFO  L168              Benchmark]: Boogie Printer took 29.31 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,508 INFO  L168              Benchmark]: RCFGBuilder took 1202.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 892.2 MB in the beginning and 913.7 MB in the end (delta: -21.4 MB). Peak memory consumption was 180.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,508 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.11 ms. Allocated memory is still 1.1 GB. Free memory was 913.7 MB in the beginning and 910.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,509 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2465.18 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 189.3 MB). Free memory was 910.2 MB in the beginning and 981.3 MB in the end (delta: -71.2 MB). Peak memory consumption was 482.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,509 INFO  L168              Benchmark]: BlockEncodingV2 took 213.28 ms. Allocated memory is still 1.3 GB. Free memory was 981.3 MB in the beginning and 862.8 MB in the end (delta: 118.6 MB). Peak memory consumption was 118.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,509 INFO  L168              Benchmark]: BuchiAutomizer took 21401.06 ms. Allocated memory was 1.3 GB in the beginning and 3.2 GB in the end (delta: 1.9 GB). Free memory was 862.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-25 08:40:08,513 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8164 locations, 15606 edges
  - StatisticsResult: Encoded RCFG
    7996 locations, 15137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 143.26 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 81.58 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.31 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1202.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 892.2 MB in the beginning and 913.7 MB in the end (delta: -21.4 MB). Peak memory consumption was 180.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.11 ms. Allocated memory is still 1.1 GB. Free memory was 913.7 MB in the beginning and 910.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2465.18 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 189.3 MB). Free memory was 910.2 MB in the beginning and 981.3 MB in the end (delta: -71.2 MB). Peak memory consumption was 482.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 213.28 ms. Allocated memory is still 1.3 GB. Free memory was 981.3 MB in the beginning and 862.8 MB in the end (delta: 118.6 MB). Peak memory consumption was 118.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 21401.06 ms. Allocated memory was 1.3 GB in the beginning and 3.2 GB in the end (delta: 1.9 GB). Free memory was 862.8 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3086 locations, 4751 edges
  - StatisticsResult: BuchiProgram size
    8164 locations, 15606 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.8 modules have a trivial ranking function, the largest among these consists of 4 locations. The remainder module has 4843 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 21.3s and 9 iterations.  TraceHistogramMax:12. Analysis of lassos took 18.2s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 8 MinimizatonAttempts, 1550 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5460 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 48256 SDtfs, 18851 SDslu, 42772 SDs, 0 SdLazy, 6893 SolverSat, 4080 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1862846579) = (new VIToken)({from : 1862846583});
[L1863]              havoc __exception;
[L1864]              revert := false;
[L1865]  COND FALSE  !(__exception)
[L1893]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5410]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5411]  COND FALSE  !(revert)
[L5414]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5414]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5415]  COND FALSE  !(revert)
[L5418]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3050]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3050]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3051]  COND FALSE  !(revert)
[L3054]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3025]              assume msgsender_MSG != null;
[L3026]              Balance[this] := 0;
[L3027]              _name_ERC20Detailed[this] := 890295274;
[L3028]              _symbol_ERC20Detailed[this] := 890295274;
[L3029]              _decimals_ERC20Detailed[this] := 0;
[L3031]              _name_ERC20Detailed[this] := name_s99;
[L3032]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3033]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3054]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3055]  COND FALSE  !(revert)
[L5418]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5419]  COND FALSE  !(revert)
[L5422]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5422]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5423]  COND FALSE  !(revert)
[L5426]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5426]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5427]  COND FALSE  !(revert)
[L5430]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5430]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5431]  COND FALSE  !(revert)
[L5434]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5210]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5210]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]  COND FALSE  !(revert)
[L5214]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5214]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]  COND FALSE  !(revert)
[L5218]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5218]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]  COND FALSE  !(revert)
[L5222]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5222]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5223]  COND FALSE  !(revert)
[L5226]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L5074]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5075]  COND FALSE  !(revert)
[L5078]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L5078]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L3340]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3341]  COND FALSE  !(revert)
[L3344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L3002]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3003]  COND FALSE  !(revert)
[L3344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3345]  COND FALSE  !(revert)
[L3348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3312]              assume msgsender_MSG != null;
[L3313]              Balance[this] := 0;
[L3314]              _balances_ERC20[this] := zeroRefintArr();
[L3315]              sum__balances0[this] := 0;
[L3316]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3317]              sum__allowances1[this] := 0;
[L3318]              _totalSupply_ERC20[this] := 0;
[L3348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3349]  COND FALSE  !(revert)
[L5082]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3107]              assume msgsender_MSG != null;
[L3108]              Balance[this] := 0;
[L3122]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4802]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4803]  COND FALSE  !(revert)
[L4806]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]              assume msgsender_MSG != null;
[L4728]              Balance[this] := 0;
[L4730]  CALL        call __var_31 := FreshRefGenerator__success();
[L2960]              havoc newRef;
[L2961]              assume Alloc[newRef] == false;
[L2962]              Alloc[newRef] := true;
[L2963]              assume newRef != null;
[L4730]  RET         call __var_31 := FreshRefGenerator__success();
[L4731]  COND FALSE  !(revert)
[L4734]              _minters_MinterRole[this] := __var_31;
[L4736]  COND TRUE   DType[this] == VIToken
[L4737]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]              __ret_0_ := msgsender_MSG;
[L4737]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4738]  COND FALSE  !(revert)
[L4759]  COND TRUE   DType[this] == VIToken
[L4760]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5008]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4597]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4651]              __var_29 := null;
[L4652]  COND FALSE  !(!(account_s758 != null))
[L4656]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4597]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4598]  COND FALSE  !(revert)
[L4601]  COND FALSE  !(!!__var_27)
[L4605]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5008]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5009]  COND FALSE  !(revert)
[L5012]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4760]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4761]  COND FALSE  !(revert)
[L4806]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4807]  COND FALSE  !(revert)
[L5086]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              Balance[this] := 0;
[L5090]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5226]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5169]              assume msgsender_MSG != null;
[L5170]              Balance[this] := 0;
[L5171]              _cap_ERC20Capped[this] := 0;
[L5173]  COND FALSE  !(!(cap_s910 > 0))
[L5177]              _cap_ERC20Capped[this] := cap_s910;
[L5230]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5231]  COND FALSE  !(revert)
[L5434]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5435]  COND FALSE  !(revert)
[L5438]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              Balance[this] := 0;
[L5356]              DECIMALS_VIToken[this] := 18;
[L5357]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5358]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5360]  COND TRUE   DType[this] == VIToken
[L5361]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5294]  COND TRUE   DType[this] == VIToken
[L5295]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]              __ret_0_ := _totalSupply_ERC20[this];
[L5295]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5296]  COND FALSE  !(revert)
[L5307]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L5307]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5308]  COND FALSE  !(revert)
[L5311]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5315]  COND TRUE   DType[this] == VIToken
[L5316]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4234]              __var_16 := null;
[L4235]  COND FALSE  !(!(account_s562 != null))
[L4239]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4239]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4240]  COND FALSE  !(revert)
[L4243]              _totalSupply_ERC20[this] := __var_17;
[L4244]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3187]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3188]  COND FALSE  !(!(c_s165 >= a_s165))
[L3192]              __ret_0_ := c_s165;
[L4244]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4245]  COND FALSE  !(revert)
[L4248]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4249]              _balances_ERC20[this][account_s562] := __var_18;
[L4250]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4251]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5316]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5317]  COND FALSE  !(revert)
[L5361]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5362]  COND FALSE  !(revert)
[L5438]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5439]  COND FALSE  !(revert)
[L1893]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1894]              assume !revert && gas >= 0;
[L8256]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
ERC20(1862846579).transferFrom~address~address~uint256.gas(3979002)({from : 1862846553, sender : 0, recipient : 0, amount : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_ERC200 := true;
[L3]                call_transferFrom_ERC200 := false;
[L3]                revert := revert_hold;
[L976]              havoc __exception;
[L977]              revert := false;
[L978]   COND TRUE  __exception
[L979]              __tmp__Balance := Balance;
[L980]              __tmp__DType := DType;
[L981]              __tmp__Alloc := Alloc;
[L982]              __tmp__balance_ADDR := balance_ADDR;
[L983]              __tmp__M_Ref_int := M_Ref_int;
[L984]              __tmp__sum__balances0 := sum__balances0;
[L985]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]              __tmp__sum__allowances1 := sum__allowances1;
[L988]              __tmp__M_Ref_bool := M_Ref_bool;
[L989]              __tmp__sum := sum;
[L990]              __tmp__Length := Length;
[L991]              __tmp__now := now;
[L992]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]              __tmp___balances_ERC20 := _balances_ERC20;
[L996]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]             __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]             __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]             __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL       call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE  __tmp__DType[this] == VIToken
[L3608]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]             __var_12 := null;
[L4147]  COND TRUE  !(sender_s519 != null)
[L4148]             revert := true;
[L3608]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE  revert
[L1003]  RET        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]             assume revert || gas < 0;
[L8165]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);

Loop:
ERC20(1862846579).transferFrom~address~address~uint256.gas(3979001)({from : 1862846584, sender : 0, recipient : 0, amount : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != sender_s407 || p2 != msgsender_MSG) && sender_s407 == recipient_s407) && amount_s407 <= _balances_ERC20[this][sender_s407]) && amount_s407 <= _allowances_ERC20[this][sender_s407][msgsender_MSG]) && amount_s407 >= 0) && amount_s407 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s407] >= 0) && _balances_ERC20[this][recipient_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s407] >= 0) && _balances_ERC20[this][sender_s407] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s407][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s407][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_ERC200 := true;
[L3]                call_transferFrom_ERC200 := false;
[L3]                revert := revert_hold;
[L976]              havoc __exception;
[L977]              revert := false;
[L978]   COND TRUE  __exception
[L979]              __tmp__Balance := Balance;
[L980]              __tmp__DType := DType;
[L981]              __tmp__Alloc := Alloc;
[L982]              __tmp__balance_ADDR := balance_ADDR;
[L983]              __tmp__M_Ref_int := M_Ref_int;
[L984]              __tmp__sum__balances0 := sum__balances0;
[L985]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L986]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L987]              __tmp__sum__allowances1 := sum__allowances1;
[L988]              __tmp__M_Ref_bool := M_Ref_bool;
[L989]              __tmp__sum := sum;
[L990]              __tmp__Length := Length;
[L991]              __tmp__now := now;
[L992]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L993]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L994]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L995]              __tmp___balances_ERC20 := _balances_ERC20;
[L996]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L997]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L998]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L999]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1000]             __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1001]             __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L1002]             __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L1003]  CALL       call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3607]  COND TRUE  __tmp__DType[this] == VIToken
[L3608]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L4146]             __var_12 := null;
[L4147]  COND TRUE  !(sender_s519 != null)
[L4148]             revert := true;
[L3608]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L3609]  COND TRUE  revert
[L1003]  RET        call __ret_0_ := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);
[L1004]             assume revert || gas < 0;
[L8165]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s407, recipient_s407, amount_s407);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
