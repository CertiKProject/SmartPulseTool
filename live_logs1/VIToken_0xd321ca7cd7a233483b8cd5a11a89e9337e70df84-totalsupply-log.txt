This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:35:32,002 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:35:32,003 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:35:32,017 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:35:32,018 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:35:32,018 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:35:32,019 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:35:32,021 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:35:32,022 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:35:32,023 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:35:32,024 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:35:32,024 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:35:32,025 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:35:32,026 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:35:32,027 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:35:32,028 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:35:32,028 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:35:32,030 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:35:32,031 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:35:32,032 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:35:32,033 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:35:32,034 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:35:32,035 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:35:32,036 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:35:32,036 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:35:32,036 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:35:32,037 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:35:32,037 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:35:32,037 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:35:32,038 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:35:32,038 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:35:32,039 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:35:32,039 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:35:32,040 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:35:32,040 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:35:32,041 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:35:32,041 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:35:32,041 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:35:32,041 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:35:32,042 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:35:32,042 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:35:32,043 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:35:32,051 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:35:32,051 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:35:32,052 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:35:32,052 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:35:32,052 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:35:32,052 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:35:32,052 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:35:32,052 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:35:32,052 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:35:32,052 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:35:32,053 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:35:32,053 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:35:32,054 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:35:32,054 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:35:32,054 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:35:32,054 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:35:32,054 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:35:32,054 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:35:32,078 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:35:32,096 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:35:32,101 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:35:32,102 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:35:32,102 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:35:32,103 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl
[2020-11-25 08:35:32,103 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl'
[2020-11-25 08:35:32,213 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:35:32,214 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:35:32,215 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:35:32,215 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:35:32,215 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:35:32,232 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,233 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,277 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,278 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,309 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,325 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,337 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,352 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:35:32,353 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:35:32,353 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:35:32,355 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:35:32,359 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/1) ...
[2020-11-25 08:35:32,381 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:32,387 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:32,394 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:32,400 INFO  L636   opiaSpecLangObserver]: Parsed ( _totalSupply_ERC20[this]>=0 && _totalSupply_ERC20[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:35:32,403 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_totalSupply_ERC20[this] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_ERC20>],ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]]
[2020-11-25 08:35:32,411 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:35:32,412 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_ERC200) ==> ( <>AP(success_totalSupply_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:35:32,428 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:32 PropertyContainer
[2020-11-25 08:35:32,429 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:35:32,429 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:35:32,429 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:35:32,429 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:35:32,430 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/2) ...
[2020-11-25 08:35:32,430 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:35:32,431 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:35:32,452 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:32" (2/2) ...
[2020-11-25 08:35:32,452 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:35:32,452 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:35:32,452 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:35:32,452 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:35:32,453 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/2) ...
[2020-11-25 08:35:32,509 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:35:32,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:35:32,509 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:35:32,509 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:35:32,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:35:32,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:35:32,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:35:32,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:35:32,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,512 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:35:32,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:35:32,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:35:32,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:35:32,513 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:35:32,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:35:32,514 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:32,514 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:32,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:35:32,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:35:32,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:35:32,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:35:32,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:35:32,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:35:32,516 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:35:32,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:35:32,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:35:32,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:35:32,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:35:32,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:35:32,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:35:32,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:35:32,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:35:32,518 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:35:32,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:35:32,519 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:35:32,520 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:35:32,521 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:35:32,522 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,523 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:35:32,524 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:32,525 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:35:32,526 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:35:32,527 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:35:32,528 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:35:32,529 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:35:32,530 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:35:32,530 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:35:32,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:35:32,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:35:32,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:35:32,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:32,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:35:32,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:35:32,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:35:32,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:35:32,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:35:32,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:35:32,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:35:32,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:35:32,542 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:35:32,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:35:32,842 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:32,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:32,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:35:33,652 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:35:33,652 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:35:33,655 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:33 BoogieIcfgContainer
[2020-11-25 08:35:33,655 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:32" (2/2) ...
[2020-11-25 08:35:33,655 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:35:33,655 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@68b11dd5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:33, skipping insertion in model container
[2020-11-25 08:35:33,655 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:35:33,656 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:35:33,656 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:35:33,657 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:35:33,657 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/3) ...
[2020-11-25 08:35:33,657 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3863d07a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:33, skipping insertion in model container
[2020-11-25 08:35:33,658 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:32" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:35:33,693 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:33 NWAContainer
[2020-11-25 08:35:33,693 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:35:33,693 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:35:33,693 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:35:33,694 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:35:33,695 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:33" (3/4) ...
[2020-11-25 08:35:33,695 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6ee9d5d4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:33, skipping insertion in model container
[2020-11-25 08:35:33,695 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:33" (4/4) ...
[2020-11-25 08:35:33,698 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:35:33,704 INFO  L110   BuchiProductObserver]: Initial RCFG 3084 locations, 4749 edges
[2020-11-25 08:35:33,704 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:35:33,717 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:35:36,225 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:35:36,236 INFO  L110   BuchiProductObserver]: BuchiProgram size 8160 locations, 15600 edges
[2020-11-25 08:35:36,236 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:36 BoogieIcfgContainer
[2020-11-25 08:35:36,236 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:35:36,236 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:35:36,237 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:35:36,238 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:35:36,238 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:36" (1/1) ...
[2020-11-25 08:35:36,384 INFO  L313           BlockEncoder]: Initial Icfg 8160 locations, 15600 edges
[2020-11-25 08:35:36,384 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:35:36,385 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:35:36,385 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:35:36,386 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:35:36,401 INFO  L70    emoveInfeasibleEdges]: Removed 252 edges and 23 locations because of local infeasibility
[2020-11-25 08:35:36,416 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:35:36,432 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:35:36,436 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:35:36,441 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:35:36,442 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:35:36,446 INFO  L313           BlockEncoder]: Encoded RCFG 7992 locations, 15131 edges
[2020-11-25 08:35:36,447 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:35:36 BasicIcfg
[2020-11-25 08:35:36,447 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:35:36,447 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:35:36,447 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:35:36,449 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:35:36,449 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,449 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:35:32" (1/6) ...
[2020-11-25 08:35:36,450 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@70953a94 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:36, skipping insertion in model container
[2020-11-25 08:35:36,450 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,450 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:35:32" (2/6) ...
[2020-11-25 08:35:36,451 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@70953a94 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:36, skipping insertion in model container
[2020-11-25 08:35:36,451 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,451 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:35:33" (3/6) ...
[2020-11-25 08:35:36,452 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@70953a94 and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:35:36, skipping insertion in model container
[2020-11-25 08:35:36,452 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,452 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:35:33" (4/6) ...
[2020-11-25 08:35:36,452 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@70953a94 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:35:36, skipping insertion in model container
[2020-11-25 08:35:36,452 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,452 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:35:36" (5/6) ...
[2020-11-25 08:35:36,452 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@70953a94 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:35:36, skipping insertion in model container
[2020-11-25 08:35:36,453 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:35:36,453 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:35:36" (6/6) ...
[2020-11-25 08:35:36,454 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_totalsupply.bpl_BEv2
[2020-11-25 08:35:36,486 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:35:36,487 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:35:36,487 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:35:36,487 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:35:36,487 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:35:36,487 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:35:36,487 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:35:36,487 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:35:36,487 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:35:36,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:35:36,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:36,600 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:36,600 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:36,607 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:36,607 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:36,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:35:36,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7992 states.
[2020-11-25 08:35:36,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:36,635 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:36,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:36,637 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:36,637 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:36,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:36,650 INFO  L82        PathProgramCache]: Analyzing trace with hash -1364847003, now seen corresponding path program 1 times
[2020-11-25 08:35:36,654 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:36,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:36,707 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:35:36,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:36,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:35:37,112 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:37,121 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:35:37,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:35:37,122 INFO  L87              Difference]: Start difference. First operand 7992 states. Second operand 4 states.
[2020-11-25 08:35:37,981 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:37,981 INFO  L93              Difference]: Finished difference Result 4692 states and 5966 transitions.
[2020-11-25 08:35:37,981 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:35:37,982 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:38,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:38,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:35:38,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:35:38,046 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 876
[2020-11-25 08:35:38,046 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:38,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:38,058 INFO  L728         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:38,077 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:38,147 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4692 to 4692.
[2020-11-25 08:35:38,147 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4692 states.
[2020-11-25 08:35:38,156 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4692 states to 4692 states and 5966 transitions.
[2020-11-25 08:35:38,157 INFO  L751         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:38,157 INFO  L631         BuchiCegarLoop]: Abstraction has 4692 states and 5966 transitions.
[2020-11-25 08:35:38,157 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:35:38,157 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4692 states and 5966 transitions.
[2020-11-25 08:35:38,167 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:38,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:38,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:38,169 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:38,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:38,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:38,173 INFO  L82        PathProgramCache]: Analyzing trace with hash -2062617901, now seen corresponding path program 1 times
[2020-11-25 08:35:38,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:38,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:38,203 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:35:38,204 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:38,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:35:38,205 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:38,205 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:38,205 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:38,205 INFO  L87              Difference]: Start difference. First operand 4692 states and 5966 transitions. cyclomatic complexity: 1276 Second operand 3 states.
[2020-11-25 08:35:38,349 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:38,349 INFO  L93              Difference]: Finished difference Result 5966 states and 7353 transitions.
[2020-11-25 08:35:38,349 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:38,350 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5966 states and 7353 transitions.
[2020-11-25 08:35:38,366 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:38,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5966 states to 5966 states and 7353 transitions.
[2020-11-25 08:35:38,394 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1236
[2020-11-25 08:35:38,395 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1236
[2020-11-25 08:35:38,395 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5966 states and 7353 transitions.
[2020-11-25 08:35:38,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:38,409 INFO  L728         BuchiCegarLoop]: Abstraction has 5966 states and 7353 transitions.
[2020-11-25 08:35:38,416 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5966 states and 7353 transitions.
[2020-11-25 08:35:38,488 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5966 to 5330.
[2020-11-25 08:35:38,488 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5330 states.
[2020-11-25 08:35:38,497 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5330 states to 5330 states and 6579 transitions.
[2020-11-25 08:35:38,497 INFO  L751         BuchiCegarLoop]: Abstraction has 5330 states and 6579 transitions.
[2020-11-25 08:35:38,497 INFO  L631         BuchiCegarLoop]: Abstraction has 5330 states and 6579 transitions.
[2020-11-25 08:35:38,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:35:38,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5330 states and 6579 transitions.
[2020-11-25 08:35:38,507 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:38,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:38,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:38,511 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:38,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND TRUE   DType[this] == ERC20Mintable
[L4769]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4769]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4770]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:38,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:38,517 INFO  L82        PathProgramCache]: Analyzing trace with hash 947545126, now seen corresponding path program 1 times
[2020-11-25 08:35:38,518 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:38,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:38,587 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:35:38,587 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:38,587 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:35:38,588 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:38,588 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:38,588 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:38,588 INFO  L87              Difference]: Start difference. First operand 5330 states and 6579 transitions. cyclomatic complexity: 1251 Second operand 3 states.
[2020-11-25 08:35:38,668 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:38,668 INFO  L93              Difference]: Finished difference Result 5335 states and 6584 transitions.
[2020-11-25 08:35:38,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:38,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5335 states and 6584 transitions.
[2020-11-25 08:35:38,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:38,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5335 states to 5335 states and 6584 transitions.
[2020-11-25 08:35:38,706 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1068
[2020-11-25 08:35:38,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1068
[2020-11-25 08:35:38,707 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5335 states and 6584 transitions.
[2020-11-25 08:35:38,713 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:38,713 INFO  L728         BuchiCegarLoop]: Abstraction has 5335 states and 6584 transitions.
[2020-11-25 08:35:38,718 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5335 states and 6584 transitions.
[2020-11-25 08:35:38,791 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5335 to 5331.
[2020-11-25 08:35:38,791 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5331 states.
[2020-11-25 08:35:38,798 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5331 states to 5331 states and 6580 transitions.
[2020-11-25 08:35:38,798 INFO  L751         BuchiCegarLoop]: Abstraction has 5331 states and 6580 transitions.
[2020-11-25 08:35:38,798 INFO  L631         BuchiCegarLoop]: Abstraction has 5331 states and 6580 transitions.
[2020-11-25 08:35:38,798 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:35:38,798 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5331 states and 6580 transitions.
[2020-11-25 08:35:38,805 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:38,805 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:38,805 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:38,806 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:38,806 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:38,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:38,816 INFO  L82        PathProgramCache]: Analyzing trace with hash -905548809, now seen corresponding path program 1 times
[2020-11-25 08:35:38,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:38,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:38,876 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 08:35:38,876 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:35:38,876 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 08:35:38,876 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:38,876 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:35:38,877 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:35:38,877 INFO  L87              Difference]: Start difference. First operand 5331 states and 6580 transitions. cyclomatic complexity: 1251 Second operand 12 states.
[2020-11-25 08:35:39,085 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:39,085 INFO  L93              Difference]: Finished difference Result 5391 states and 6671 transitions.
[2020-11-25 08:35:39,085 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 08:35:39,085 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5391 states and 6671 transitions.
[2020-11-25 08:35:39,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:39,112 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5391 states to 5391 states and 6671 transitions.
[2020-11-25 08:35:39,112 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1084
[2020-11-25 08:35:39,112 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1084
[2020-11-25 08:35:39,113 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5391 states and 6671 transitions.
[2020-11-25 08:35:39,117 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:39,117 INFO  L728         BuchiCegarLoop]: Abstraction has 5391 states and 6671 transitions.
[2020-11-25 08:35:39,121 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5391 states and 6671 transitions.
[2020-11-25 08:35:39,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5391 to 5375.
[2020-11-25 08:35:39,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5375 states.
[2020-11-25 08:35:39,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5375 states to 5375 states and 6647 transitions.
[2020-11-25 08:35:39,160 INFO  L751         BuchiCegarLoop]: Abstraction has 5375 states and 6647 transitions.
[2020-11-25 08:35:39,160 INFO  L631         BuchiCegarLoop]: Abstraction has 5375 states and 6647 transitions.
[2020-11-25 08:35:39,160 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:35:39,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5375 states and 6647 transitions.
[2020-11-25 08:35:39,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:35:39,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:39,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:39,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:39,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND TRUE   !!__var_27
[L4601]              revert := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:39,172 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:39,172 INFO  L82        PathProgramCache]: Analyzing trace with hash -286311973, now seen corresponding path program 1 times
[2020-11-25 08:35:39,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:39,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:39,214 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:35:39,214 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:39,214 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:35:39,215 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:39,215 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:39,215 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:39,215 INFO  L87              Difference]: Start difference. First operand 5375 states and 6647 transitions. cyclomatic complexity: 1274 Second operand 3 states.
[2020-11-25 08:35:39,296 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:39,296 INFO  L93              Difference]: Finished difference Result 5981 states and 7098 transitions.
[2020-11-25 08:35:39,296 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:39,296 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5981 states and 7098 transitions.
[2020-11-25 08:35:39,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:39,321 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5981 states to 5499 states and 6498 transitions.
[2020-11-25 08:35:39,321 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 08:35:39,322 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-25 08:35:39,322 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5499 states and 6498 transitions.
[2020-11-25 08:35:39,326 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:39,326 INFO  L728         BuchiCegarLoop]: Abstraction has 5499 states and 6498 transitions.
[2020-11-25 08:35:39,330 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5499 states and 6498 transitions.
[2020-11-25 08:35:39,362 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5499 to 5128.
[2020-11-25 08:35:39,362 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5128 states.
[2020-11-25 08:35:39,367 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5128 states to 5128 states and 6033 transitions.
[2020-11-25 08:35:39,367 INFO  L751         BuchiCegarLoop]: Abstraction has 5128 states and 6033 transitions.
[2020-11-25 08:35:39,367 INFO  L631         BuchiCegarLoop]: Abstraction has 5128 states and 6033 transitions.
[2020-11-25 08:35:39,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:35:39,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5128 states and 6033 transitions.
[2020-11-25 08:35:39,372 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:39,372 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:39,372 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:39,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:39,377 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND FALSE  !(__exception)
[L677]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L677]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L678]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:35:39,385 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:39,385 INFO  L82        PathProgramCache]: Analyzing trace with hash 1596313510, now seen corresponding path program 1 times
[2020-11-25 08:35:39,386 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:39,426 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:39,616 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:35:39,616 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:39,617 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:35:39,617 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:39,617 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:35:39,617 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:35:39,618 INFO  L87              Difference]: Start difference. First operand 5128 states and 6033 transitions. cyclomatic complexity: 907 Second operand 4 states.
[2020-11-25 08:35:39,655 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:39,655 INFO  L93              Difference]: Finished difference Result 5129 states and 6032 transitions.
[2020-11-25 08:35:39,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:35:39,655 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5129 states and 6032 transitions.
[2020-11-25 08:35:39,665 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:39,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5129 states to 5122 states and 6024 transitions.
[2020-11-25 08:35:39,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1094
[2020-11-25 08:35:39,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1094
[2020-11-25 08:35:39,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5122 states and 6024 transitions.
[2020-11-25 08:35:39,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:39,681 INFO  L728         BuchiCegarLoop]: Abstraction has 5122 states and 6024 transitions.
[2020-11-25 08:35:39,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5122 states and 6024 transitions.
[2020-11-25 08:35:39,710 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5122 to 5120.
[2020-11-25 08:35:39,710 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5120 states.
[2020-11-25 08:35:39,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5120 states to 5120 states and 6022 transitions.
[2020-11-25 08:35:39,715 INFO  L751         BuchiCegarLoop]: Abstraction has 5120 states and 6022 transitions.
[2020-11-25 08:35:39,715 INFO  L631         BuchiCegarLoop]: Abstraction has 5120 states and 6022 transitions.
[2020-11-25 08:35:39,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:35:39,715 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5120 states and 6022 transitions.
[2020-11-25 08:35:39,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:39,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:39,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:39,722 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:39,722 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND FALSE  !(DType[this] == VIToken)
[L5319]  COND TRUE   DType[this] == ERC20Capped
[L5320]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5320]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5321]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND TRUE   __exception
[L650]               __tmp__Balance := Balance;
[L651]               __tmp__DType := DType;
[L652]               __tmp__Alloc := Alloc;
[L653]               __tmp__balance_ADDR := balance_ADDR;
[L654]               __tmp__M_Ref_int := M_Ref_int;
[L655]               __tmp__sum__balances0 := sum__balances0;
[L656]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L657]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L658]               __tmp__sum__allowances1 := sum__allowances1;
[L659]               __tmp__M_Ref_bool := M_Ref_bool;
[L660]               __tmp__sum := sum;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L664]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L665]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L666]               __tmp___balances_ERC20 := _balances_ERC20;
[L667]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L670]               __tmp___minters_MinterRole := _minters_MinterRole;
[L671]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L672]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L673]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L674]   CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L674]   RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L675]               assume revert || gas < 0;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL       call CorralChoice_VIToken(this);
[L8068]             havoc msgsender_MSG;
[L8069]             havoc msgvalue_MSG;
[L8070]             havoc choice;
[L8071]             havoc __ret_0_totalSupply;
[L8072]             havoc account_s317;
[L8073]             havoc __ret_0_balanceOf;
[L8074]             havoc recipient_s336;
[L8075]             havoc amount_s336;
[L8076]             havoc __ret_0_transfer;
[L8077]             havoc owner_s352;
[L8078]             havoc spender_s352;
[L8079]             havoc __ret_0_allowance;
[L8080]             havoc spender_s371;
[L8081]             havoc amount_s371;
[L8082]             havoc __ret_0_approve;
[L8083]             havoc sender_s407;
[L8084]             havoc recipient_s407;
[L8085]             havoc amount_s407;
[L8086]             havoc __ret_0_transferFrom;
[L8087]             havoc name_s99;
[L8088]             havoc symbol_s99;
[L8089]             havoc decimals_s99;
[L8090]             havoc __ret_0_name;
[L8091]             havoc __ret_0_symbol;
[L8092]             havoc __ret_0_decimals;
[L8093]             havoc spender_s434;
[L8094]             havoc addedValue_s434;
[L8095]             havoc __ret_0_increaseAllowance;
[L8096]             havoc spender_s462;
[L8097]             havoc subtractedValue_s462;
[L8098]             havoc __ret_0_decreaseAllowance;
[L8099]             havoc account_s809;
[L8100]             havoc __ret_0_isMinter;
[L8101]             havoc account_s821;
[L8102]             havoc account_s887;
[L8103]             havoc amount_s887;
[L8104]             havoc __ret_0_mint;
[L8105]             havoc cap_s910;
[L8106]             havoc __ret_0_cap;
[L8107]             havoc __ret_0_DECIMALS;
[L8108]             havoc __ret_0_INITIAL_SUPPLY;
[L8109]             havoc tmpNow;
[L8110]             havoc gas;
[L8111]             assume gas > 4000000 && gas <= 8000000;
[L8112]             tmpNow := now;
[L8113]             havoc now;
[L8114]             assume now > tmpNow;
[L8115]             assume msgsender_MSG != null;
[L8116]             assume DType[msgsender_MSG] != IERC20;
[L8117]             assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]             assume DType[msgsender_MSG] != Context;
[L8119]             assume DType[msgsender_MSG] != SafeMath;
[L8120]             assume DType[msgsender_MSG] != ERC20;
[L8121]             assume DType[msgsender_MSG] != Roles;
[L8122]             assume DType[msgsender_MSG] != MinterRole;
[L8123]             assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]             assume DType[msgsender_MSG] != ERC20Capped;
[L8125]             assume DType[msgsender_MSG] != VIToken;
[L8126]             Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE  choice == 18
[L8128]             gas := gas - 21000;
[L8129]  COND TRUE  gas >= 0
[L8130]             assume msgvalue_MSG == 0;
[L8131]  CALL       call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_ERC200 := true;
[L2]                call_totalSupply_ERC200 := false;
[L2]                revert := revert_hold;
[L647]              havoc __exception;
[L648]              revert := false;
[L649]   COND TRUE  __exception
[L650]              __tmp__Balance := Balance;
[L651]              __tmp__DType := DType;
[L652]              __tmp__Alloc := Alloc;
[L653]              __tmp__balance_ADDR := balance_ADDR;
[L654]              __tmp__M_Ref_int := M_Ref_int;
[L655]              __tmp__sum__balances0 := sum__balances0;
[L656]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L657]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L658]              __tmp__sum__allowances1 := sum__allowances1;
[L659]              __tmp__M_Ref_bool := M_Ref_bool;
[L660]              __tmp__sum := sum;
[L661]              __tmp__Length := Length;
[L662]              __tmp__now := now;
[L663]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L664]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L665]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L666]              __tmp___balances_ERC20 := _balances_ERC20;
[L667]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L668]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L670]              __tmp___minters_MinterRole := _minters_MinterRole;
[L671]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L672]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L673]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L674]   CALL       call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]             __ret_0_ := __tmp___totalSupply_ERC20[this];
[L674]   RET        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L675]              assume revert || gas < 0;
[L8131]  RET        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET        call CorralChoice_VIToken(this);

[2020-11-25 08:35:39,728 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:39,728 INFO  L82        PathProgramCache]: Analyzing trace with hash 1679081253, now seen corresponding path program 1 times
[2020-11-25 08:35:39,729 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:39,748 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:39,948 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:35:39,948 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:39,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:35:39,949 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:39,949 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:35:39,949 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:35:39,949 INFO  L87              Difference]: Start difference. First operand 5120 states and 6022 transitions. cyclomatic complexity: 904 Second operand 3 states.
[2020-11-25 08:35:39,992 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:39,992 INFO  L93              Difference]: Finished difference Result 5134 states and 6041 transitions.
[2020-11-25 08:35:39,992 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:35:39,992 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5134 states and 6041 transitions.
[2020-11-25 08:35:40,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:40,012 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5134 states to 5134 states and 6041 transitions.
[2020-11-25 08:35:40,012 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1096
[2020-11-25 08:35:40,012 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1096
[2020-11-25 08:35:40,012 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5134 states and 6041 transitions.
[2020-11-25 08:35:40,015 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:40,016 INFO  L728         BuchiCegarLoop]: Abstraction has 5134 states and 6041 transitions.
[2020-11-25 08:35:40,020 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5134 states and 6041 transitions.
[2020-11-25 08:35:40,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5134 to 5130.
[2020-11-25 08:35:40,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5130 states.
[2020-11-25 08:35:40,052 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5130 states to 5130 states and 6034 transitions.
[2020-11-25 08:35:40,052 INFO  L751         BuchiCegarLoop]: Abstraction has 5130 states and 6034 transitions.
[2020-11-25 08:35:40,052 INFO  L631         BuchiCegarLoop]: Abstraction has 5130 states and 6034 transitions.
[2020-11-25 08:35:40,052 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:35:40,052 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5130 states and 6034 transitions.
[2020-11-25 08:35:40,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:35:40,057 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:35:40,057 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:35:40,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:35:40,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_totalSupply_ERC200 := false;
[L2]                 call_totalSupply_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND TRUE   gas >= 0
[L8130]              assume msgvalue_MSG == 0;
[L8131]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_ERC200 := true;
[L2]                 call_totalSupply_ERC200 := false;
[L2]                 revert := revert_hold;
[L647]               havoc __exception;
[L648]               revert := false;
[L649]   COND TRUE   __exception
[L650]               __tmp__Balance := Balance;
[L651]               __tmp__DType := DType;
[L652]               __tmp__Alloc := Alloc;
[L653]               __tmp__balance_ADDR := balance_ADDR;
[L654]               __tmp__M_Ref_int := M_Ref_int;
[L655]               __tmp__sum__balances0 := sum__balances0;
[L656]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L657]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L658]               __tmp__sum__allowances1 := sum__allowances1;
[L659]               __tmp__M_Ref_bool := M_Ref_bool;
[L660]               __tmp__sum := sum;
[L661]               __tmp__Length := Length;
[L662]               __tmp__now := now;
[L663]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L664]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L665]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L666]               __tmp___balances_ERC20 := _balances_ERC20;
[L667]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L668]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L670]               __tmp___minters_MinterRole := _minters_MinterRole;
[L671]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L672]               __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L673]               __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L674]   CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]              __ret_0_ := __tmp___totalSupply_ERC20[this];
[L674]   RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L675]               assume revert || gas < 0;
[L8131]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL       call CorralChoice_VIToken(this);
[L8068]             havoc msgsender_MSG;
[L8069]             havoc msgvalue_MSG;
[L8070]             havoc choice;
[L8071]             havoc __ret_0_totalSupply;
[L8072]             havoc account_s317;
[L8073]             havoc __ret_0_balanceOf;
[L8074]             havoc recipient_s336;
[L8075]             havoc amount_s336;
[L8076]             havoc __ret_0_transfer;
[L8077]             havoc owner_s352;
[L8078]             havoc spender_s352;
[L8079]             havoc __ret_0_allowance;
[L8080]             havoc spender_s371;
[L8081]             havoc amount_s371;
[L8082]             havoc __ret_0_approve;
[L8083]             havoc sender_s407;
[L8084]             havoc recipient_s407;
[L8085]             havoc amount_s407;
[L8086]             havoc __ret_0_transferFrom;
[L8087]             havoc name_s99;
[L8088]             havoc symbol_s99;
[L8089]             havoc decimals_s99;
[L8090]             havoc __ret_0_name;
[L8091]             havoc __ret_0_symbol;
[L8092]             havoc __ret_0_decimals;
[L8093]             havoc spender_s434;
[L8094]             havoc addedValue_s434;
[L8095]             havoc __ret_0_increaseAllowance;
[L8096]             havoc spender_s462;
[L8097]             havoc subtractedValue_s462;
[L8098]             havoc __ret_0_decreaseAllowance;
[L8099]             havoc account_s809;
[L8100]             havoc __ret_0_isMinter;
[L8101]             havoc account_s821;
[L8102]             havoc account_s887;
[L8103]             havoc amount_s887;
[L8104]             havoc __ret_0_mint;
[L8105]             havoc cap_s910;
[L8106]             havoc __ret_0_cap;
[L8107]             havoc __ret_0_DECIMALS;
[L8108]             havoc __ret_0_INITIAL_SUPPLY;
[L8109]             havoc tmpNow;
[L8110]             havoc gas;
[L8111]             assume gas > 4000000 && gas <= 8000000;
[L8112]             tmpNow := now;
[L8113]             havoc now;
[L8114]             assume now > tmpNow;
[L8115]             assume msgsender_MSG != null;
[L8116]             assume DType[msgsender_MSG] != IERC20;
[L8117]             assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]             assume DType[msgsender_MSG] != Context;
[L8119]             assume DType[msgsender_MSG] != SafeMath;
[L8120]             assume DType[msgsender_MSG] != ERC20;
[L8121]             assume DType[msgsender_MSG] != Roles;
[L8122]             assume DType[msgsender_MSG] != MinterRole;
[L8123]             assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]             assume DType[msgsender_MSG] != ERC20Capped;
[L8125]             assume DType[msgsender_MSG] != VIToken;
[L8126]             Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE  choice == 18
[L8128]             gas := gas - 21000;
[L8129]  COND TRUE  gas >= 0
[L8130]             assume msgvalue_MSG == 0;
[L8131]  CALL       call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_totalSupply_ERC200 := true;
[L2]                call_totalSupply_ERC200 := false;
[L2]                revert := revert_hold;
[L647]              havoc __exception;
[L648]              revert := false;
[L649]   COND TRUE  __exception
[L650]              __tmp__Balance := Balance;
[L651]              __tmp__DType := DType;
[L652]              __tmp__Alloc := Alloc;
[L653]              __tmp__balance_ADDR := balance_ADDR;
[L654]              __tmp__M_Ref_int := M_Ref_int;
[L655]              __tmp__sum__balances0 := sum__balances0;
[L656]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L657]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L658]              __tmp__sum__allowances1 := sum__allowances1;
[L659]              __tmp__M_Ref_bool := M_Ref_bool;
[L660]              __tmp__sum := sum;
[L661]              __tmp__Length := Length;
[L662]              __tmp__now := now;
[L663]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L664]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L665]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L666]              __tmp___balances_ERC20 := _balances_ERC20;
[L667]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L668]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L669]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L670]              __tmp___minters_MinterRole := _minters_MinterRole;
[L671]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L672]              __tmp__DECIMALS_VIToken := DECIMALS_VIToken;
[L673]              __tmp__INITIAL_SUPPLY_VIToken := INITIAL_SUPPLY_VIToken;
[L674]   CALL       call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3355]             __ret_0_ := __tmp___totalSupply_ERC20[this];
[L674]   RET        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L675]              assume revert || gas < 0;
[L8131]  RET        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L8259]  RET        call CorralChoice_VIToken(this);

[2020-11-25 08:35:40,065 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:35:40,065 INFO  L82        PathProgramCache]: Analyzing trace with hash 1932492302, now seen corresponding path program 1 times
[2020-11-25 08:35:40,066 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:35:40,085 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:35:40,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:35:40,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:35:40,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:35:40,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:35:40,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:35:40,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:35:40,286 INFO  L87              Difference]: Start difference. First operand 5130 states and 6034 transitions. cyclomatic complexity: 906 Second operand 5 states.
[2020-11-25 08:35:40,759 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:35:40,759 INFO  L93              Difference]: Finished difference Result 3338 states and 3864 transitions.
[2020-11-25 08:35:40,759 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:35:40,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3338 states and 3864 transitions.
[2020-11-25 08:35:40,767 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:35:40,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3338 states to 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:35:40,768 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:35:40,768 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:35:40,768 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:35:40,768 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:35:40,768 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:35:40,768 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:35:40,771 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:35:40 BasicIcfg
[2020-11-25 08:35:40,772 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:35:40,772 INFO  L168              Benchmark]: Toolchain (without parser) took 8558.89 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 910.8 MB in the end (delta: 19.1 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,773 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,773 INFO  L168              Benchmark]: Boogie Preprocessor took 138.02 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,774 INFO  L168              Benchmark]: UtopiaSpecLang took 75.83 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,774 INFO  L168              Benchmark]: Boogie Printer took 23.07 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,774 INFO  L168              Benchmark]: RCFGBuilder took 1203.08 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 897.6 MB in the beginning and 901.9 MB in the end (delta: -4.3 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,774 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.53 ms. Allocated memory is still 1.1 GB. Free memory was 901.9 MB in the beginning and 898.5 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,775 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2543.09 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 195.6 MB). Free memory was 898.5 MB in the beginning and 918.9 MB in the end (delta: -20.4 MB). Peak memory consumption was 469.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,775 INFO  L168              Benchmark]: BlockEncodingV2 took 210.35 ms. Allocated memory is still 1.3 GB. Free memory was 918.9 MB in the beginning and 811.9 MB in the end (delta: 107.0 MB). Peak memory consumption was 107.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,775 INFO  L168              Benchmark]: BuchiAutomizer took 4324.61 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 874.5 MB). Free memory was 811.9 MB in the beginning and 910.8 MB in the end (delta: -98.8 MB). Peak memory consumption was 775.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:35:40,778 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8160 locations, 15600 edges
  - StatisticsResult: Encoded RCFG
    7992 locations, 15131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 138.02 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 75.83 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.07 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1203.08 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 897.6 MB in the beginning and 901.9 MB in the end (delta: -4.3 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.53 ms. Allocated memory is still 1.1 GB. Free memory was 901.9 MB in the beginning and 898.5 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2543.09 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 195.6 MB). Free memory was 898.5 MB in the beginning and 918.9 MB in the end (delta: -20.4 MB). Peak memory consumption was 469.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 210.35 ms. Allocated memory is still 1.3 GB. Free memory was 918.9 MB in the beginning and 811.9 MB in the end (delta: 107.0 MB). Peak memory consumption was 107.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4324.61 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 874.5 MB). Free memory was 811.9 MB in the beginning and 910.8 MB in the end (delta: -98.8 MB). Peak memory consumption was 775.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3084 locations, 4749 edges
  - StatisticsResult: BuchiProgram size
    8160 locations, 15600 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.2s and 9 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.3s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 7 MinimizatonAttempts, 1033 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5375 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 44082 SDtfs, 17543 SDslu, 92404 SDs, 0 SdLazy, 6901 SolverSat, 4549 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_ERC200) ==> ( <>(success_totalSupply_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
