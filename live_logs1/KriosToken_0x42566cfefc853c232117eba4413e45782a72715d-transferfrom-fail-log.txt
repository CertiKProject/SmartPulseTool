This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:33:27,754 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:33:27,756 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:33:27,767 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:33:27,767 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:33:27,768 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:33:27,769 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:33:27,770 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:33:27,772 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:33:27,772 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:33:27,773 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:33:27,773 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:33:27,774 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:33:27,775 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:33:27,776 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:33:27,777 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:33:27,777 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:33:27,778 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:33:27,780 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:33:27,781 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:33:27,781 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:33:27,782 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:33:27,784 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:33:27,784 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:33:27,784 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:33:27,785 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:33:27,785 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:33:27,786 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:33:27,786 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:33:27,786 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:33:27,786 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:33:27,787 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:33:27,787 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:33:27,788 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:33:27,789 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:33:27,789 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:33:27,789 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:33:27,790 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:33:27,790 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:33:27,791 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:33:27,791 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:33:27,791 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:33:27,804 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:33:27,805 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:33:27,806 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:33:27,807 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:33:27,807 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:33:27,807 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:33:27,807 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:33:27,808 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:33:27,808 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:33:27,808 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:33:27,808 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:33:27,809 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:33:27,809 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:33:27,809 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:33:27,810 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:33:27,810 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:33:27,810 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:33:27,810 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:33:27,811 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:33:27,811 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:33:27,811 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:33:27,811 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:33:27,812 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:33:27,812 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:33:27,812 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:33:27,812 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:33:27,835 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:33:27,849 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:33:27,852 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:33:27,853 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:33:27,854 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:33:27,854 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl
[2020-11-24 20:33:27,855 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl'
[2020-11-24 20:33:27,944 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:33:27,945 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:33:27,946 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:33:27,946 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:33:27,946 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:33:27,963 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:27,965 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:27,999 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:27,999 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:28,025 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:28,037 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:28,045 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:28,055 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:33:28,056 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:33:28,056 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:33:28,058 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:33:28,063 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/1) ...
[2020-11-24 20:33:28,090 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-24 20:33:28,097 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-24 20:33:28,105 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-24 20:33:28,113 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s381!=_to_s381 && ( ( _value_s381>balances_BasicToken[this][_from_s381] || _value_s381>allowed_StandardToken[this][_from_s381][msg.sender] ) || ( balances_BasicToken[this][_to_s381] + _value_s381 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s381>=0 ) && _value_s381<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s381]>=0 ) && balances_BasicToken[this][_to_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s381]>=0 ) && balances_BasicToken[this][_from_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s381][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s381][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IdentifierExpression[_to_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IdentifierExpression[_value_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s381,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:33:28,119 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-24 20:33:28,119 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_StandardToken0) ==> ( <>AP(fail_transferFrom_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:33:28,129 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:33:28 PropertyContainer
[2020-11-24 20:33:28,129 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:33:28,130 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:33:28,130 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:33:28,130 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:33:28,131 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/2) ...
[2020-11-24 20:33:28,131 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:33:28,131 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:33:28,146 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:33:28" (2/2) ...
[2020-11-24 20:33:28,147 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:33:28,147 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:33:28,147 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:33:28,147 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:33:28,148 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/2) ...
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:33:28,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,201 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:33:28,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:33:28,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:33:28,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:33:28,202 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic
[2020-11-24 20:33:28,203 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:33:28,204 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 20:33:28,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 20:33:28,204 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:33:28,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:33:28,204 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 20:33:28,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 20:33:28,204 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:33:28,205 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:33:28,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:33:28,205 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:33:28,205 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:33:28,206 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:33:28,206 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:33:28,206 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:33:28,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:33:28,207 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:33:28,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:33:28,207 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:33:28,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:33:28,207 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:33:28,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:33:28,208 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:33:28,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:33:28,208 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:33:28,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:33:28,209 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:33:28,209 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:33:28,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:33:28,210 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~bytes_tokenRecipient
[2020-11-24 20:33:28,210 INFO  L130     BoogieDeclarations]: Found specification of procedure KriosToken_KriosToken_NoBaseCtor__success
[2020-11-24 20:33:28,210 INFO  L130     BoogieDeclarations]: Found specification of procedure KriosToken_KriosToken
[2020-11-24 20:33:28,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure KriosToken_KriosToken
[2020-11-24 20:33:28,210 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KriosToken
[2020-11-24 20:33:28,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KriosToken
[2020-11-24 20:33:28,211 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~address~uint256_KriosToken
[2020-11-24 20:33:28,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~address~uint256_KriosToken
[2020-11-24 20:33:28,211 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KriosToken
[2020-11-24 20:33:28,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KriosToken
[2020-11-24 20:33:28,212 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KriosToken
[2020-11-24 20:33:28,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KriosToken
[2020-11-24 20:33:28,212 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KriosToken
[2020-11-24 20:33:28,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KriosToken
[2020-11-24 20:33:28,213 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KriosToken
[2020-11-24 20:33:28,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KriosToken
[2020-11-24 20:33:28,213 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:33:28,214 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:33:28,214 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:33:28,214 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:33:28,214 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:33:28,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:33:28,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:33:28,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:33:28,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 20:33:28,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 20:33:28,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 20:33:28,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 20:33:28,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KriosToken
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:33:28,217 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:33:28,218 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__success
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 20:33:28,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:33:28,220 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,221 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure KriosToken_KriosToken_NoBaseCtor__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure KriosToken_KriosToken__success
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure KriosToken_KriosToken__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KriosToken__success
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KriosToken__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~address~uint256_KriosToken__success
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~address~uint256_KriosToken__fail
[2020-11-24 20:33:28,222 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KriosToken__success
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KriosToken__fail
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KriosToken__success
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KriosToken__fail
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KriosToken__success
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KriosToken__fail
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KriosToken__success
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KriosToken__fail
[2020-11-24 20:33:28,223 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:33:28,224 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:33:28,224 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:33:28,224 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:33:28,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:33:28,225 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__fail
[2020-11-24 20:33:28,226 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20Basic__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:33:28,227 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:33:28,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure KriosToken_KriosToken_NoBaseCtor__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure KriosToken_KriosToken_NoBaseCtor__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure KriosToken_KriosToken__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure KriosToken_KriosToken__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KriosToken__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KriosToken__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~address~uint256_KriosToken__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~address~uint256_KriosToken__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KriosToken__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KriosToken__success
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KriosToken__fail
[2020-11-24 20:33:28,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KriosToken__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KriosToken__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KriosToken__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KriosToken__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KriosToken__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:33:28,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KriosToken
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:33:28,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:33:28,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:33:28,479 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:33:28,479 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:33:28,978 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:33:28,978 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 20:33:28,980 INFO  L202        PluginConnector]: Adding new model KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:33:28 BoogieIcfgContainer
[2020-11-24 20:33:28,980 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:33:28" (2/2) ...
[2020-11-24 20:33:28,980 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:33:28,980 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2e2b771b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:33:28, skipping insertion in model container
[2020-11-24 20:33:28,980 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:33:28,981 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:33:28,981 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:33:28,982 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:33:28,982 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/3) ...
[2020-11-24 20:33:28,983 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@251c8b49 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:33:28, skipping insertion in model container
[2020-11-24 20:33:28,983 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:33:28" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:33:29,019 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:33:29 NWAContainer
[2020-11-24 20:33:29,019 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:33:29,019 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:33:29,020 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:33:29,020 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:33:29,021 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:33:28" (3/4) ...
[2020-11-24 20:33:29,022 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7ab5c498 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:33:29, skipping insertion in model container
[2020-11-24 20:33:29,022 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:33:29" (4/4) ...
[2020-11-24 20:33:29,026 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:33:29,029 INFO  L110   BuchiProductObserver]: Initial RCFG 1673 locations, 2185 edges
[2020-11-24 20:33:29,030 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:33:29,041 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:33:30,551 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:33:30,557 INFO  L110   BuchiProductObserver]: BuchiProgram size 4086 locations, 7158 edges
[2020-11-24 20:33:30,557 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:33:30 BoogieIcfgContainer
[2020-11-24 20:33:30,557 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:33:30,557 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:33:30,557 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:33:30,559 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:33:30,559 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:33:30" (1/1) ...
[2020-11-24 20:33:30,650 INFO  L313           BlockEncoder]: Initial Icfg 4086 locations, 7158 edges
[2020-11-24 20:33:30,650 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:33:30,651 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:33:30,651 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:33:30,651 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:33:30,662 INFO  L70    emoveInfeasibleEdges]: Removed 87 edges and 19 locations because of local infeasibility
[2020-11-24 20:33:30,671 INFO  L70        RemoveSinkStates]: Removed 56 edges and 30 locations by removing sink states
[2020-11-24 20:33:30,683 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:33:30,686 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:33:30,689 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:33:30,689 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:33:30,694 INFO  L313           BlockEncoder]: Encoded RCFG 4007 locations, 6971 edges
[2020-11-24 20:33:30,694 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:33:30 BasicIcfg
[2020-11-24 20:33:30,694 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:33:30,694 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:33:30,694 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:33:30,696 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:33:30,697 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,697 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:33:27" (1/6) ...
[2020-11-24 20:33:30,699 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5b4222d and model type KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:33:30, skipping insertion in model container
[2020-11-24 20:33:30,700 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,700 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:33:28" (2/6) ...
[2020-11-24 20:33:30,700 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5b4222d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:33:30, skipping insertion in model container
[2020-11-24 20:33:30,701 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,701 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:33:28" (3/6) ...
[2020-11-24 20:33:30,701 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5b4222d and model type KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:33:30, skipping insertion in model container
[2020-11-24 20:33:30,701 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,701 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:33:29" (4/6) ...
[2020-11-24 20:33:30,702 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5b4222d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:33:30, skipping insertion in model container
[2020-11-24 20:33:30,702 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,702 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:33:30" (5/6) ...
[2020-11-24 20:33:30,702 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5b4222d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:33:30, skipping insertion in model container
[2020-11-24 20:33:30,703 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:33:30,703 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:33:30" (6/6) ...
[2020-11-24 20:33:30,704 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KriosToken_0x42566cfefc853c232117eba4413e45782a72715d_transferfrom-fail.bpl_BEv2
[2020-11-24 20:33:30,740 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:33:30,740 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:33:30,740 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:33:30,740 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:33:30,741 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:33:30,741 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:33:30,741 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:33:30,741 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:33:30,741 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:33:30,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4007 states.
[2020-11-24 20:33:30,832 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:30,832 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:30,832 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:30,842 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:30,842 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:30,842 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:33:30,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4007 states.
[2020-11-24 20:33:30,869 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:30,870 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:30,870 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:30,872 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:30,872 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND TRUE   revert
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND TRUE   choice == 16
[L4687]              gas := gas - 21000;
[L4688]  COND FALSE  !(gas >= 0)
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:30,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:30,887 INFO  L82        PathProgramCache]: Analyzing trace with hash -843680321, now seen corresponding path program 1 times
[2020-11-24 20:33:30,894 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:30,911 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:30,955 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:33:30,958 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:30,959 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:33:31,208 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:31,220 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:33:31,220 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:33:31,222 INFO  L87              Difference]: Start difference. First operand 4007 states. Second operand 4 states.
[2020-11-24 20:33:31,601 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:31,601 INFO  L93              Difference]: Finished difference Result 2311 states and 2583 transitions.
[2020-11-24 20:33:31,601 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:33:31,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2311 states and 2583 transitions.
[2020-11-24 20:33:31,616 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:31,636 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2311 states to 2307 states and 2575 transitions.
[2020-11-24 20:33:31,637 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:33:31,639 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 783
[2020-11-24 20:33:31,639 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2307 states and 2575 transitions.
[2020-11-24 20:33:31,645 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:31,645 INFO  L728         BuchiCegarLoop]: Abstraction has 2307 states and 2575 transitions.
[2020-11-24 20:33:31,662 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2307 states and 2575 transitions.
[2020-11-24 20:33:31,701 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2307 to 2307.
[2020-11-24 20:33:31,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2307 states.
[2020-11-24 20:33:31,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2307 states to 2307 states and 2575 transitions.
[2020-11-24 20:33:31,706 INFO  L751         BuchiCegarLoop]: Abstraction has 2307 states and 2575 transitions.
[2020-11-24 20:33:31,707 INFO  L631         BuchiCegarLoop]: Abstraction has 2307 states and 2575 transitions.
[2020-11-24 20:33:31,707 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:33:31,707 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2307 states and 2575 transitions.
[2020-11-24 20:33:31,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:31,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:31,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:31,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:31,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND TRUE   revert
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND TRUE   revert
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND TRUE   !(_to_s381 != null && _to_s381 != this)
[L2574]              revert := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND TRUE   !(_to_s381 != null && _to_s381 != this)
[L2574]              revert := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:31,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:31,718 INFO  L82        PathProgramCache]: Analyzing trace with hash 1065426130, now seen corresponding path program 1 times
[2020-11-24 20:33:31,719 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:31,726 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:31,748 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:33:31,748 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:31,748 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:33:31,749 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:31,749 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:33:31,749 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:33:31,749 INFO  L87              Difference]: Start difference. First operand 2307 states and 2575 transitions. cyclomatic complexity: 270 Second operand 4 states.
[2020-11-24 20:33:32,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:32,066 INFO  L93              Difference]: Finished difference Result 2827 states and 3131 transitions.
[2020-11-24 20:33:32,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:33:32,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2827 states and 3131 transitions.
[2020-11-24 20:33:32,076 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:33:32,085 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2827 states to 2763 states and 3059 transitions.
[2020-11-24 20:33:32,086 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 897
[2020-11-24 20:33:32,086 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 897
[2020-11-24 20:33:32,086 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2763 states and 3059 transitions.
[2020-11-24 20:33:32,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:32,090 INFO  L728         BuchiCegarLoop]: Abstraction has 2763 states and 3059 transitions.
[2020-11-24 20:33:32,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2763 states and 3059 transitions.
[2020-11-24 20:33:32,112 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2763 to 2456.
[2020-11-24 20:33:32,113 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2456 states.
[2020-11-24 20:33:32,116 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2456 states to 2456 states and 2677 transitions.
[2020-11-24 20:33:32,116 INFO  L751         BuchiCegarLoop]: Abstraction has 2456 states and 2677 transitions.
[2020-11-24 20:33:32,116 INFO  L631         BuchiCegarLoop]: Abstraction has 2456 states and 2677 transitions.
[2020-11-24 20:33:32,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:33:32,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2456 states and 2677 transitions.
[2020-11-24 20:33:32,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:33:32,121 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:32,121 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:32,123 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:32,123 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND FALSE  !(revert)
[L2814]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2814]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2818]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2819]  COND FALSE  !(revert)
[L2822]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2505]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2506]  COND FALSE  !(revert)
[L2509]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2509]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2510]  COND FALSE  !(revert)
[L2513]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2513]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2514]  COND FALSE  !(revert)
[L2517]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2476]              assume msgsender_MSG != null;
[L2477]              Balance[this] := 0;
[L2478]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2479]              sum_allowed1[this] := 0;
[L2517]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2518]  COND FALSE  !(revert)
[L2822]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2823]  COND FALSE  !(revert)
[L2826]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2211]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2194]              assume msgsender_MSG != null;
[L2195]              Balance[this] := 0;
[L2196]              owner_Ownable[this] := null;
[L2198]              owner_Ownable[this] := msgsender_MSG;
[L2211]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  COND FALSE  !(revert)
[L2826]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2827]  COND FALSE  !(revert)
[L2830]  CALL        call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]              assume msgsender_MSG != null;
[L2764]              Balance[this] := 0;
[L2765]              name_KriosToken[this] := -1479146443;
[L2766]              symbol_KriosToken[this] := -372438969;
[L2767]              decimals_KriosToken[this] := 18;
[L2768]              __var_13 := decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2769]              initialSupply_KriosToken[this] := 500000000 * (nonlinearPow(10, decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2771]              totalSupply_ERC20Basic[this] := initialSupply_KriosToken[this];
[L2772]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2773]              balances_BasicToken[this][msgsender_MSG] := initialSupply_KriosToken[this];
[L2774]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2775]              assert { :EventEmitted "Transfer_KriosToken" } true;
[L2830]  RET         call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2831]  COND FALSE  !(revert)
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:32,128 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:32,129 INFO  L82        PathProgramCache]: Analyzing trace with hash 817735864, now seen corresponding path program 1 times
[2020-11-24 20:33:32,129 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:32,151 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:32,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 199 trivial. 0 not checked.
[2020-11-24 20:33:32,421 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:32,421 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-24 20:33:32,421 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:32,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:33:32,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=269, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:33:32,422 INFO  L87              Difference]: Start difference. First operand 2456 states and 2677 transitions. cyclomatic complexity: 223 Second operand 18 states.
[2020-11-24 20:33:34,596 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:34,596 INFO  L93              Difference]: Finished difference Result 2574 states and 2815 transitions.
[2020-11-24 20:33:34,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:33:34,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2574 states and 2815 transitions.
[2020-11-24 20:33:34,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:33:34,609 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2574 states to 2574 states and 2815 transitions.
[2020-11-24 20:33:34,610 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-24 20:33:34,610 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-24 20:33:34,610 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2574 states and 2815 transitions.
[2020-11-24 20:33:34,612 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:34,613 INFO  L728         BuchiCegarLoop]: Abstraction has 2574 states and 2815 transitions.
[2020-11-24 20:33:34,615 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2574 states and 2815 transitions.
[2020-11-24 20:33:34,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2574 to 2377.
[2020-11-24 20:33:34,636 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2377 states.
[2020-11-24 20:33:34,638 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2377 states to 2377 states and 2569 transitions.
[2020-11-24 20:33:34,639 INFO  L751         BuchiCegarLoop]: Abstraction has 2377 states and 2569 transitions.
[2020-11-24 20:33:34,639 INFO  L631         BuchiCegarLoop]: Abstraction has 2377 states and 2569 transitions.
[2020-11-24 20:33:34,639 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:33:34,639 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2377 states and 2569 transitions.
[2020-11-24 20:33:34,643 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:34,643 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:34,643 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:34,646 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:34,646 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND FALSE  !(revert)
[L2814]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2814]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2818]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2819]  COND FALSE  !(revert)
[L2822]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2505]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2506]  COND FALSE  !(revert)
[L2509]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2509]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2510]  COND FALSE  !(revert)
[L2513]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2513]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2514]  COND FALSE  !(revert)
[L2517]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2476]              assume msgsender_MSG != null;
[L2477]              Balance[this] := 0;
[L2478]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2479]              sum_allowed1[this] := 0;
[L2517]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2518]  COND FALSE  !(revert)
[L2822]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2823]  COND FALSE  !(revert)
[L2826]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2211]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2194]              assume msgsender_MSG != null;
[L2195]              Balance[this] := 0;
[L2196]              owner_Ownable[this] := null;
[L2198]              owner_Ownable[this] := msgsender_MSG;
[L2211]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  COND FALSE  !(revert)
[L2826]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2827]  COND FALSE  !(revert)
[L2830]  CALL        call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]              assume msgsender_MSG != null;
[L2764]              Balance[this] := 0;
[L2765]              name_KriosToken[this] := -1479146443;
[L2766]              symbol_KriosToken[this] := -372438969;
[L2767]              decimals_KriosToken[this] := 18;
[L2768]              __var_13 := decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2769]              initialSupply_KriosToken[this] := 500000000 * (nonlinearPow(10, decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2771]              totalSupply_ERC20Basic[this] := initialSupply_KriosToken[this];
[L2772]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2773]              balances_BasicToken[this][msgsender_MSG] := initialSupply_KriosToken[this];
[L2774]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2775]              assert { :EventEmitted "Transfer_KriosToken" } true;
[L2830]  RET         call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2831]  COND FALSE  !(revert)
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND FALSE  !(choice == 10)
[L4730]  COND TRUE   choice == 9
[L4731]              gas := gas - 21000;
[L4732]  COND TRUE   gas >= 0
[L4733]              assume _value_s409 >= 0 && _value_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4734]              assume msgvalue_MSG == 0;
[L4735]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L773]               havoc __exception;
[L774]               revert := false;
[L775]   COND FALSE  !(__exception)
[L798]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L2615]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s409];
[L2616]              allowed_StandardToken[this][msgsender_MSG][_spender_s409] := _value_s409;
[L2617]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s409];
[L2618]              assert { :EventEmitted "Approval_StandardToken" } true;
[L2619]              __ret_0_ := true;
[L798]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L799]               assume !revert && gas >= 0;
[L4735]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L4807]  RET         call CorralChoice_KriosToken(this);
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:34,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:34,651 INFO  L82        PathProgramCache]: Analyzing trace with hash -261940024, now seen corresponding path program 1 times
[2020-11-24 20:33:34,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:34,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:34,965 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-24 20:33:34,965 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:34,965 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-24 20:33:34,966 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:34,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-24 20:33:34,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=404, Unknown=0, NotChecked=0, Total=462
[2020-11-24 20:33:34,967 INFO  L87              Difference]: Start difference. First operand 2377 states and 2569 transitions. cyclomatic complexity: 195 Second operand 22 states.
[2020-11-24 20:33:38,049 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:38,049 INFO  L93              Difference]: Finished difference Result 2469 states and 2684 transitions.
[2020-11-24 20:33:38,049 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 20:33:38,049 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2469 states and 2684 transitions.
[2020-11-24 20:33:38,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:38,061 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2469 states to 2469 states and 2684 transitions.
[2020-11-24 20:33:38,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 828
[2020-11-24 20:33:38,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 828
[2020-11-24 20:33:38,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2469 states and 2684 transitions.
[2020-11-24 20:33:38,064 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:38,064 INFO  L728         BuchiCegarLoop]: Abstraction has 2469 states and 2684 transitions.
[2020-11-24 20:33:38,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2469 states and 2684 transitions.
[2020-11-24 20:33:38,084 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2469 to 2410.
[2020-11-24 20:33:38,084 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2410 states.
[2020-11-24 20:33:38,086 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2410 states to 2410 states and 2612 transitions.
[2020-11-24 20:33:38,086 INFO  L751         BuchiCegarLoop]: Abstraction has 2410 states and 2612 transitions.
[2020-11-24 20:33:38,086 INFO  L631         BuchiCegarLoop]: Abstraction has 2410 states and 2612 transitions.
[2020-11-24 20:33:38,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:33:38,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2410 states and 2612 transitions.
[2020-11-24 20:33:38,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:38,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:38,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:38,091 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:38,091 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND TRUE   __exception
[L1078]              __tmp__Balance := Balance;
[L1079]              __tmp__DType := DType;
[L1080]              __tmp__Alloc := Alloc;
[L1081]              __tmp__balance_ADDR := balance_ADDR;
[L1082]              __tmp__M_Ref_int := M_Ref_int;
[L1083]              __tmp__sum_balances0 := sum_balances0;
[L1084]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1085]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1086]              __tmp__sum_allowed1 := sum_allowed1;
[L1087]              __tmp__Length := Length;
[L1088]              __tmp__now := now;
[L1089]              __tmp__owner_Ownable := owner_Ownable;
[L1090]              __tmp__totalSupply_ERC20Basic := totalSupply_ERC20Basic;
[L1091]              __tmp__balances_BasicToken := balances_BasicToken;
[L1092]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1093]              __tmp__name_KriosToken := name_KriosToken;
[L1094]              __tmp__symbol_KriosToken := symbol_KriosToken;
[L1095]              __tmp__decimals_KriosToken := decimals_KriosToken;
[L1096]              __tmp__initialSupply_KriosToken := initialSupply_KriosToken;
[L1097]  CALL        call KriosToken_KriosToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2781]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2441]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2441]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2442]  COND FALSE  !(revert)
[L2445]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2426]              assume msgsender_MSG != null;
[L2427]              __tmp__Balance[this] := 0;
[L2445]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2446]  COND FALSE  !(revert)
[L2785]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2789]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2328]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2332]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2309]              assume msgsender_MSG != null;
[L2310]              __tmp__Balance[this] := 0;
[L2311]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2312]              __tmp__sum_balances0[this] := 0;
[L2332]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2333]  COND FALSE  !(revert)
[L2789]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2790]  COND FALSE  !(revert)
[L2793]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2485]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2485]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2486]  COND FALSE  !(revert)
[L2489]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2441]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2441]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2442]  COND FALSE  !(revert)
[L2445]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2426]              assume msgsender_MSG != null;
[L2427]              __tmp__Balance[this] := 0;
[L2445]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2446]  COND FALSE  !(revert)
[L2489]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2328]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2280]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2263]              assume msgsender_MSG != null;
[L2264]              __tmp__Balance[this] := 0;
[L2265]              __tmp__totalSupply_ERC20Basic[this] := 0;
[L2280]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2328]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2332]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2309]              assume msgsender_MSG != null;
[L2310]              __tmp__Balance[this] := 0;
[L2311]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2312]              __tmp__sum_balances0[this] := 0;
[L2332]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2333]  COND FALSE  !(revert)
[L2493]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2494]  COND FALSE  !(revert)
[L2497]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2466]              assume msgsender_MSG != null;
[L2467]              __tmp__Balance[this] := 0;
[L2468]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2469]              __tmp__sum_allowed1[this] := 0;
[L2497]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2498]  COND FALSE  !(revert)
[L2793]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2797]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2203]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2184]              assume msgsender_MSG != null;
[L2185]              __tmp__Balance[this] := 0;
[L2186]              __tmp__owner_Ownable[this] := null;
[L2188]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2203]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2204]  COND FALSE  !(revert)
[L2797]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2798]  COND FALSE  !(revert)
[L2801]  CALL        call KriosToken_KriosToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2745]              assume msgsender_MSG != null;
[L2746]              __tmp__Balance[this] := 0;
[L2747]              __tmp__name_KriosToken[this] := -1479146443;
[L2748]              __tmp__symbol_KriosToken[this] := -372438969;
[L2749]              __tmp__decimals_KriosToken[this] := 18;
[L2750]              __var_13 := __tmp__decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2751]              __tmp__initialSupply_KriosToken[this] := 500000000 * (nonlinearPow(10, __tmp__decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2753]              __tmp__totalSupply_ERC20Basic[this] := __tmp__initialSupply_KriosToken[this];
[L2754]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2755]              __tmp__balances_BasicToken[this][msgsender_MSG] := __tmp__initialSupply_KriosToken[this];
[L2756]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2801]  RET         call KriosToken_KriosToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]  COND FALSE  !(revert)
[L1097]  RET         call KriosToken_KriosToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1098]              assume revert || gas < 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND TRUE   choice == 16
[L4687]              gas := gas - 21000;
[L4688]  COND FALSE  !(gas >= 0)
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:38,095 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:38,095 INFO  L82        PathProgramCache]: Analyzing trace with hash 1137418027, now seen corresponding path program 1 times
[2020-11-24 20:33:38,096 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:38,110 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:38,154 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 199 trivial. 0 not checked.
[2020-11-24 20:33:38,155 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:38,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:33:38,155 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:38,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:33:38,155 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:33:38,155 INFO  L87              Difference]: Start difference. First operand 2410 states and 2612 transitions. cyclomatic complexity: 207 Second operand 4 states.
[2020-11-24 20:33:38,326 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:38,327 INFO  L93              Difference]: Finished difference Result 3020 states and 3425 transitions.
[2020-11-24 20:33:38,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:33:38,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3020 states and 3425 transitions.
[2020-11-24 20:33:38,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:33:38,340 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3020 states to 2877 states and 3277 transitions.
[2020-11-24 20:33:38,340 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 954
[2020-11-24 20:33:38,341 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-24 20:33:38,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2877 states and 3277 transitions.
[2020-11-24 20:33:38,344 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:38,344 INFO  L728         BuchiCegarLoop]: Abstraction has 2877 states and 3277 transitions.
[2020-11-24 20:33:38,346 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2877 states and 3277 transitions.
[2020-11-24 20:33:38,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2877 to 2267.
[2020-11-24 20:33:38,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2267 states.
[2020-11-24 20:33:38,363 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2267 states to 2267 states and 2463 transitions.
[2020-11-24 20:33:38,363 INFO  L751         BuchiCegarLoop]: Abstraction has 2267 states and 2463 transitions.
[2020-11-24 20:33:38,363 INFO  L631         BuchiCegarLoop]: Abstraction has 2267 states and 2463 transitions.
[2020-11-24 20:33:38,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:33:38,364 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2267 states and 2463 transitions.
[2020-11-24 20:33:38,367 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:38,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:38,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:38,369 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:38,369 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND FALSE  !(revert)
[L2814]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2814]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2818]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2819]  COND FALSE  !(revert)
[L2822]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2505]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2506]  COND FALSE  !(revert)
[L2509]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2509]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2510]  COND FALSE  !(revert)
[L2513]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2513]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2514]  COND FALSE  !(revert)
[L2517]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2476]              assume msgsender_MSG != null;
[L2477]              Balance[this] := 0;
[L2478]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2479]              sum_allowed1[this] := 0;
[L2517]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2518]  COND FALSE  !(revert)
[L2822]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2823]  COND FALSE  !(revert)
[L2826]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2211]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2194]              assume msgsender_MSG != null;
[L2195]              Balance[this] := 0;
[L2196]              owner_Ownable[this] := null;
[L2198]              owner_Ownable[this] := msgsender_MSG;
[L2211]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  COND FALSE  !(revert)
[L2826]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2827]  COND FALSE  !(revert)
[L2830]  CALL        call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]              assume msgsender_MSG != null;
[L2764]              Balance[this] := 0;
[L2765]              name_KriosToken[this] := -1479146443;
[L2766]              symbol_KriosToken[this] := -372438969;
[L2767]              decimals_KriosToken[this] := 18;
[L2768]              __var_13 := decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2769]              initialSupply_KriosToken[this] := 500000000 * (nonlinearPow(10, decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2771]              totalSupply_ERC20Basic[this] := initialSupply_KriosToken[this];
[L2772]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2773]              balances_BasicToken[this][msgsender_MSG] := initialSupply_KriosToken[this];
[L2774]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2775]              assert { :EventEmitted "Transfer_KriosToken" } true;
[L2830]  RET         call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2831]  COND FALSE  !(revert)
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND TRUE   choice == 16
[L4687]              gas := gas - 21000;
[L4688]  COND FALSE  !(gas >= 0)
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:38,373 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:38,373 INFO  L82        PathProgramCache]: Analyzing trace with hash -912877290, now seen corresponding path program 1 times
[2020-11-24 20:33:38,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:38,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:38,920 INFO  L134       CoverageAnalysis]: Checked inductivity of 275 backedges. 3 proven. 3 refuted. 0 times theorem prover too weak. 269 trivial. 0 not checked.
[2020-11-24 20:33:38,921 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:33:38,921 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-24 20:33:38,921 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:38,921 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:33:38,921 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=563, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:33:38,922 INFO  L87              Difference]: Start difference. First operand 2267 states and 2463 transitions. cyclomatic complexity: 201 Second operand 26 states.
[2020-11-24 20:33:42,078 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:42,078 INFO  L93              Difference]: Finished difference Result 2336 states and 2541 transitions.
[2020-11-24 20:33:42,078 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-24 20:33:42,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2336 states and 2541 transitions.
[2020-11-24 20:33:42,082 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:42,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2336 states to 2336 states and 2541 transitions.
[2020-11-24 20:33:42,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 834
[2020-11-24 20:33:42,087 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 834
[2020-11-24 20:33:42,087 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2336 states and 2541 transitions.
[2020-11-24 20:33:42,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:42,090 INFO  L728         BuchiCegarLoop]: Abstraction has 2336 states and 2541 transitions.
[2020-11-24 20:33:42,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2336 states and 2541 transitions.
[2020-11-24 20:33:42,106 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2336 to 2269.
[2020-11-24 20:33:42,107 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2269 states.
[2020-11-24 20:33:42,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2269 states to 2269 states and 2469 transitions.
[2020-11-24 20:33:42,109 INFO  L751         BuchiCegarLoop]: Abstraction has 2269 states and 2469 transitions.
[2020-11-24 20:33:42,109 INFO  L631         BuchiCegarLoop]: Abstraction has 2269 states and 2469 transitions.
[2020-11-24 20:33:42,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:33:42,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2269 states and 2469 transitions.
[2020-11-24 20:33:42,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:33:42,112 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:33:42,112 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:33:42,113 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:33:42,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L4797]              assume null == 0;
[L4798]  CALL        call this := FreshRefGenerator__success();
[L2080]              havoc newRef;
[L2081]              assume Alloc[newRef] == false;
[L2082]              Alloc[newRef] := true;
[L2083]              assume newRef != null;
[L4798]  RET         call this := FreshRefGenerator__success();
[L4799]              assume now >= 0;
[L4800]              assume DType[this] == KriosToken;
[L4801]              assume msgvalue_MSG == 0;
[L4802]              gas := gas - 53000;
[L4803]  CALL        call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L1075]              havoc __exception;
[L1076]              revert := false;
[L1077]  COND FALSE  !(__exception)
[L1100]  CALL        call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2810]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2810]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2811]  COND FALSE  !(revert)
[L2814]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2814]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2815]  COND FALSE  !(revert)
[L2818]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2818]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2819]  COND FALSE  !(revert)
[L2822]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2505]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2506]  COND FALSE  !(revert)
[L2509]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2453]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2453]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2454]  COND FALSE  !(revert)
[L2457]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2434]              assume msgsender_MSG != null;
[L2435]              Balance[this] := 0;
[L2457]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]  COND FALSE  !(revert)
[L2509]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2510]  COND FALSE  !(revert)
[L2513]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2340]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2272]              assume msgsender_MSG != null;
[L2273]              Balance[this] := 0;
[L2274]              totalSupply_ERC20Basic[this] := 0;
[L2288]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L2340]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2341]  COND FALSE  !(revert)
[L2344]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2319]              assume msgsender_MSG != null;
[L2320]              Balance[this] := 0;
[L2321]              balances_BasicToken[this] := zeroRefintArr();
[L2322]              sum_balances0[this] := 0;
[L2344]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2513]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2514]  COND FALSE  !(revert)
[L2517]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2476]              assume msgsender_MSG != null;
[L2477]              Balance[this] := 0;
[L2478]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2479]              sum_allowed1[this] := 0;
[L2517]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2518]  COND FALSE  !(revert)
[L2822]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2823]  COND FALSE  !(revert)
[L2826]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2211]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2194]              assume msgsender_MSG != null;
[L2195]              Balance[this] := 0;
[L2196]              owner_Ownable[this] := null;
[L2198]              owner_Ownable[this] := msgsender_MSG;
[L2211]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  COND FALSE  !(revert)
[L2826]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2827]  COND FALSE  !(revert)
[L2830]  CALL        call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]              assume msgsender_MSG != null;
[L2764]              Balance[this] := 0;
[L2765]              name_KriosToken[this] := -1479146443;
[L2766]              symbol_KriosToken[this] := -372438969;
[L2767]              decimals_KriosToken[this] := 18;
[L2768]              __var_13 := decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2769]              initialSupply_KriosToken[this] := 500000000 * (nonlinearPow(10, decimals_KriosToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2771]              totalSupply_ERC20Basic[this] := initialSupply_KriosToken[this];
[L2772]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2773]              balances_BasicToken[this][msgsender_MSG] := initialSupply_KriosToken[this];
[L2774]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2775]              assert { :EventEmitted "Transfer_KriosToken" } true;
[L2830]  RET         call KriosToken_KriosToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2831]  COND FALSE  !(revert)
[L1100]  RET         call KriosToken_KriosToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1101]              assume !revert && gas >= 0;
[L4803]  RET         call KriosToken_KriosToken(this, msgsender_MSG, msgvalue_MSG);
[L4804]              assume !revert && gas >= 0;
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND FALSE  !(choice == 10)
[L4730]  COND TRUE   choice == 9
[L4731]              gas := gas - 21000;
[L4732]  COND TRUE   gas >= 0
[L4733]              assume _value_s409 >= 0 && _value_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4734]              assume msgvalue_MSG == 0;
[L4735]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L773]               havoc __exception;
[L774]               revert := false;
[L775]   COND FALSE  !(__exception)
[L798]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L2615]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s409];
[L2616]              allowed_StandardToken[this][msgsender_MSG][_spender_s409] := _value_s409;
[L2617]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s409];
[L2618]              assert { :EventEmitted "Approval_StandardToken" } true;
[L2619]              __ret_0_ := true;
[L798]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L799]               assume !revert && gas >= 0;
[L4735]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s409, _value_s409);
[L4807]  RET         call CorralChoice_KriosToken(this);
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND TRUE   choice == 12
[L4711]              gas := gas - 21000;
[L4712]  COND TRUE   gas >= 0
[L4713]              assume _value_s241 >= 0 && _value_s241 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4714]              assume msgvalue_MSG == 0;
[L4715]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s241, _value_s241);
[L479]               havoc __exception;
[L480]               revert := false;
[L481]   COND FALSE  !(__exception)
[L504]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s241, _value_s241);
[L2386]              __var_2 := null;
[L2387]              __var_3 := this;
[L2388]  COND FALSE  !(!(_to_s241 != null && _to_s241 != this))
[L2392]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s241);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2392]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s241);
[L2393]  COND FALSE  !(revert)
[L2396]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2397]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2398]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2399]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s241], _value_s241);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2399]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s241], _value_s241);
[L2400]  COND FALSE  !(revert)
[L2403]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s241];
[L2404]              balances_BasicToken[this][_to_s241] := __var_5;
[L2405]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s241];
[L2406]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2407]              __ret_0_ := true;
[L504]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s241, _value_s241);
[L505]               assume !revert && gas >= 0;
[L4715]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s241, _value_s241);
[L4807]  RET         call CorralChoice_KriosToken(this);
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

Loop:
[L4807]  CALL        call CorralChoice_KriosToken(this);
[L4632]              havoc msgsender_MSG;
[L4633]              havoc msgvalue_MSG;
[L4634]              havoc choice;
[L4635]              havoc __ret_0_owner;
[L4636]              havoc newOwner_s147;
[L4637]              havoc __ret_0_totalSupply;
[L4638]              havoc _owner_s253;
[L4639]              havoc balance_s253;
[L4640]              havoc _to_s241;
[L4641]              havoc _value_s241;
[L4642]              havoc __ret_0_transfer;
[L4643]              havoc _owner_s425;
[L4644]              havoc _spender_s425;
[L4645]              havoc remaining_s425;
[L4646]              havoc _from_s381;
[L4647]              havoc _to_s381;
[L4648]              havoc _value_s381;
[L4649]              havoc __ret_0_transferFrom;
[L4650]              havoc _spender_s409;
[L4651]              havoc _value_s409;
[L4652]              havoc __ret_0_approve;
[L4653]              havoc _spender_s466;
[L4654]              havoc _addedValue_s466;
[L4655]              havoc success_s466;
[L4656]              havoc _spender_s526;
[L4657]              havoc _subtractedValue_s526;
[L4658]              havoc success_s526;
[L4659]              havoc __ret_0_name;
[L4660]              havoc __ret_0_symbol;
[L4661]              havoc __ret_0_decimals;
[L4662]              havoc __ret_0_initialSupply;
[L4663]              havoc _spender_s619;
[L4664]              havoc _value_s619;
[L4665]              havoc _extraData_s619;
[L4666]              havoc success_s619;
[L4667]              havoc _tokenAddress_s639;
[L4668]              havoc _to_s639;
[L4669]              havoc _amount_s639;
[L4670]              havoc tmpNow;
[L4671]              havoc gas;
[L4672]              assume gas > 4000000 && gas <= 8000000;
[L4673]              tmpNow := now;
[L4674]              havoc now;
[L4675]              assume now > tmpNow;
[L4676]              assume msgsender_MSG != null;
[L4677]              assume DType[msgsender_MSG] != SafeMath;
[L4678]              assume DType[msgsender_MSG] != Ownable;
[L4679]              assume DType[msgsender_MSG] != ERC20Basic;
[L4680]              assume DType[msgsender_MSG] != BasicToken;
[L4681]              assume DType[msgsender_MSG] != ERC20;
[L4682]              assume DType[msgsender_MSG] != StandardToken;
[L4683]              assume DType[msgsender_MSG] != tokenRecipient;
[L4684]              assume DType[msgsender_MSG] != KriosToken;
[L4685]              Alloc[msgsender_MSG] := true;
[L4686]  COND FALSE  !(choice == 16)
[L4692]  COND FALSE  !(choice == 15)
[L4698]  COND FALSE  !(choice == 14)
[L4704]  COND FALSE  !(choice == 13)
[L4710]  COND FALSE  !(choice == 12)
[L4717]  COND FALSE  !(choice == 11)
[L4723]  COND TRUE   choice == 10
[L4724]              gas := gas - 21000;
[L4725]  COND TRUE   gas >= 0
[L4726]              assume _value_s381 >= 0 && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4727]              assume msgvalue_MSG == 0;
[L4728]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s381 != _to_s381 && ((_value_s381 > balances_BasicToken[this][_from_s381] || _value_s381 > allowed_StandardToken[this][_from_s381][msgsender_MSG]) || balances_BasicToken[this][_to_s381] + _value_s381 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s381 >= 0) && _value_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s381] >= 0) && balances_BasicToken[this][_to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s381] >= 0) && balances_BasicToken[this][_from_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s381][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s381][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L717]               havoc __exception;
[L718]               revert := false;
[L719]   COND FALSE  !(__exception)
[L742]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L2571]              __var_6 := null;
[L2572]              __var_7 := this;
[L2573]  COND FALSE  !(!(_to_s381 != null && _to_s381 != this))
[L2577]              _allowance_s381 := allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2578]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2578]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s381], _value_s381);
[L2579]  COND FALSE  !(revert)
[L2582]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s381];
[L2583]              balances_BasicToken[this][_from_s381] := __var_8;
[L2584]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s381];
[L2585]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2175]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2176]              assert c_s93 >= a_s93;
[L2177]              __ret_0_ := c_s93;
[L2585]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s381], _value_s381);
[L2586]  COND FALSE  !(revert)
[L2589]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s381];
[L2590]              balances_BasicToken[this][_to_s381] := __var_9;
[L2591]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s381];
[L2592]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2159]              assert b_s69 <= a_s69;
[L2160]              __ret_0_ := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2592]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowance_s381, _value_s381);
[L2593]  COND FALSE  !(revert)
[L2596]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] - allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2597]              allowed_StandardToken[this][_from_s381][msgsender_MSG] := __var_10;
[L2598]              sum_allowed1[_from_s381] := sum_allowed1[_from_s381] + allowed_StandardToken[this][_from_s381][msgsender_MSG];
[L2599]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L2600]              __ret_0_ := true;
[L742]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L743]               assume !revert && gas >= 0;
[L4728]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s381, _to_s381, _value_s381);
[L4807]  RET         call CorralChoice_KriosToken(this);

[2020-11-24 20:33:42,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:33:42,118 INFO  L82        PathProgramCache]: Analyzing trace with hash 421150757, now seen corresponding path program 1 times
[2020-11-24 20:33:42,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:33:42,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:33:42,351 INFO  L134       CoverageAnalysis]: Checked inductivity of 387 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 387 trivial. 0 not checked.
[2020-11-24 20:33:42,351 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:33:42,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:33:42,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:33:42,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:33:42,352 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=150, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:33:42,352 INFO  L87              Difference]: Start difference. First operand 2269 states and 2469 transitions. cyclomatic complexity: 206 Second operand 14 states.
[2020-11-24 20:33:43,521 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:33:43,521 INFO  L93              Difference]: Finished difference Result 1332 states and 1445 transitions.
[2020-11-24 20:33:43,522 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 20:33:43,522 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1332 states and 1445 transitions.
[2020-11-24 20:33:43,525 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:33:43,525 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1332 states to 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:33:43,525 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:33:43,525 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:33:43,525 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:33:43,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:33:43,525 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:33:43,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:33:43,528 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:33:43 BasicIcfg
[2020-11-24 20:33:43,528 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:33:43,529 INFO  L168              Benchmark]: Toolchain (without parser) took 15584.07 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,529 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,530 INFO  L168              Benchmark]: Boogie Preprocessor took 109.91 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,530 INFO  L168              Benchmark]: UtopiaSpecLang took 73.65 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,531 INFO  L168              Benchmark]: Boogie Printer took 16.92 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,531 INFO  L168              Benchmark]: RCFGBuilder took 833.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 774.1 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,531 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.73 ms. Allocated memory is still 1.0 GB. Free memory was 774.1 MB in the beginning and 770.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,531 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1537.48 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 211.8 MB). Free memory was 770.5 MB in the beginning and 871.6 MB in the end (delta: -101.1 MB). Peak memory consumption was 156.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,532 INFO  L168              Benchmark]: BlockEncodingV2 took 136.85 ms. Allocated memory is still 1.2 GB. Free memory was 871.6 MB in the beginning and 796.3 MB in the end (delta: 75.3 MB). Peak memory consumption was 75.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,532 INFO  L168              Benchmark]: BuchiAutomizer took 12834.02 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 887.6 MB). Free memory was 796.3 MB in the beginning and 924.5 MB in the end (delta: -128.2 MB). Peak memory consumption was 759.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:33:43,534 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4086 locations, 7158 edges
  - StatisticsResult: Encoded RCFG
    4007 locations, 6971 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.91 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 73.65 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.92 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 833.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 774.1 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.73 ms. Allocated memory is still 1.0 GB. Free memory was 774.1 MB in the beginning and 770.5 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1537.48 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 211.8 MB). Free memory was 770.5 MB in the beginning and 871.6 MB in the end (delta: -101.1 MB). Peak memory consumption was 156.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 136.85 ms. Allocated memory is still 1.2 GB. Free memory was 871.6 MB in the beginning and 796.3 MB in the end (delta: 75.3 MB). Peak memory consumption was 75.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12834.02 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 887.6 MB). Free memory was 796.3 MB in the beginning and 924.5 MB in the end (delta: -128.2 MB). Peak memory consumption was 759.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1673 locations, 2185 edges
  - StatisticsResult: BuchiProgram size
    4086 locations, 7158 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 26 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.7s and 8 iterations.  TraceHistogramMax:6. Analysis of lassos took 1.8s. Construction of modules took 8.0s. BÃ¼chi inclusion checks took 2.4s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1240 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2456 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15996 SDtfs, 19354 SDslu, 35805 SDs, 0 SdLazy, 96218 SolverSat, 2985 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_StandardToken0) ==> ( <>(fail_transferFrom_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
