This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:02:33,025 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:02:33,026 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:02:33,038 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:02:33,039 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:02:33,039 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:02:33,041 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:02:33,043 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:02:33,045 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:02:33,046 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:02:33,047 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:02:33,047 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:02:33,048 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:02:33,049 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:02:33,050 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:02:33,050 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:02:33,051 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:02:33,052 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:02:33,053 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:02:33,054 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:02:33,055 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:02:33,056 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:02:33,057 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:02:33,058 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:02:33,058 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:02:33,058 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:02:33,059 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:02:33,059 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:02:33,059 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:02:33,060 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:02:33,060 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:02:33,060 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:02:33,061 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:02:33,061 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:02:33,062 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:02:33,062 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:02:33,063 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:02:33,063 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:02:33,063 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:02:33,064 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:02:33,064 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:02:33,064 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:02:33,072 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:02:33,072 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:02:33,072 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:02:33,073 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:02:33,073 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:02:33,073 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:02:33,074 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:02:33,074 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:02:33,075 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:02:33,075 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:02:33,097 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:02:33,109 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:02:33,112 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:02:33,113 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:02:33,113 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:02:33,114 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl
[2020-11-24 20:02:33,114 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl'
[2020-11-24 20:02:33,202 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:02:33,203 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:02:33,204 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:02:33,204 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:02:33,204 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:02:33,215 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,216 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,245 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,246 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,265 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,284 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,293 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,305 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:02:33,305 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:02:33,305 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:02:33,307 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:02:33,311 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/1) ...
[2020-11-24 20:02:33,329 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:02:33,334 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:02:33,341 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:02:33,348 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s765 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s765,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]
[2020-11-24 20:02:33,351 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s765]==value_s765 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[spender_s765,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s765,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Pausable>]]]]]]
[2020-11-24 20:02:33,356 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Pausable.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && paused_Pausable[this] == old(paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-24 20:02:33,356 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC20Pausable0) ==> ( <>AP(success_approve_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:02:33,367 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:02:33 PropertyContainer
[2020-11-24 20:02:33,367 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:02:33,367 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:02:33,367 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:02:33,367 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:02:33,368 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/2) ...
[2020-11-24 20:02:33,368 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:02:33,369 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:02:33,386 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:02:33" (2/2) ...
[2020-11-24 20:02:33,386 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:02:33,387 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:02:33,387 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:02:33,387 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:02:33,387 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/2) ...
[2020-11-24 20:02:33,439 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:02:33,439 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:02:33,439 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:02:33,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:02:33,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:02:33,440 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:02:33,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:02:33,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:02:33,441 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:02:33,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:02:33,442 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:02:33,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:02:33,442 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:02:33,442 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:02:33,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:02:33,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:02:33,443 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:02:33,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:02:33,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:02:33,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:02:33,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:02:33,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:02:33,444 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,445 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:02:33,446 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:02:33,447 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:02:33,448 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KardiachainToken
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:02:33,449 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:02:33,450 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:02:33,451 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:02:33,452 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:02:33,453 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,454 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:02:33,455 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__success
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__success
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__success
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:02:33,456 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:02:33,457 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:02:33,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:02:33,460 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:02:33,461 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:02:33,462 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:02:33,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__fail
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__success
[2020-11-24 20:02:33,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:02:33,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:02:33,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KardiachainToken
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:02:33,467 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:02:33,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:02:33,984 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:02:33,992 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:02:33,992 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:02:33,992 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:02:34,329 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:02:34,330 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-24 20:02:34,333 INFO  L202        PluginConnector]: Adding new model KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:02:34 BoogieIcfgContainer
[2020-11-24 20:02:34,333 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:02:33" (2/2) ...
[2020-11-24 20:02:34,333 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:02:34,334 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@202f161e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:02:34, skipping insertion in model container
[2020-11-24 20:02:34,334 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:02:34,334 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:02:34,334 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:02:34,336 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:02:34,336 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/3) ...
[2020-11-24 20:02:34,336 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2c44bd0a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:02:34, skipping insertion in model container
[2020-11-24 20:02:34,336 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:02:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:02:34,376 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:02:34 NWAContainer
[2020-11-24 20:02:34,376 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:02:34,376 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:02:34,376 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:02:34,377 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:02:34,378 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:02:34" (3/4) ...
[2020-11-24 20:02:34,379 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@76837180 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:02:34, skipping insertion in model container
[2020-11-24 20:02:34,379 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:02:34" (4/4) ...
[2020-11-24 20:02:34,383 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:02:34,388 INFO  L110   BuchiProductObserver]: Initial RCFG 2376 locations, 3410 edges
[2020-11-24 20:02:34,388 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:02:34,401 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:02:36,000 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:02:36,008 INFO  L110   BuchiProductObserver]: BuchiProgram size 6100 locations, 11204 edges
[2020-11-24 20:02:36,008 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:02:36 BoogieIcfgContainer
[2020-11-24 20:02:36,008 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:02:36,008 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:02:36,009 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:02:36,011 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:02:36,011 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:02:36" (1/1) ...
[2020-11-24 20:02:36,146 INFO  L313           BlockEncoder]: Initial Icfg 6100 locations, 11204 edges
[2020-11-24 20:02:36,147 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:02:36,147 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:02:36,147 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:02:36,148 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:02:36,165 INFO  L70    emoveInfeasibleEdges]: Removed 174 edges and 17 locations because of local infeasibility
[2020-11-24 20:02:36,177 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-24 20:02:36,193 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:02:36,199 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:02:36,204 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:02:36,205 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:02:36,209 INFO  L313           BlockEncoder]: Encoded RCFG 5984 locations, 10882 edges
[2020-11-24 20:02:36,209 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:02:36 BasicIcfg
[2020-11-24 20:02:36,209 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:02:36,209 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:02:36,210 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:02:36,212 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:02:36,213 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,213 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:02:33" (1/6) ...
[2020-11-24 20:02:36,214 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21858b35 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:02:36, skipping insertion in model container
[2020-11-24 20:02:36,214 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:02:33" (2/6) ...
[2020-11-24 20:02:36,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21858b35 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:02:36, skipping insertion in model container
[2020-11-24 20:02:36,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:02:34" (3/6) ...
[2020-11-24 20:02:36,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21858b35 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:02:36, skipping insertion in model container
[2020-11-24 20:02:36,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:02:34" (4/6) ...
[2020-11-24 20:02:36,216 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21858b35 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:02:36, skipping insertion in model container
[2020-11-24 20:02:36,216 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,216 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:02:36" (5/6) ...
[2020-11-24 20:02:36,216 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21858b35 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:02:36, skipping insertion in model container
[2020-11-24 20:02:36,216 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:02:36,216 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:02:36" (6/6) ...
[2020-11-24 20:02:36,217 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_approve.bpl_BEv2
[2020-11-24 20:02:36,255 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:02:36,256 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:02:36,256 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:02:36,256 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:02:36,256 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:02:36,256 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:02:36,256 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:02:36,256 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:02:36,257 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:02:36,309 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5984 states.
[2020-11-24 20:02:36,377 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:36,378 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:36,378 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:36,393 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:36,393 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:36,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:02:36,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5984 states.
[2020-11-24 20:02:36,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:36,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:36,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:36,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:36,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND TRUE   revert
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:36,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:36,442 INFO  L82        PathProgramCache]: Analyzing trace with hash -2078637084, now seen corresponding path program 1 times
[2020-11-24 20:02:36,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:36,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:36,511 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:02:36,513 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:36,513 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:02:36,834 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:36,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:02:36,843 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:02:36,844 INFO  L87              Difference]: Start difference. First operand 5984 states. Second operand 3 states.
[2020-11-24 20:02:37,134 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:37,134 INFO  L93              Difference]: Finished difference Result 3724 states and 4457 transitions.
[2020-11-24 20:02:37,134 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:02:37,136 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3724 states and 4457 transitions.
[2020-11-24 20:02:37,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:37,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3724 states to 3724 states and 4457 transitions.
[2020-11-24 20:02:37,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:02:37,185 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 894
[2020-11-24 20:02:37,186 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3724 states and 4457 transitions.
[2020-11-24 20:02:37,199 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:37,199 INFO  L728         BuchiCegarLoop]: Abstraction has 3724 states and 4457 transitions.
[2020-11-24 20:02:37,215 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3724 states and 4457 transitions.
[2020-11-24 20:02:37,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3724 to 3724.
[2020-11-24 20:02:37,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3724 states.
[2020-11-24 20:02:37,283 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3724 states to 3724 states and 4457 transitions.
[2020-11-24 20:02:37,284 INFO  L751         BuchiCegarLoop]: Abstraction has 3724 states and 4457 transitions.
[2020-11-24 20:02:37,284 INFO  L631         BuchiCegarLoop]: Abstraction has 3724 states and 4457 transitions.
[2020-11-24 20:02:37,284 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:02:37,284 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3724 states and 4457 transitions.
[2020-11-24 20:02:37,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:37,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:37,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:37,294 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:37,294 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND TRUE   revert
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND FALSE  !(!!paused_Pausable[this])
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND FALSE  !(!!paused_Pausable[this])
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:37,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:37,298 INFO  L82        PathProgramCache]: Analyzing trace with hash -1412540915, now seen corresponding path program 1 times
[2020-11-24 20:02:37,299 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:37,312 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:37,333 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:02:37,333 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:37,333 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:02:37,334 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:37,335 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:02:37,335 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:02:37,335 INFO  L87              Difference]: Start difference. First operand 3724 states and 4457 transitions. cyclomatic complexity: 735 Second operand 3 states.
[2020-11-24 20:02:37,453 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:37,453 INFO  L93              Difference]: Finished difference Result 4970 states and 5969 transitions.
[2020-11-24 20:02:37,454 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:02:37,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4970 states and 5969 transitions.
[2020-11-24 20:02:37,471 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:02:37,493 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4970 states to 4970 states and 5969 transitions.
[2020-11-24 20:02:37,494 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1267
[2020-11-24 20:02:37,495 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1267
[2020-11-24 20:02:37,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4970 states and 5969 transitions.
[2020-11-24 20:02:37,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:37,501 INFO  L728         BuchiCegarLoop]: Abstraction has 4970 states and 5969 transitions.
[2020-11-24 20:02:37,506 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4970 states and 5969 transitions.
[2020-11-24 20:02:37,550 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4970 to 4292.
[2020-11-24 20:02:37,550 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4292 states.
[2020-11-24 20:02:37,556 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4292 states to 4292 states and 5141 transitions.
[2020-11-24 20:02:37,556 INFO  L751         BuchiCegarLoop]: Abstraction has 4292 states and 5141 transitions.
[2020-11-24 20:02:37,556 INFO  L631         BuchiCegarLoop]: Abstraction has 4292 states and 5141 transitions.
[2020-11-24 20:02:37,556 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:02:37,556 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4292 states and 5141 transitions.
[2020-11-24 20:02:37,562 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:37,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:37,562 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:37,565 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:37,565 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND TRUE   !(account_s453 != null)
[L3394]              revert := true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:37,569 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:37,570 INFO  L82        PathProgramCache]: Analyzing trace with hash -475568199, now seen corresponding path program 1 times
[2020-11-24 20:02:37,570 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:37,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:37,662 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-24 20:02:37,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:02:37,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:02:37,663 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:37,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:02:37,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:02:37,664 INFO  L87              Difference]: Start difference. First operand 4292 states and 5141 transitions. cyclomatic complexity: 851 Second operand 7 states.
[2020-11-24 20:02:37,726 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:37,726 INFO  L93              Difference]: Finished difference Result 4300 states and 5148 transitions.
[2020-11-24 20:02:37,727 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:02:37,727 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4300 states and 5148 transitions.
[2020-11-24 20:02:37,739 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:37,755 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4300 states to 4291 states and 5139 transitions.
[2020-11-24 20:02:37,755 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1082
[2020-11-24 20:02:37,756 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1082
[2020-11-24 20:02:37,756 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4291 states and 5139 transitions.
[2020-11-24 20:02:37,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:37,760 INFO  L728         BuchiCegarLoop]: Abstraction has 4291 states and 5139 transitions.
[2020-11-24 20:02:37,764 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4291 states and 5139 transitions.
[2020-11-24 20:02:37,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4291 to 4291.
[2020-11-24 20:02:37,817 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4291 states.
[2020-11-24 20:02:37,823 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4291 states to 4291 states and 5139 transitions.
[2020-11-24 20:02:37,824 INFO  L751         BuchiCegarLoop]: Abstraction has 4291 states and 5139 transitions.
[2020-11-24 20:02:37,824 INFO  L631         BuchiCegarLoop]: Abstraction has 4291 states and 5139 transitions.
[2020-11-24 20:02:37,824 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:02:37,824 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4291 states and 5139 transitions.
[2020-11-24 20:02:37,829 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:37,830 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:37,830 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:37,831 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:37,831 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND TRUE   !(c_s26 >= a_s26)
[L2791]              revert := true;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND TRUE   revert
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND TRUE   !!paused_Pausable[this]
[L5651]              revert := true;
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND TRUE   revert
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:37,835 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:37,836 INFO  L82        PathProgramCache]: Analyzing trace with hash -805833876, now seen corresponding path program 1 times
[2020-11-24 20:02:37,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:37,847 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:37,892 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-11-24 20:02:37,892 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:37,892 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:02:37,893 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:37,893 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:02:37,893 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:02:37,893 INFO  L87              Difference]: Start difference. First operand 4291 states and 5139 transitions. cyclomatic complexity: 850 Second operand 3 states.
[2020-11-24 20:02:37,968 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:37,968 INFO  L93              Difference]: Finished difference Result 4969 states and 5721 transitions.
[2020-11-24 20:02:37,968 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:02:37,969 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4969 states and 5721 transitions.
[2020-11-24 20:02:37,981 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:02:37,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4969 states to 4558 states and 5225 transitions.
[2020-11-24 20:02:37,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1129
[2020-11-24 20:02:37,999 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-24 20:02:37,999 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4558 states and 5225 transitions.
[2020-11-24 20:02:38,004 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:38,004 INFO  L728         BuchiCegarLoop]: Abstraction has 4558 states and 5225 transitions.
[2020-11-24 20:02:38,008 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4558 states and 5225 transitions.
[2020-11-24 20:02:38,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4558 to 3972.
[2020-11-24 20:02:38,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3972 states.
[2020-11-24 20:02:38,045 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3972 states to 3972 states and 4489 transitions.
[2020-11-24 20:02:38,045 INFO  L751         BuchiCegarLoop]: Abstraction has 3972 states and 4489 transitions.
[2020-11-24 20:02:38,045 INFO  L631         BuchiCegarLoop]: Abstraction has 3972 states and 4489 transitions.
[2020-11-24 20:02:38,045 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:02:38,045 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3972 states and 4489 transitions.
[2020-11-24 20:02:38,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:02:38,050 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:38,050 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:38,052 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:38,052 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:38,056 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:38,056 INFO  L82        PathProgramCache]: Analyzing trace with hash -1869359654, now seen corresponding path program 1 times
[2020-11-24 20:02:38,057 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:38,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:38,160 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:02:38,160 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:38,160 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:02:38,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:38,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:02:38,161 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:02:38,161 INFO  L87              Difference]: Start difference. First operand 3972 states and 4489 transitions. cyclomatic complexity: 519 Second operand 14 states.
[2020-11-24 20:02:41,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:41,362 INFO  L93              Difference]: Finished difference Result 6326 states and 7208 transitions.
[2020-11-24 20:02:41,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:02:41,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6326 states and 7208 transitions.
[2020-11-24 20:02:41,376 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:02:41,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6326 states to 6323 states and 7205 transitions.
[2020-11-24 20:02:41,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1631
[2020-11-24 20:02:41,394 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1631
[2020-11-24 20:02:41,394 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6323 states and 7205 transitions.
[2020-11-24 20:02:41,400 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:41,400 INFO  L728         BuchiCegarLoop]: Abstraction has 6323 states and 7205 transitions.
[2020-11-24 20:02:41,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6323 states and 7205 transitions.
[2020-11-24 20:02:41,455 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6323 to 5642.
[2020-11-24 20:02:41,455 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5642 states.
[2020-11-24 20:02:41,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5642 states to 5642 states and 6502 transitions.
[2020-11-24 20:02:41,463 INFO  L751         BuchiCegarLoop]: Abstraction has 5642 states and 6502 transitions.
[2020-11-24 20:02:41,463 INFO  L631         BuchiCegarLoop]: Abstraction has 5642 states and 6502 transitions.
[2020-11-24 20:02:41,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:02:41,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5642 states and 6502 transitions.
[2020-11-24 20:02:41,471 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:02:41,471 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:41,471 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:41,473 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:41,474 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND TRUE   __exception
[L1609]              __tmp__Balance := Balance;
[L1610]              __tmp__DType := DType;
[L1611]              __tmp__Alloc := Alloc;
[L1612]              __tmp__balance_ADDR := balance_ADDR;
[L1613]              __tmp__M_Ref_int := M_Ref_int;
[L1614]              __tmp__sum__balances0 := sum__balances0;
[L1615]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1616]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1617]              __tmp__sum__allowances1 := sum__allowances1;
[L1618]              __tmp__Length := Length;
[L1619]              __tmp__now := now;
[L1620]              __tmp___balances_ERC20 := _balances_ERC20;
[L1621]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1622]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1623]              __tmp___owner_Ownable := _owner_Ownable;
[L1624]              __tmp__paused_Pausable := paused_Pausable;
[L1625]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1626]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1627]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1628]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1629]  CALL        call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4151]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L4151]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L2934]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L2938]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2909]              assume msgsender_MSG != null;
[L2910]              __tmp__Balance[this] := 0;
[L2911]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2912]              __tmp__sum__balances0[this] := 0;
[L2913]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2914]              __tmp__sum__allowances1[this] := 0;
[L2915]              __tmp___totalSupply_ERC20[this] := 0;
[L2938]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2939]  COND FALSE  !(revert)
[L4155]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L4159]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L4163]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3702]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]              assume msgsender_MSG != null;
[L3686]              __tmp__Balance[this] := 0;
[L3687]              __tmp__paused_Pausable[this] := false;
[L3706]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L4163]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4164]  COND FALSE  !(revert)
[L4167]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L3808]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2877]              assume msgsender_MSG != null;
[L2878]              __tmp__Balance[this] := 0;
[L2892]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2893]  COND FALSE  !(revert)
[L2934]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2935]  COND FALSE  !(revert)
[L2938]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2909]              assume msgsender_MSG != null;
[L2910]              __tmp__Balance[this] := 0;
[L2911]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2912]              __tmp__sum__balances0[this] := 0;
[L2913]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2914]              __tmp__sum__allowances1[this] := 0;
[L2915]              __tmp___totalSupply_ERC20[this] := 0;
[L2938]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2939]  COND FALSE  !(revert)
[L3812]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3816]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3593]              assume msgsender_MSG != null;
[L3594]              __tmp__Balance[this] := 0;
[L3595]              __tmp___owner_Ownable[this] := null;
[L3597]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3613]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3614]  COND FALSE  !(revert)
[L3702]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3703]  COND FALSE  !(revert)
[L3706]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3685]              assume msgsender_MSG != null;
[L3686]              __tmp__Balance[this] := 0;
[L3687]              __tmp__paused_Pausable[this] := false;
[L3706]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3707]  COND FALSE  !(revert)
[L3820]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L3824]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              __tmp__Balance[this] := 0;
[L3824]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3825]  COND FALSE  !(revert)
[L4167]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4168]  COND FALSE  !(revert)
[L4171]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4108]              assume msgsender_MSG != null;
[L4109]              __tmp__Balance[this] := 0;
[L4110]              __tmp__name_KardiachainToken[this] := -505187484;
[L4111]              __tmp__symbol_KardiachainToken[this] := 1585535741;
[L4112]              __tmp__decimals_KardiachainToken[this] := 18;
[L4113]              __var_29 := __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4114]              __tmp__initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4116]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L4117]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L3368]              __var_8 := null;
[L3369]  COND FALSE  !(!(account_s453 != null))
[L3373]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L2777]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2778]  COND FALSE  !(!(c_s26 >= a_s26))
[L2782]              __ret_0_ := c_s26;
[L3373]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L3374]  COND FALSE  !(revert)
[L3377]              __tmp___totalSupply_ERC20[this] := __var_9;
[L3378]  CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L2777]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2778]  COND FALSE  !(!(c_s26 >= a_s26))
[L2782]              __ret_0_ := c_s26;
[L3378]  RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L3379]  COND FALSE  !(revert)
[L3382]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s453];
[L3383]              __tmp___balances_ERC20[this][account_s453] := __var_10;
[L3384]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s453];
[L4117]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L4118]  COND FALSE  !(revert)
[L4171]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4172]  COND FALSE  !(revert)
[L1629]  RET         call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1630]              assume revert || gas < 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND TRUE   !!__tmp__paused_Pausable[this]
[L5643]              revert := true;
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:41,478 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:41,478 INFO  L82        PathProgramCache]: Analyzing trace with hash 626550248, now seen corresponding path program 1 times
[2020-11-24 20:02:41,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:41,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:41,538 INFO  L134       CoverageAnalysis]: Checked inductivity of 171 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-24 20:02:41,539 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:41,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:02:41,539 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:41,539 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:02:41,539 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:02:41,539 INFO  L87              Difference]: Start difference. First operand 5642 states and 6502 transitions. cyclomatic complexity: 864 Second operand 4 states.
[2020-11-24 20:02:41,753 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:41,753 INFO  L93              Difference]: Finished difference Result 7116 states and 8570 transitions.
[2020-11-24 20:02:41,753 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:02:41,753 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7116 states and 8570 transitions.
[2020-11-24 20:02:41,772 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 32
[2020-11-24 20:02:41,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7116 states to 6902 states and 8350 transitions.
[2020-11-24 20:02:41,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1755
[2020-11-24 20:02:41,798 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1755
[2020-11-24 20:02:41,799 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6902 states and 8350 transitions.
[2020-11-24 20:02:41,804 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:41,804 INFO  L728         BuchiCegarLoop]: Abstraction has 6902 states and 8350 transitions.
[2020-11-24 20:02:41,808 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6902 states and 8350 transitions.
[2020-11-24 20:02:41,865 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6902 to 6130.
[2020-11-24 20:02:41,865 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6130 states.
[2020-11-24 20:02:41,874 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6130 states to 6130 states and 7241 transitions.
[2020-11-24 20:02:41,874 INFO  L751         BuchiCegarLoop]: Abstraction has 6130 states and 7241 transitions.
[2020-11-24 20:02:41,874 INFO  L631         BuchiCegarLoop]: Abstraction has 6130 states and 7241 transitions.
[2020-11-24 20:02:41,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:02:41,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6130 states and 7241 transitions.
[2020-11-24 20:02:41,882 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:02:41,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:41,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:41,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:41,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND FALSE  !(__exception)
[L1434]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3983]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5650]  COND FALSE  !(!!paused_Pausable[this])
[L3983]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]  COND FALSE  !(revert)
[L3987]  COND TRUE   DType[this] == KardiachainToken
[L3988]  CALL        call __var_23 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3066]  COND TRUE   DType[this] == KardiachainToken
[L3067]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3484]              __var_14 := null;
[L3485]  COND FALSE  !(!(owner_s538 != null))
[L3489]              __var_15 := null;
[L3490]  COND FALSE  !(!(spender_s538 != null))
[L3494]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3495]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3496]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3497]              assert { :EventEmitted "Approval_ERC20" } true;
[L3067]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3068]  COND FALSE  !(revert)
[L3084]              __ret_0_ := true;
[L3988]  RET         call __var_23 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3989]  COND FALSE  !(revert)
[L4000]              __ret_0_ := __var_23;
[L1434]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1435]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s765] == value_s765) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && paused_Pausable[this] == old(paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:41,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:41,887 INFO  L82        PathProgramCache]: Analyzing trace with hash 2129716492, now seen corresponding path program 1 times
[2020-11-24 20:02:41,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:41,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:42,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 169 trivial. 0 not checked.
[2020-11-24 20:02:42,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:42,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-24 20:02:42,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:42,195 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:02:42,195 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=271, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:02:42,195 INFO  L87              Difference]: Start difference. First operand 6130 states and 7241 transitions. cyclomatic complexity: 1115 Second operand 18 states.
[2020-11-24 20:02:45,415 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:45,415 INFO  L93              Difference]: Finished difference Result 6330 states and 7609 transitions.
[2020-11-24 20:02:45,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-24 20:02:45,415 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6330 states and 7609 transitions.
[2020-11-24 20:02:45,429 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:02:45,448 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6330 states to 6330 states and 7609 transitions.
[2020-11-24 20:02:45,448 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1696
[2020-11-24 20:02:45,449 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1696
[2020-11-24 20:02:45,449 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6330 states and 7609 transitions.
[2020-11-24 20:02:45,453 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:45,453 INFO  L728         BuchiCegarLoop]: Abstraction has 6330 states and 7609 transitions.
[2020-11-24 20:02:45,456 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6330 states and 7609 transitions.
[2020-11-24 20:02:45,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6330 to 6287.
[2020-11-24 20:02:45,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6287 states.
[2020-11-24 20:02:45,507 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6287 states to 6287 states and 7558 transitions.
[2020-11-24 20:02:45,507 INFO  L751         BuchiCegarLoop]: Abstraction has 6287 states and 7558 transitions.
[2020-11-24 20:02:45,507 INFO  L631         BuchiCegarLoop]: Abstraction has 6287 states and 7558 transitions.
[2020-11-24 20:02:45,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:02:45,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6287 states and 7558 transitions.
[2020-11-24 20:02:45,515 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:02:45,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:45,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:45,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:45,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L3962]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3963]  CALL        call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3042]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3043]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3465]              __var_14 := null;
[L3466]  COND TRUE   !(owner_s538 != null)
[L3467]              revert := true;
[L3043]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3044]  COND TRUE   revert
[L3963]  RET         call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3964]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:45,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:45,519 INFO  L82        PathProgramCache]: Analyzing trace with hash 1665831986, now seen corresponding path program 1 times
[2020-11-24 20:02:45,520 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:45,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:45,592 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:02:45,592 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:45,592 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:02:45,593 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:02:45,593 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:02:45,593 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:02:45,593 INFO  L87              Difference]: Start difference. First operand 6287 states and 7558 transitions. cyclomatic complexity: 1279 Second operand 7 states.
[2020-11-24 20:02:45,744 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:45,745 INFO  L93              Difference]: Finished difference Result 6331 states and 7630 transitions.
[2020-11-24 20:02:45,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:02:45,745 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6331 states and 7630 transitions.
[2020-11-24 20:02:45,759 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:02:45,778 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6331 states to 6291 states and 7584 transitions.
[2020-11-24 20:02:45,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1696
[2020-11-24 20:02:45,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1696
[2020-11-24 20:02:45,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6291 states and 7584 transitions.
[2020-11-24 20:02:45,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:45,784 INFO  L728         BuchiCegarLoop]: Abstraction has 6291 states and 7584 transitions.
[2020-11-24 20:02:45,787 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6291 states and 7584 transitions.
[2020-11-24 20:02:45,826 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6291 to 6291.
[2020-11-24 20:02:45,826 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6291 states.
[2020-11-24 20:02:45,835 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6291 states to 6291 states and 7584 transitions.
[2020-11-24 20:02:45,835 INFO  L751         BuchiCegarLoop]: Abstraction has 6291 states and 7584 transitions.
[2020-11-24 20:02:45,835 INFO  L631         BuchiCegarLoop]: Abstraction has 6291 states and 7584 transitions.
[2020-11-24 20:02:45,835 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:02:45,835 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6291 states and 7584 transitions.
[2020-11-24 20:02:45,842 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:02:45,842 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:45,842 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:45,843 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:45,844 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L3962]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3963]  CALL        call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3042]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3043]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3465]              __var_14 := null;
[L3466]  COND FALSE  !(!(owner_s538 != null))
[L3470]              __var_15 := null;
[L3471]  COND TRUE   !(spender_s538 != null)
[L3472]              revert := true;
[L3043]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3044]  COND TRUE   revert
[L3963]  RET         call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3964]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND FALSE  !(gas >= 0)
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:45,847 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:45,847 INFO  L82        PathProgramCache]: Analyzing trace with hash 1678508475, now seen corresponding path program 1 times
[2020-11-24 20:02:45,847 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:45,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:45,874 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:45,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:45,951 INFO  L82        PathProgramCache]: Analyzing trace with hash -1380840679, now seen corresponding path program 1 times
[2020-11-24 20:02:45,951 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:45,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:02:45,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:02:45,959 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:02:45,959 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:02:45,959 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-24 20:02:45,959 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:02:45,959 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:02:45,959 INFO  L87              Difference]: Start difference. First operand 6291 states and 7584 transitions. cyclomatic complexity: 1301 Second operand 4 states.
[2020-11-24 20:02:46,279 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:02:46,279 INFO  L93              Difference]: Finished difference Result 6712 states and 8163 transitions.
[2020-11-24 20:02:46,279 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:02:46,279 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6712 states and 8163 transitions.
[2020-11-24 20:02:46,306 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 56
[2020-11-24 20:02:46,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6712 states to 6712 states and 8163 transitions.
[2020-11-24 20:02:46,331 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1728
[2020-11-24 20:02:46,332 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1728
[2020-11-24 20:02:46,332 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6712 states and 8163 transitions.
[2020-11-24 20:02:46,337 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:02:46,337 INFO  L728         BuchiCegarLoop]: Abstraction has 6712 states and 8163 transitions.
[2020-11-24 20:02:46,340 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6712 states and 8163 transitions.
[2020-11-24 20:02:46,407 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6712 to 5852.
[2020-11-24 20:02:46,407 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5852 states.
[2020-11-24 20:02:46,415 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5852 states to 5852 states and 6814 transitions.
[2020-11-24 20:02:46,415 INFO  L751         BuchiCegarLoop]: Abstraction has 5852 states and 6814 transitions.
[2020-11-24 20:02:46,415 INFO  L631         BuchiCegarLoop]: Abstraction has 5852 states and 6814 transitions.
[2020-11-24 20:02:46,415 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:02:46,415 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5852 states and 6814 transitions.
[2020-11-24 20:02:46,424 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:02:46,424 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:02:46,424 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:02:46,426 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:02:46,426 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Pausable0 := false;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6477]              assume null == 0;
[L6478]  CALL        call this := FreshRefGenerator__success();
[L2736]              havoc newRef;
[L2737]              assume Alloc[newRef] == false;
[L2738]              Alloc[newRef] := true;
[L2739]              assume newRef != null;
[L6478]  RET         call this := FreshRefGenerator__success();
[L6479]              assume now >= 0;
[L6480]              assume DType[this] == KardiachainToken;
[L6481]              assume msgvalue_MSG == 0;
[L6482]              gas := gas - 53000;
[L6483]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6484]              assume !revert && gas >= 0;
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND FALSE  !(choice == 20)
[L6348]  COND FALSE  !(choice == 19)
[L6354]  COND FALSE  !(choice == 18)
[L6361]  COND FALSE  !(choice == 17)
[L6367]  COND TRUE   choice == 16
[L6368]              gas := gas - 21000;
[L6369]  COND TRUE   gas >= 0
[L6370]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6371]              assume msgvalue_MSG == 0;
[L6372]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L3962]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3963]  CALL        call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3042]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3043]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3465]              __var_14 := null;
[L3466]  COND FALSE  !(!(owner_s538 != null))
[L3470]              __var_15 := null;
[L3471]  COND TRUE   !(spender_s538 != null)
[L3472]              revert := true;
[L3043]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3044]  COND TRUE   revert
[L3963]  RET         call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3964]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6487]  CALL        call CorralChoice_KardiachainToken(this);
[L6291]              havoc msgsender_MSG;
[L6292]              havoc msgvalue_MSG;
[L6293]              havoc choice;
[L6294]              havoc __ret_0_totalSupply;
[L6295]              havoc account_s211;
[L6296]              havoc __ret_0_balanceOf;
[L6297]              havoc to_s726;
[L6298]              havoc value_s726;
[L6299]              havoc __ret_0_transfer;
[L6300]              havoc owner_s246;
[L6301]              havoc spender_s246;
[L6302]              havoc __ret_0_allowance;
[L6303]              havoc spender_s765;
[L6304]              havoc value_s765;
[L6305]              havoc __ret_0_approve;
[L6306]              havoc from_s747;
[L6307]              havoc to_s747;
[L6308]              havoc value_s747;
[L6309]              havoc __ret_0_transferFrom;
[L6310]              havoc spender_s783;
[L6311]              havoc addedValue_s783;
[L6312]              havoc success_s783;
[L6313]              havoc spender_s801;
[L6314]              havoc subtractedValue_s801;
[L6315]              havoc success_s801;
[L6316]              havoc __ret_0_owner;
[L6317]              havoc __ret_0_isOwner;
[L6318]              havoc newOwner_s646;
[L6319]              havoc __ret_0_paused;
[L6320]              havoc __ret_0_name;
[L6321]              havoc __ret_0_symbol;
[L6322]              havoc __ret_0_decimals;
[L6323]              havoc __ret_0_initialSupply;
[L6324]              havoc amount_s850;
[L6325]              havoc account_s863;
[L6326]              havoc amount_s863;
[L6327]              havoc tmpNow;
[L6328]              havoc gas;
[L6329]              assume gas > 4000000 && gas <= 8000000;
[L6330]              tmpNow := now;
[L6331]              havoc now;
[L6332]              assume now > tmpNow;
[L6333]              assume msgsender_MSG != null;
[L6334]              assume DType[msgsender_MSG] != SafeMath;
[L6335]              assume DType[msgsender_MSG] != IERC20;
[L6336]              assume DType[msgsender_MSG] != ERC20;
[L6337]              assume DType[msgsender_MSG] != Ownable;
[L6338]              assume DType[msgsender_MSG] != Pausable;
[L6339]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6340]              assume DType[msgsender_MSG] != KardiachainToken;
[L6341]              Alloc[msgsender_MSG] := true;
[L6342]  COND TRUE   choice == 20
[L6343]              gas := gas - 21000;
[L6344]  COND TRUE   gas >= 0
[L6345]              assume msgvalue_MSG == 0;
[L6346]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L273]               havoc __exception;
[L274]               revert := false;
[L275]   COND FALSE  !(__exception)
[L299]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]              __ret_0_ := _totalSupply_ERC20[this];
[L299]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L300]               assume !revert && gas >= 0;
[L6346]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L6487]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:02:46,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:46,429 INFO  L82        PathProgramCache]: Analyzing trace with hash 1678508475, now seen corresponding path program 2 times
[2020-11-24 20:02:46,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:46,447 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:46,462 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:46,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:46,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 1507390062, now seen corresponding path program 1 times
[2020-11-24 20:02:46,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:46,499 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:46,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:46,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:02:46,506 INFO  L82        PathProgramCache]: Analyzing trace with hash -1303295884, now seen corresponding path program 1 times
[2020-11-24 20:02:46,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:02:46,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:46,534 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:02:46,822 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 266
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-24 20:02:46,939 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-24 20:02:47,426 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 103
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:02:47,846 WARN  L188               SmtUtils]: Spent 299.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 238
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 20:02:48,143 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification that was a NOOP. DAG size: 251
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
[2020-11-24 20:02:48,740 WARN  L188               SmtUtils]: Spent 317.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 193
[2020-11-24 20:02:49,165 WARN  L188               SmtUtils]: Spent 422.00 ms on a formula simplification. DAG size of input: 255 DAG size of output: 240
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-24 20:02:49,299 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 142
[2020-11-24 20:02:49,457 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification that was a NOOP. DAG size: 304
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-24 20:02:49,791 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 245
[2020-11-24 20:02:50,984 WARN  L188               SmtUtils]: Spent 1.19 s on a formula simplification. DAG size of input: 450 DAG size of output: 441
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
[2020-11-24 20:02:51,274 WARN  L188               SmtUtils]: Spent 274.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 194
[2020-11-24 20:02:51,506 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 302
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 20:02:52,315 WARN  L188               SmtUtils]: Spent 801.00 ms on a formula simplification. DAG size of input: 223 DAG size of output: 213
[2020-11-24 20:02:52,936 WARN  L188               SmtUtils]: Spent 619.00 ms on a formula simplification. DAG size of input: 323 DAG size of output: 322
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #9: 28099 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 28099 to 56197
[2020-11-24 20:02:54,848 WARN  L188               SmtUtils]: Spent 1.90 s on a formula simplification. DAG size of input: 333 DAG size of output: 317
[2020-11-24 20:02:54,861 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:54,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:02:54,886 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:02:54 BasicIcfg
[2020-11-24 20:02:54,886 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:02:54,886 INFO  L168              Benchmark]: Toolchain (without parser) took 21683.41 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 1.7 GB in the end (delta: -807.9 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,887 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,887 INFO  L168              Benchmark]: Boogie Preprocessor took 101.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,887 INFO  L168              Benchmark]: UtopiaSpecLang took 61.82 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,887 INFO  L168              Benchmark]: Boogie Printer took 19.23 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,887 INFO  L168              Benchmark]: RCFGBuilder took 947.22 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -110.1 MB). Peak memory consumption was 196.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,888 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.05 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 12.8 MB). Peak memory consumption was 12.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,888 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1631.76 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -45.0 MB). Peak memory consumption was 504.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,889 INFO  L168              Benchmark]: BlockEncodingV2 took 200.96 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 962.2 MB in the end (delta: 88.5 MB). Peak memory consumption was 88.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,889 INFO  L168              Benchmark]: BuchiAutomizer took 18676.49 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 962.2 MB in the beginning and 1.7 GB in the end (delta: -775.5 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-24 20:02:54,892 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6100 locations, 11204 edges
  - StatisticsResult: Encoded RCFG
    5984 locations, 10882 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 101.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.82 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.23 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 947.22 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -110.1 MB). Peak memory consumption was 196.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.05 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 12.8 MB). Peak memory consumption was 12.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1631.76 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -45.0 MB). Peak memory consumption was 504.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 200.96 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 962.2 MB in the end (delta: 88.5 MB). Peak memory consumption was 88.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 18676.49 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 962.2 MB in the beginning and 1.7 GB in the end (delta: -775.5 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2376 locations, 3410 edges
  - StatisticsResult: BuchiProgram size
    6100 locations, 11204 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 5852 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 18.6s and 10 iterations.  TraceHistogramMax:4. Analysis of lassos took 9.7s. Construction of modules took 5.6s. BÃ¼chi inclusion checks took 2.0s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 9 MinimizatonAttempts, 3620 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 6291 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 40036 SDtfs, 29268 SDslu, 81344 SDs, 0 SdLazy, 97183 SolverSat, 5220 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(5000000015) = (new KardiachainToken)({from : 5000000007});
[L1606]              havoc __exception;
[L1607]              revert := false;
[L1608]  COND FALSE  !(__exception)
[L1632]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L4180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4181]  COND FALSE  !(revert)
[L4184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L4184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4185]  COND FALSE  !(revert)
[L4188]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L4188]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4189]  COND FALSE  !(revert)
[L4192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L4192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4193]  COND FALSE  !(revert)
[L4196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L3832]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3833]  COND FALSE  !(revert)
[L3836]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2885]              assume msgsender_MSG != null;
[L2886]              Balance[this] := 0;
[L2900]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2901]  COND FALSE  !(revert)
[L2946]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2947]  COND FALSE  !(revert)
[L2950]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]              assume msgsender_MSG != null;
[L2923]              Balance[this] := 0;
[L2924]              _balances_ERC20[this] := zeroRefintArr();
[L2925]              sum__balances0[this] := 0;
[L2926]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2927]              sum__allowances1[this] := 0;
[L2928]              _totalSupply_ERC20[this] := 0;
[L2950]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2951]  COND FALSE  !(revert)
[L3836]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3837]  COND FALSE  !(revert)
[L3840]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3840]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3841]  COND FALSE  !(revert)
[L3844]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3603]              assume msgsender_MSG != null;
[L3604]              Balance[this] := 0;
[L3605]              _owner_Ownable[this] := null;
[L3607]              _owner_Ownable[this] := msgsender_MSG;
[L3608]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3621]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3622]  COND FALSE  !(revert)
[L3714]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3715]  COND FALSE  !(revert)
[L3718]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3694]              assume msgsender_MSG != null;
[L3695]              Balance[this] := 0;
[L3696]              paused_Pausable[this] := false;
[L3718]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3719]  COND FALSE  !(revert)
[L3844]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3845]  COND FALSE  !(revert)
[L3848]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3801]              assume msgsender_MSG != null;
[L3802]              Balance[this] := 0;
[L3848]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3849]  COND FALSE  !(revert)
[L4196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4197]  COND FALSE  !(revert)
[L4200]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4130]              assume msgsender_MSG != null;
[L4131]              Balance[this] := 0;
[L4132]              name_KardiachainToken[this] := -505187484;
[L4133]              symbol_KardiachainToken[this] := 1585535741;
[L4134]              decimals_KardiachainToken[this] := 18;
[L4135]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4136]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4138]  COND TRUE   DType[this] == KardiachainToken
[L4139]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3392]              __var_8 := null;
[L3393]  COND FALSE  !(!(account_s453 != null))
[L3397]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3397]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3398]  COND FALSE  !(revert)
[L3401]              _totalSupply_ERC20[this] := __var_9;
[L3402]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2789]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2790]  COND FALSE  !(!(c_s26 >= a_s26))
[L2794]              __ret_0_ := c_s26;
[L3402]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3403]  COND FALSE  !(revert)
[L3406]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3407]              _balances_ERC20[this][account_s453] := __var_10;
[L3408]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3409]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4139]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4140]  COND FALSE  !(revert)
[L4200]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4201]  COND FALSE  !(revert)
[L1632]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1633]              assume !revert && gas >= 0;
[L6483]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(5000000015).approve~address~uint256.gas(3979002)({from : 5000000011, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s765;
[L3]                 call_approve_ERC20Pausable0 := true;
[L3]                 call_approve_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1408]              havoc __exception;
[L1409]              revert := false;
[L1410]  COND TRUE   __exception
[L1411]              __tmp__Balance := Balance;
[L1412]              __tmp__DType := DType;
[L1413]              __tmp__Alloc := Alloc;
[L1414]              __tmp__balance_ADDR := balance_ADDR;
[L1415]              __tmp__M_Ref_int := M_Ref_int;
[L1416]              __tmp__sum__balances0 := sum__balances0;
[L1417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1418]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1419]              __tmp__sum__allowances1 := sum__allowances1;
[L1420]              __tmp__Length := Length;
[L1421]              __tmp__now := now;
[L1422]              __tmp___balances_ERC20 := _balances_ERC20;
[L1423]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1424]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1425]              __tmp___owner_Ownable := _owner_Ownable;
[L1426]              __tmp__paused_Pausable := paused_Pausable;
[L1427]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1428]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1429]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1430]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1431]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3958]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5642]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L3958]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L3962]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3963]  CALL        call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3042]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L3043]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3465]              __var_14 := null;
[L3466]  COND FALSE  !(!(owner_s538 != null))
[L3470]              __var_15 := null;
[L3471]  COND TRUE   !(spender_s538 != null)
[L3472]              revert := true;
[L3043]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3044]  COND TRUE   revert
[L3963]  RET         call __var_23 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3964]  COND TRUE   revert
[L1431]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1432]              assume revert || gas < 0;
[L6372]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);

Loop:
ERC20(5000000015).totalSupply.gas(3979001)({from : 5000000012});
[L273]               havoc __exception;
[L274]               revert := false;
[L275]   COND FALSE  !(__exception)
[L299]   CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]              __ret_0_ := _totalSupply_ERC20[this];
[L299]   RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L300]               assume !revert && gas >= 0;
[L6346]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
