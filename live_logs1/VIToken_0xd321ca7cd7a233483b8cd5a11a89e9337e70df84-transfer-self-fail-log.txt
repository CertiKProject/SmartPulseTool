This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:39:01,010 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:39:01,011 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:39:01,022 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:39:01,023 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:39:01,024 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:39:01,025 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:39:01,027 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:39:01,028 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:39:01,029 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:39:01,030 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:39:01,030 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:39:01,031 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:39:01,032 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:39:01,032 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:39:01,033 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:39:01,034 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:39:01,035 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:39:01,036 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:39:01,038 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:39:01,039 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:39:01,039 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:39:01,041 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:39:01,041 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:39:01,041 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:39:01,042 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:39:01,042 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:39:01,043 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:39:01,043 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:39:01,043 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:39:01,044 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:39:01,044 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:39:01,045 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:39:01,045 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:39:01,046 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:39:01,046 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:39:01,047 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:39:01,047 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:39:01,047 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:39:01,048 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:39:01,048 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:39:01,049 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:39:01,057 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:39:01,057 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:39:01,058 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:39:01,058 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:39:01,058 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:39:01,058 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:39:01,058 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:39:01,058 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:39:01,059 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:39:01,059 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:39:01,059 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:39:01,060 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:39:01,060 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:39:01,089 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:39:01,104 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:39:01,106 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:39:01,107 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:39:01,108 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:39:01,108 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl
[2020-11-25 08:39:01,108 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl'
[2020-11-25 08:39:01,213 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:39:01,215 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:39:01,215 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:39:01,215 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:39:01,215 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:39:01,232 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,234 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,280 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,280 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,310 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,325 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,338 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,353 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:39:01,354 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:39:01,354 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:39:01,356 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:39:01,360 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/1) ...
[2020-11-25 08:39:01,381 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 08:39:01,387 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 08:39:01,395 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 08:39:01,409 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s336 && amount_s336>_balances_ERC20[this][msg.sender] ) && amount_s336>=0 ) && amount_s336<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s336]>=0 ) && _balances_ERC20[this][recipient_s336]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPGT,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s336,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:39:01,417 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 08:39:01,417 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:39:01,433 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:01 PropertyContainer
[2020-11-25 08:39:01,433 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:39:01,433 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:39:01,433 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:39:01,434 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:39:01,434 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/2) ...
[2020-11-25 08:39:01,435 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:39:01,435 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:39:01,457 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:01" (2/2) ...
[2020-11-25 08:39:01,457 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:39:01,458 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:39:01,458 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:39:01,458 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:39:01,459 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/2) ...
[2020-11-25 08:39:01,513 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:39:01,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:39:01,516 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:39:01,517 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:39:01,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:39:01,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:39:01,518 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:39:01,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:39:01,518 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:39:01,519 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:39:01,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:39:01,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:39:01,519 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:39:01,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:39:01,520 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:39:01,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:39:01,520 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:39:01,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:39:01,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 08:39:01,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:39:01,521 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:39:01,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:39:01,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:39:01,522 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:39:01,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:39:01,523 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:39:01,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:39:01,523 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:39:01,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:39:01,523 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:39:01,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:39:01,523 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:39:01,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:39:01,524 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:39:01,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:39:01,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:39:01,526 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:39:01,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:39:01,526 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:39:01,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:39:01,526 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:39:01,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:39:01,526 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:39:01,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:39:01,526 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:39:01,527 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:39:01,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:39:01,527 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:39:01,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:39:01,527 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:39:01,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:39:01,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 08:39:01,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:39:01,528 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken
[2020-11-25 08:39:01,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken
[2020-11-25 08:39:01,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:39:01,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:39:01,529 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:39:01,530 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_VIToken
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:39:01,531 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:39:01,532 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:39:01,533 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:39:01,534 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:39:01,535 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,536 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:39:01,537 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:39:01,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:39:01,539 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__success
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure VIToken_VIToken__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__success
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_VIToken__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:39:01,540 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:39:01,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:39:01,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:39:01,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 08:39:01,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:39:01,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:39:01,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:01,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:39:01,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:39:01,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:39:01,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:39:01,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__fail
[2020-11-25 08:39:01,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken_NoBaseCtor__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure VIToken_VIToken__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_VIToken__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_VIToken__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:39:01,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:39:01,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_VIToken
[2020-11-25 08:39:01,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:39:01,553 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:39:01,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:39:01,873 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:01,874 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:39:02,659 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:39:02,660 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 08:39:02,662 INFO  L202        PluginConnector]: Adding new model VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:02 BoogieIcfgContainer
[2020-11-25 08:39:02,662 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:01" (2/2) ...
[2020-11-25 08:39:02,662 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:39:02,663 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@325ac203 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:02, skipping insertion in model container
[2020-11-25 08:39:02,663 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:39:02,663 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:39:02,663 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:39:02,664 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:39:02,664 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/3) ...
[2020-11-25 08:39:02,665 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1b8507d1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:02, skipping insertion in model container
[2020-11-25 08:39:02,665 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:01" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:39:02,699 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:02 NWAContainer
[2020-11-25 08:39:02,700 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:39:02,700 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:39:02,700 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:39:02,701 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:39:02,701 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:02" (3/4) ...
[2020-11-25 08:39:02,702 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3dbafa05 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:02, skipping insertion in model container
[2020-11-25 08:39:02,702 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:02" (4/4) ...
[2020-11-25 08:39:02,705 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:39:02,711 INFO  L110   BuchiProductObserver]: Initial RCFG 3088 locations, 4752 edges
[2020-11-25 08:39:02,711 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:39:02,725 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:39:04,972 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:39:04,983 INFO  L110   BuchiProductObserver]: BuchiProgram size 8168 locations, 15609 edges
[2020-11-25 08:39:04,983 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:04 BoogieIcfgContainer
[2020-11-25 08:39:04,984 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:39:04,984 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:39:04,984 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:39:04,985 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:39:04,986 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:04" (1/1) ...
[2020-11-25 08:39:05,125 INFO  L313           BlockEncoder]: Initial Icfg 8168 locations, 15609 edges
[2020-11-25 08:39:05,125 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:39:05,126 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:39:05,126 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:39:05,126 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:39:05,142 INFO  L70    emoveInfeasibleEdges]: Removed 255 edges and 24 locations because of local infeasibility
[2020-11-25 08:39:05,159 INFO  L70        RemoveSinkStates]: Removed 276 edges and 166 locations by removing sink states
[2020-11-25 08:39:05,178 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:39:05,182 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:39:05,187 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:39:05,187 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:39:05,192 INFO  L313           BlockEncoder]: Encoded RCFG 7946 locations, 15031 edges
[2020-11-25 08:39:05,193 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:39:05 BasicIcfg
[2020-11-25 08:39:05,193 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:39:05,193 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:39:05,193 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:39:05,195 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:39:05,195 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,195 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:39:01" (1/6) ...
[2020-11-25 08:39:05,197 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@694060ba and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:05, skipping insertion in model container
[2020-11-25 08:39:05,197 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,197 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:39:01" (2/6) ...
[2020-11-25 08:39:05,197 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@694060ba and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:05, skipping insertion in model container
[2020-11-25 08:39:05,197 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,197 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:39:02" (3/6) ...
[2020-11-25 08:39:05,197 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@694060ba and model type VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:39:05, skipping insertion in model container
[2020-11-25 08:39:05,197 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,197 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:39:02" (4/6) ...
[2020-11-25 08:39:05,197 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@694060ba and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:39:05, skipping insertion in model container
[2020-11-25 08:39:05,197 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,197 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:39:04" (5/6) ...
[2020-11-25 08:39:05,198 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@694060ba and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:39:05, skipping insertion in model container
[2020-11-25 08:39:05,198 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:39:05,198 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:39:05" (6/6) ...
[2020-11-25 08:39:05,199 INFO  L404   chiAutomizerObserver]: Analyzing ICFG VIToken_0xd321ca7cd7a233483b8cd5a11a89e9337e70df84_transfer-self-fail.bpl_BEv2
[2020-11-25 08:39:05,235 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:39:05,235 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:39:05,235 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:39:05,235 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:39:05,236 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:39:05,236 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:39:05,236 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:39:05,236 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:39:05,236 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:39:05,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7946 states.
[2020-11-25 08:39:05,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:05,361 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:05,361 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:05,368 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:05,368 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:05,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:39:05,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7946 states.
[2020-11-25 08:39:05,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:05,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:05,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:05,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:05,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND TRUE   choice == 18
[L8128]              gas := gas - 21000;
[L8129]  COND FALSE  !(gas >= 0)
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:05,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:05,413 INFO  L82        PathProgramCache]: Analyzing trace with hash 712057037, now seen corresponding path program 1 times
[2020-11-25 08:39:05,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:05,435 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:05,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:39:05,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:05,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:05,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:05,868 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:05,869 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:05,870 INFO  L87              Difference]: Start difference. First operand 7946 states. Second operand 3 states.
[2020-11-25 08:39:06,212 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:06,213 INFO  L93              Difference]: Finished difference Result 4484 states and 5682 transitions.
[2020-11-25 08:39:06,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:06,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4484 states and 5682 transitions.
[2020-11-25 08:39:06,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:06,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4484 states to 4484 states and 5682 transitions.
[2020-11-25 08:39:06,270 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 08:39:06,273 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 849
[2020-11-25 08:39:06,273 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4484 states and 5682 transitions.
[2020-11-25 08:39:06,284 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:06,284 INFO  L728         BuchiCegarLoop]: Abstraction has 4484 states and 5682 transitions.
[2020-11-25 08:39:06,299 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4484 states and 5682 transitions.
[2020-11-25 08:39:06,369 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4484 to 4484.
[2020-11-25 08:39:06,369 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4484 states.
[2020-11-25 08:39:06,377 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4484 states to 4484 states and 5682 transitions.
[2020-11-25 08:39:06,378 INFO  L751         BuchiCegarLoop]: Abstraction has 4484 states and 5682 transitions.
[2020-11-25 08:39:06,378 INFO  L631         BuchiCegarLoop]: Abstraction has 4484 states and 5682 transitions.
[2020-11-25 08:39:06,378 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:39:06,378 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4484 states and 5682 transitions.
[2020-11-25 08:39:06,388 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:39:06,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:06,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:06,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:06,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:06,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:06,394 INFO  L82        PathProgramCache]: Analyzing trace with hash 697588616, now seen corresponding path program 1 times
[2020-11-25 08:39:06,395 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:06,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:06,423 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:39:06,424 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:06,424 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:06,425 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:06,425 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:06,425 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:06,425 INFO  L87              Difference]: Start difference. First operand 4484 states and 5682 transitions. cyclomatic complexity: 1200 Second operand 3 states.
[2020-11-25 08:39:06,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:06,575 INFO  L93              Difference]: Finished difference Result 5721 states and 7029 transitions.
[2020-11-25 08:39:06,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:06,577 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5721 states and 7029 transitions.
[2020-11-25 08:39:06,594 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:06,618 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5721 states to 5721 states and 7029 transitions.
[2020-11-25 08:39:06,618 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1177
[2020-11-25 08:39:06,619 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1177
[2020-11-25 08:39:06,619 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5721 states and 7029 transitions.
[2020-11-25 08:39:06,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:06,626 INFO  L728         BuchiCegarLoop]: Abstraction has 5721 states and 7029 transitions.
[2020-11-25 08:39:06,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5721 states and 7029 transitions.
[2020-11-25 08:39:06,695 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5721 to 5267.
[2020-11-25 08:39:06,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5267 states.
[2020-11-25 08:39:06,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5267 states to 5267 states and 6483 transitions.
[2020-11-25 08:39:06,705 INFO  L751         BuchiCegarLoop]: Abstraction has 5267 states and 6483 transitions.
[2020-11-25 08:39:06,705 INFO  L631         BuchiCegarLoop]: Abstraction has 5267 states and 6483 transitions.
[2020-11-25 08:39:06,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:39:06,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5267 states and 6483 transitions.
[2020-11-25 08:39:06,715 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:06,715 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:06,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:06,719 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:06,719 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND FALSE  !(DType[this] == VIToken)
[L4763]  COND FALSE  !(DType[this] == ERC20Capped)
[L4768]  COND FALSE  !(DType[this] == ERC20Mintable)
[L4773]  COND TRUE   DType[this] == MinterRole
[L4774]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4774]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4775]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:06,725 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:06,725 INFO  L82        PathProgramCache]: Analyzing trace with hash 1192709328, now seen corresponding path program 1 times
[2020-11-25 08:39:06,726 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:06,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:06,814 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:39:06,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:06,815 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:06,815 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:06,815 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:06,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:06,816 INFO  L87              Difference]: Start difference. First operand 5267 states and 6483 transitions. cyclomatic complexity: 1218 Second operand 3 states.
[2020-11-25 08:39:06,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:06,900 INFO  L93              Difference]: Finished difference Result 5272 states and 6488 transitions.
[2020-11-25 08:39:06,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:06,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5272 states and 6488 transitions.
[2020-11-25 08:39:06,916 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:06,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5272 states to 5272 states and 6488 transitions.
[2020-11-25 08:39:06,937 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 08:39:06,938 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 08:39:06,938 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5272 states and 6488 transitions.
[2020-11-25 08:39:06,944 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:06,944 INFO  L728         BuchiCegarLoop]: Abstraction has 5272 states and 6488 transitions.
[2020-11-25 08:39:06,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5272 states and 6488 transitions.
[2020-11-25 08:39:06,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5272 to 5268.
[2020-11-25 08:39:06,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5268 states.
[2020-11-25 08:39:07,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5268 states to 5268 states and 6484 transitions.
[2020-11-25 08:39:07,003 INFO  L751         BuchiCegarLoop]: Abstraction has 5268 states and 6484 transitions.
[2020-11-25 08:39:07,003 INFO  L631         BuchiCegarLoop]: Abstraction has 5268 states and 6484 transitions.
[2020-11-25 08:39:07,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:39:07,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5268 states and 6484 transitions.
[2020-11-25 08:39:07,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:07,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:07,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:07,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:07,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND TRUE   !(account_s758 != null)
[L4652]              revert := true;
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND TRUE   revert
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:07,019 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:07,019 INFO  L82        PathProgramCache]: Analyzing trace with hash 1753013021, now seen corresponding path program 1 times
[2020-11-25 08:39:07,020 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:07,030 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:07,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 08:39:07,129 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:39:07,129 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 08:39:07,129 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:07,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:39:07,130 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:39:07,130 INFO  L87              Difference]: Start difference. First operand 5268 states and 6484 transitions. cyclomatic complexity: 1218 Second operand 12 states.
[2020-11-25 08:39:07,365 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:07,365 INFO  L93              Difference]: Finished difference Result 5328 states and 6575 transitions.
[2020-11-25 08:39:07,365 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 08:39:07,365 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5328 states and 6575 transitions.
[2020-11-25 08:39:07,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:07,396 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5328 states to 5328 states and 6575 transitions.
[2020-11-25 08:39:07,397 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-25 08:39:07,397 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-25 08:39:07,398 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5328 states and 6575 transitions.
[2020-11-25 08:39:07,402 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:07,403 INFO  L728         BuchiCegarLoop]: Abstraction has 5328 states and 6575 transitions.
[2020-11-25 08:39:07,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5328 states and 6575 transitions.
[2020-11-25 08:39:07,449 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5328 to 5312.
[2020-11-25 08:39:07,450 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5312 states.
[2020-11-25 08:39:07,456 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5312 states to 5312 states and 6551 transitions.
[2020-11-25 08:39:07,457 INFO  L751         BuchiCegarLoop]: Abstraction has 5312 states and 6551 transitions.
[2020-11-25 08:39:07,457 INFO  L631         BuchiCegarLoop]: Abstraction has 5312 states and 6551 transitions.
[2020-11-25 08:39:07,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:39:07,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5312 states and 6551 transitions.
[2020-11-25 08:39:07,464 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:07,464 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:07,464 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:07,466 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:07,466 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND TRUE   !!__var_27
[L4601]              revert := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND TRUE   revert
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND TRUE   revert
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND TRUE   revert
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND TRUE   revert
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND TRUE   !(sender_s519 != null)
[L4179]              revert := true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND TRUE   revert
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:07,469 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:07,469 INFO  L82        PathProgramCache]: Analyzing trace with hash 535856888, now seen corresponding path program 1 times
[2020-11-25 08:39:07,470 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:07,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:07,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 08:39:07,517 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:07,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:39:07,518 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:07,518 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:39:07,518 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:39:07,518 INFO  L87              Difference]: Start difference. First operand 5312 states and 6551 transitions. cyclomatic complexity: 1241 Second operand 3 states.
[2020-11-25 08:39:07,606 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:07,606 INFO  L93              Difference]: Finished difference Result 5743 states and 6803 transitions.
[2020-11-25 08:39:07,606 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:39:07,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5743 states and 6803 transitions.
[2020-11-25 08:39:07,620 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:07,640 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5743 states to 5261 states and 6203 transitions.
[2020-11-25 08:39:07,640 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1041
[2020-11-25 08:39:07,641 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1070
[2020-11-25 08:39:07,641 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5261 states and 6203 transitions.
[2020-11-25 08:39:07,646 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:07,646 INFO  L728         BuchiCegarLoop]: Abstraction has 5261 states and 6203 transitions.
[2020-11-25 08:39:07,650 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5261 states and 6203 transitions.
[2020-11-25 08:39:07,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5261 to 4890.
[2020-11-25 08:39:07,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4890 states.
[2020-11-25 08:39:07,692 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4890 states to 4890 states and 5740 transitions.
[2020-11-25 08:39:07,692 INFO  L751         BuchiCegarLoop]: Abstraction has 4890 states and 5740 transitions.
[2020-11-25 08:39:07,692 INFO  L631         BuchiCegarLoop]: Abstraction has 4890 states and 5740 transitions.
[2020-11-25 08:39:07,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:39:07,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4890 states and 5740 transitions.
[2020-11-25 08:39:07,698 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:39:07,698 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:39:07,698 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:39:07,702 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:39:07,702 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L8249]              assume null == 0;
[L8250]  CALL        call this := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L8250]  RET         call this := FreshRefGenerator__success();
[L8251]              assume now >= 0;
[L8252]              assume DType[this] == VIToken;
[L8253]              assume msgvalue_MSG == 0;
[L8254]              gas := gas - 53000;
[L8255]  CALL        call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L1862]              havoc __exception;
[L1863]              revert := false;
[L1864]  COND FALSE  !(__exception)
[L1892]  CALL        call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5409]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5409]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5410]  COND FALSE  !(revert)
[L5413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5414]  COND FALSE  !(revert)
[L5417]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L3049]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3049]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3050]  COND FALSE  !(revert)
[L3053]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3024]              assume msgsender_MSG != null;
[L3025]              Balance[this] := 0;
[L3026]              _name_ERC20Detailed[this] := 890295274;
[L3027]              _symbol_ERC20Detailed[this] := 890295274;
[L3028]              _decimals_ERC20Detailed[this] := 0;
[L3030]              _name_ERC20Detailed[this] := name_s99;
[L3031]              _symbol_ERC20Detailed[this] := symbol_s99;
[L3032]              _decimals_ERC20Detailed[this] := decimals_s99;
[L3053]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s99, symbol_s99, decimals_s99);
[L3054]  COND FALSE  !(revert)
[L5417]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1862846552, 1862846552, DECIMALS_VIToken[this]);
[L5418]  COND FALSE  !(revert)
[L5421]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5421]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5425]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5429]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5430]  COND FALSE  !(revert)
[L5433]  CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5209]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5209]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5213]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5217]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5218]  COND FALSE  !(revert)
[L5221]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5221]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5222]  COND FALSE  !(revert)
[L5225]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5073]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L5073]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5074]  COND FALSE  !(revert)
[L5077]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L5077]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  COND FALSE  !(revert)
[L5081]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3339]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L3339]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3001]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L3001]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3002]  COND FALSE  !(revert)
[L3343]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3344]  COND FALSE  !(revert)
[L3347]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3311]              assume msgsender_MSG != null;
[L3312]              Balance[this] := 0;
[L3313]              _balances_ERC20[this] := zeroRefintArr();
[L3314]              sum__balances0[this] := 0;
[L3315]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3316]              sum__allowances1[this] := 0;
[L3317]              _totalSupply_ERC20[this] := 0;
[L3347]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3348]  COND FALSE  !(revert)
[L5081]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5082]  COND FALSE  !(revert)
[L5085]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4801]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3121]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3106]              assume msgsender_MSG != null;
[L3107]              Balance[this] := 0;
[L3121]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3122]  COND FALSE  !(revert)
[L4801]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4802]  COND FALSE  !(revert)
[L4805]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]              assume msgsender_MSG != null;
[L4727]              Balance[this] := 0;
[L4729]  CALL        call __var_31 := FreshRefGenerator__success();
[L2959]              havoc newRef;
[L2960]              assume Alloc[newRef] == false;
[L2961]              Alloc[newRef] := true;
[L2962]              assume newRef != null;
[L4729]  RET         call __var_31 := FreshRefGenerator__success();
[L4730]  COND FALSE  !(revert)
[L4733]              _minters_MinterRole[this] := __var_31;
[L4735]  COND TRUE   DType[this] == VIToken
[L4736]  CALL        call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L4736]  RET         call __var_30 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4737]  COND FALSE  !(revert)
[L4758]  COND TRUE   DType[this] == VIToken
[L4759]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L5007]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L4596]  CALL        call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4650]              __var_29 := null;
[L4651]  COND FALSE  !(!(account_s758 != null))
[L4655]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s758]][account_s758];
[L4596]  RET         call __var_27 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L4597]  COND FALSE  !(revert)
[L4600]  COND FALSE  !(!!__var_27)
[L4604]              M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := true;
[L5007]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s846);
[L5008]  COND FALSE  !(revert)
[L5011]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L4759]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L4760]  COND FALSE  !(revert)
[L4805]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4806]  COND FALSE  !(revert)
[L5085]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5086]  COND FALSE  !(revert)
[L5089]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5042]              assume msgsender_MSG != null;
[L5043]              Balance[this] := 0;
[L5089]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5090]  COND FALSE  !(revert)
[L5225]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5226]  COND FALSE  !(revert)
[L5229]  CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5168]              assume msgsender_MSG != null;
[L5169]              Balance[this] := 0;
[L5170]              _cap_ERC20Capped[this] := 0;
[L5172]  COND FALSE  !(!(cap_s910 > 0))
[L5176]              _cap_ERC20Capped[this] := cap_s910;
[L5229]  RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s910);
[L5230]  COND FALSE  !(revert)
[L5433]  RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5434]  COND FALSE  !(revert)
[L5437]  CALL        call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5353]              assume msgsender_MSG != null;
[L5354]              Balance[this] := 0;
[L5355]              DECIMALS_VIToken[this] := 18;
[L5356]              __var_39 := DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5357]              INITIAL_SUPPLY_VIToken[this] := 888888888 * (nonlinearPow(10, DECIMALS_VIToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5359]  COND TRUE   DType[this] == VIToken
[L5360]  CALL        call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5293]  COND TRUE   DType[this] == VIToken
[L5294]  CALL        call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]              __ret_0_ := _totalSupply_ERC20[this];
[L5294]  RET         call __var_37 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5295]  COND FALSE  !(revert)
[L5306]  CALL        call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L5306]  RET         call __var_36 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_37, value_s944);
[L5307]  COND FALSE  !(revert)
[L5310]  COND FALSE  !(!(__var_36 <= _cap_ERC20Capped[this]))
[L5314]  COND TRUE   DType[this] == VIToken
[L5315]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(account_s562 != null))
[L4238]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4238]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s562);
[L4239]  COND FALSE  !(revert)
[L4242]              _totalSupply_ERC20[this] := __var_17;
[L4243]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4243]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s562], amount_s562);
[L4244]  COND FALSE  !(revert)
[L4247]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s562];
[L4248]              _balances_ERC20[this][account_s562] := __var_18;
[L4249]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s562];
[L4250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5315]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s944, value_s944);
[L5316]  COND FALSE  !(revert)
[L5360]  RET         call _mint~address~uint256_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_VIToken[this]);
[L5361]  COND FALSE  !(revert)
[L5437]  RET         call VIToken_VIToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5438]  COND FALSE  !(revert)
[L1892]  RET         call VIToken_VIToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1893]              assume !revert && gas >= 0;
[L8255]  RET         call VIToken_VIToken(this, msgsender_MSG, msgvalue_MSG);
[L8256]              assume !revert && gas >= 0;
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

Loop:
[L8259]  CALL        call CorralChoice_VIToken(this);
[L8068]              havoc msgsender_MSG;
[L8069]              havoc msgvalue_MSG;
[L8070]              havoc choice;
[L8071]              havoc __ret_0_totalSupply;
[L8072]              havoc account_s317;
[L8073]              havoc __ret_0_balanceOf;
[L8074]              havoc recipient_s336;
[L8075]              havoc amount_s336;
[L8076]              havoc __ret_0_transfer;
[L8077]              havoc owner_s352;
[L8078]              havoc spender_s352;
[L8079]              havoc __ret_0_allowance;
[L8080]              havoc spender_s371;
[L8081]              havoc amount_s371;
[L8082]              havoc __ret_0_approve;
[L8083]              havoc sender_s407;
[L8084]              havoc recipient_s407;
[L8085]              havoc amount_s407;
[L8086]              havoc __ret_0_transferFrom;
[L8087]              havoc name_s99;
[L8088]              havoc symbol_s99;
[L8089]              havoc decimals_s99;
[L8090]              havoc __ret_0_name;
[L8091]              havoc __ret_0_symbol;
[L8092]              havoc __ret_0_decimals;
[L8093]              havoc spender_s434;
[L8094]              havoc addedValue_s434;
[L8095]              havoc __ret_0_increaseAllowance;
[L8096]              havoc spender_s462;
[L8097]              havoc subtractedValue_s462;
[L8098]              havoc __ret_0_decreaseAllowance;
[L8099]              havoc account_s809;
[L8100]              havoc __ret_0_isMinter;
[L8101]              havoc account_s821;
[L8102]              havoc account_s887;
[L8103]              havoc amount_s887;
[L8104]              havoc __ret_0_mint;
[L8105]              havoc cap_s910;
[L8106]              havoc __ret_0_cap;
[L8107]              havoc __ret_0_DECIMALS;
[L8108]              havoc __ret_0_INITIAL_SUPPLY;
[L8109]              havoc tmpNow;
[L8110]              havoc gas;
[L8111]              assume gas > 4000000 && gas <= 8000000;
[L8112]              tmpNow := now;
[L8113]              havoc now;
[L8114]              assume now > tmpNow;
[L8115]              assume msgsender_MSG != null;
[L8116]              assume DType[msgsender_MSG] != IERC20;
[L8117]              assume DType[msgsender_MSG] != ERC20Detailed;
[L8118]              assume DType[msgsender_MSG] != Context;
[L8119]              assume DType[msgsender_MSG] != SafeMath;
[L8120]              assume DType[msgsender_MSG] != ERC20;
[L8121]              assume DType[msgsender_MSG] != Roles;
[L8122]              assume DType[msgsender_MSG] != MinterRole;
[L8123]              assume DType[msgsender_MSG] != ERC20Mintable;
[L8124]              assume DType[msgsender_MSG] != ERC20Capped;
[L8125]              assume DType[msgsender_MSG] != VIToken;
[L8126]              Alloc[msgsender_MSG] := true;
[L8127]  COND FALSE  !(choice == 18)
[L8133]  COND FALSE  !(choice == 17)
[L8139]  COND TRUE   choice == 16
[L8140]              gas := gas - 21000;
[L8141]  COND TRUE   gas >= 0
[L8142]              assume amount_s336 >= 0 && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8143]              assume msgvalue_MSG == 0;
[L8144]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s336 && amount_s336 > _balances_ERC20[this][msgsender_MSG]) && amount_s336 >= 0) && amount_s336 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s336] >= 0) && _balances_ERC20[this][recipient_s336] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L777]               havoc __exception;
[L778]               revert := false;
[L779]   COND FALSE  !(__exception)
[L807]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L3433]  COND TRUE   DType[this] == VIToken
[L3434]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3135]              __ret_0_ := msgsender_MSG;
[L3434]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3435]  COND FALSE  !(revert)
[L3456]  COND TRUE   DType[this] == VIToken
[L3457]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L4177]              __var_12 := null;
[L4178]  COND FALSE  !(!(sender_s519 != null))
[L4182]              __var_13 := null;
[L4183]  COND FALSE  !(!(recipient_s519 != null))
[L4187]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L3210]  COND FALSE  !(!(b_s192 <= a_s192))
[L3214]              c_s192 := (a_s192 - b_s192) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              __ret_0_ := c_s192;
[L4187]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s519], amount_s519, 790723874);
[L4188]  COND FALSE  !(revert)
[L4191]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s519];
[L4192]              _balances_ERC20[this][sender_s519] := __var_14;
[L4193]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s519];
[L4194]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L3186]              c_s165 := (a_s165 + b_s165) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3187]  COND FALSE  !(!(c_s165 >= a_s165))
[L3191]              __ret_0_ := c_s165;
[L4194]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s519], amount_s519);
[L4195]  COND FALSE  !(revert)
[L4198]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s519];
[L4199]              _balances_ERC20[this][recipient_s519] := __var_15;
[L4200]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s519];
[L4201]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3457]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s336, amount_s336);
[L3458]  COND FALSE  !(revert)
[L3479]              __ret_0_ := true;
[L807]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L808]               assume !revert && gas >= 0;
[L8144]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s336, amount_s336);
[L8259]  RET         call CorralChoice_VIToken(this);

[2020-11-25 08:39:07,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:39:07,709 INFO  L82        PathProgramCache]: Analyzing trace with hash 566315025, now seen corresponding path program 1 times
[2020-11-25 08:39:07,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:39:07,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:39:08,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 1571 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1571 trivial. 0 not checked.
[2020-11-25 08:39:08,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:39:08,013 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 08:39:08,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:39:08,014 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:39:08,014 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=70, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:39:08,014 INFO  L87              Difference]: Start difference. First operand 4890 states and 5740 transitions. cyclomatic complexity: 852 Second operand 10 states.
[2020-11-25 08:39:09,569 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:39:09,569 INFO  L93              Difference]: Finished difference Result 2898 states and 3382 transitions.
[2020-11-25 08:39:09,569 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:39:09,570 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2898 states and 3382 transitions.
[2020-11-25 08:39:09,575 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:39:09,575 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2898 states to 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:39:09,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:39:09,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:39:09,575 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:39:09,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:39:09,575 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:39:09,575 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:39:09,578 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:39:09 BasicIcfg
[2020-11-25 08:39:09,579 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:39:09,579 INFO  L168              Benchmark]: Toolchain (without parser) took 8365.20 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 969.4 MB). Free memory was 929.8 MB in the beginning and 1.3 GB in the end (delta: -391.8 MB). Peak memory consumption was 577.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,580 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,580 INFO  L168              Benchmark]: Boogie Preprocessor took 138.69 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,580 INFO  L168              Benchmark]: UtopiaSpecLang took 79.04 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,580 INFO  L168              Benchmark]: Boogie Printer took 24.20 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,581 INFO  L168              Benchmark]: RCFGBuilder took 1204.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 897.6 MB in the beginning and 906.0 MB in the end (delta: -8.4 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,581 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.76 ms. Allocated memory is still 1.1 GB. Free memory was 906.0 MB in the beginning and 899.2 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,581 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2283.87 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 196.6 MB). Free memory was 899.2 MB in the beginning and 985.5 MB in the end (delta: -86.3 MB). Peak memory consumption was 473.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,582 INFO  L168              Benchmark]: BlockEncodingV2 took 209.10 ms. Allocated memory is still 1.3 GB. Free memory was 982.1 MB in the beginning and 864.8 MB in the end (delta: 117.3 MB). Peak memory consumption was 117.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,582 INFO  L168              Benchmark]: BuchiAutomizer took 4385.44 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 715.1 MB). Free memory was 864.8 MB in the beginning and 1.3 GB in the end (delta: -456.8 MB). Peak memory consumption was 258.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:39:09,584 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8168 locations, 15609 edges
  - StatisticsResult: Encoded RCFG
    7946 locations, 15031 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 138.69 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 79.04 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.20 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1204.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 897.6 MB in the beginning and 906.0 MB in the end (delta: -8.4 MB). Peak memory consumption was 185.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.76 ms. Allocated memory is still 1.1 GB. Free memory was 906.0 MB in the beginning and 899.2 MB in the end (delta: 6.8 MB). Peak memory consumption was 6.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2283.87 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 196.6 MB). Free memory was 899.2 MB in the beginning and 985.5 MB in the end (delta: -86.3 MB). Peak memory consumption was 473.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 209.10 ms. Allocated memory is still 1.3 GB. Free memory was 982.1 MB in the beginning and 864.8 MB in the end (delta: 117.3 MB). Peak memory consumption was 117.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4385.44 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 715.1 MB). Free memory was 864.8 MB in the beginning and 1.3 GB in the end (delta: -456.8 MB). Peak memory consumption was 258.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3088 locations, 4752 edges
  - StatisticsResult: BuchiProgram size
    8168 locations, 15609 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.3s and 7 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.0s. Construction of modules took 1.5s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 5 MinimizatonAttempts, 845 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5312 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 31118 SDtfs, 14457 SDslu, 69871 SDs, 0 SdLazy, 20689 SolverSat, 3722 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
