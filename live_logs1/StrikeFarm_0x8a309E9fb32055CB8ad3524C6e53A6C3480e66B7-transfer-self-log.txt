This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:53:14,078 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:53:14,079 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:53:14,086 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:53:14,086 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:53:14,087 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:53:14,087 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:53:14,088 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:53:14,089 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:53:14,090 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:53:14,090 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:53:14,090 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:53:14,091 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:53:14,091 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:53:14,092 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:53:14,092 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:53:14,093 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:53:14,094 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:53:14,095 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:53:14,096 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:53:14,097 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:53:14,098 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:53:14,099 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:53:14,099 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:53:14,100 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:53:14,100 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:53:14,100 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:53:14,101 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:53:14,101 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:53:14,101 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:53:14,102 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:53:14,102 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:53:14,103 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:53:14,103 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:53:14,104 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:53:14,104 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:53:14,104 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:53:14,104 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:53:14,104 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:53:14,105 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:53:14,106 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:53:14,106 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:53:14,111 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:53:14,111 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:53:14,112 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:53:14,112 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:53:14,112 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:53:14,112 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:53:14,113 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:53:14,113 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:53:14,113 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:53:14,133 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:53:14,143 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:53:14,146 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:53:14,148 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:53:14,149 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:53:14,149 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl
[2020-11-25 05:53:14,150 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl'
[2020-11-25 05:53:14,202 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:53:14,203 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:53:14,203 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:53:14,203 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:53:14,203 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:53:14,214 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,216 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,240 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,241 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,258 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,267 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,272 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,280 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:53:14,281 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:53:14,281 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:53:14,283 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:53:14,286 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/1) ...
[2020-11-25 05:53:14,299 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 05:53:14,303 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 05:53:14,309 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 05:53:14,314 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s140 && amount_s140<=_balances_ERC20[this][msg.sender] ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:53:14,317 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _total_StrikeFarm[this]==( old(_total_StrikeFarm[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_total_StrikeFarm,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_total_StrikeFarm,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 05:53:14,321 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 05:53:14,321 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:53:14,327 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:53:14 PropertyContainer
[2020-11-25 05:53:14,328 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:53:14,328 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:53:14,328 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:53:14,328 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:53:14,328 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/2) ...
[2020-11-25 05:53:14,329 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:53:14,329 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:53:14,341 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:53:14" (2/2) ...
[2020-11-25 05:53:14,341 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:53:14,342 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:53:14,342 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:53:14,342 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:53:14,342 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/2) ...
[2020-11-25 05:53:14,376 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:53:14,376 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:53:14,376 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 05:53:14,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 05:53:14,376 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 05:53:14,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 05:53:14,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 05:53:14,377 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 05:53:14,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 05:53:14,378 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 05:53:14,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:53:14,379 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm_NoBaseCtor__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm
[2020-11-25 05:53:14,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StrikeFarm
[2020-11-25 05:53:14,380 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 05:53:14,381 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,382 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 05:53:14,383 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm_NoBaseCtor__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm__success
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure StrikeFarm_StrikeFarm__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:53:14,384 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:53:14,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:53:14,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 05:53:14,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 05:53:14,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm_NoBaseCtor__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm_NoBaseCtor__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm__fail
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure StrikeFarm_StrikeFarm__success
[2020-11-25 05:53:14,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StrikeFarm
[2020-11-25 05:53:14,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:53:14,391 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:53:14,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:53:14,570 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:53:14,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:53:14,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:53:15,066 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:53:15,067 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 05:53:15,069 INFO  L202        PluginConnector]: Adding new model StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:53:15 BoogieIcfgContainer
[2020-11-25 05:53:15,069 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:53:14" (2/2) ...
[2020-11-25 05:53:15,069 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:53:15,069 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3a9f99d0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:53:15, skipping insertion in model container
[2020-11-25 05:53:15,069 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:53:15,070 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:53:15,070 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:53:15,071 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:53:15,071 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/3) ...
[2020-11-25 05:53:15,072 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@47b11ab7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:53:15, skipping insertion in model container
[2020-11-25 05:53:15,072 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:53:14" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:53:15,110 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:53:15 NWAContainer
[2020-11-25 05:53:15,111 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:53:15,111 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:53:15,111 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:53:15,112 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:53:15,113 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:53:15" (3/4) ...
[2020-11-25 05:53:15,113 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@78a364d9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:53:15, skipping insertion in model container
[2020-11-25 05:53:15,113 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:53:15" (4/4) ...
[2020-11-25 05:53:15,117 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:53:15,120 INFO  L110   BuchiProductObserver]: Initial RCFG 1475 locations, 2077 edges
[2020-11-25 05:53:15,121 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:53:15,132 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:53:16,348 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:53:16,353 INFO  L110   BuchiProductObserver]: BuchiProgram size 3732 locations, 6785 edges
[2020-11-25 05:53:16,354 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:53:16 BoogieIcfgContainer
[2020-11-25 05:53:16,354 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:53:16,354 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:53:16,354 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:53:16,355 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:53:16,356 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:53:16" (1/1) ...
[2020-11-25 05:53:16,422 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_25 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s626, b_s626, -1445521449);
[2020-11-25 05:53:16,425 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_25 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s626, b_s626, -1445521449);
[2020-11-25 05:53:16,436 INFO  L313           BlockEncoder]: Initial Icfg 3732 locations, 6785 edges
[2020-11-25 05:53:16,436 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:53:16,437 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:53:16,437 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:53:16,437 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:53:16,449 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 15 locations because of local infeasibility
[2020-11-25 05:53:16,457 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 05:53:16,470 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:53:16,473 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:53:16,475 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:53:16,476 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:53:16,480 INFO  L313           BlockEncoder]: Encoded RCFG 3632 locations, 6508 edges
[2020-11-25 05:53:16,480 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:53:16 BasicIcfg
[2020-11-25 05:53:16,480 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:53:16,480 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:53:16,480 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:53:16,482 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:53:16,482 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,482 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:53:14" (1/6) ...
[2020-11-25 05:53:16,484 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7692e5b8 and model type StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:53:16, skipping insertion in model container
[2020-11-25 05:53:16,484 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,484 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:53:14" (2/6) ...
[2020-11-25 05:53:16,485 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7692e5b8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:53:16, skipping insertion in model container
[2020-11-25 05:53:16,485 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,485 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:53:15" (3/6) ...
[2020-11-25 05:53:16,485 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7692e5b8 and model type StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:53:16, skipping insertion in model container
[2020-11-25 05:53:16,485 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,485 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:53:15" (4/6) ...
[2020-11-25 05:53:16,485 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7692e5b8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:53:16, skipping insertion in model container
[2020-11-25 05:53:16,485 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,485 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:53:16" (5/6) ...
[2020-11-25 05:53:16,485 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7692e5b8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:53:16, skipping insertion in model container
[2020-11-25 05:53:16,485 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:53:16,485 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:53:16" (6/6) ...
[2020-11-25 05:53:16,486 INFO  L404   chiAutomizerObserver]: Analyzing ICFG StrikeFarm_0x8a309E9fb32055CB8ad3524C6e53A6C3480e66B7_transfer-self.bpl_BEv2
[2020-11-25 05:53:16,516 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:53:16,517 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:53:16,517 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:53:16,517 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:53:16,517 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:53:16,517 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:53:16,517 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:53:16,517 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:53:16,517 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:53:16,545 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3632 states.
[2020-11-25 05:53:16,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:16,592 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:16,592 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:16,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:16,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:16,599 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:53:16,599 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3632 states.
[2020-11-25 05:53:16,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:16,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:16,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:16,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:16,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND TRUE   revert
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND TRUE   choice == 11
[L4030]              gas := gas - 21000;
[L4031]  COND FALSE  !(gas >= 0)
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:16,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:16,627 INFO  L82        PathProgramCache]: Analyzing trace with hash 19244989, now seen corresponding path program 1 times
[2020-11-25 05:53:16,631 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:16,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:16,690 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:53:16,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:16,691 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:53:16,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:16,863 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:53:16,863 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:53:16,864 INFO  L87              Difference]: Start difference. First operand 3632 states. Second operand 4 states.
[2020-11-25 05:53:17,181 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:17,182 INFO  L93              Difference]: Finished difference Result 2193 states and 2636 transitions.
[2020-11-25 05:53:17,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:53:17,183 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2193 states and 2636 transitions.
[2020-11-25 05:53:17,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2193 states to 2193 states and 2636 transitions.
[2020-11-25 05:53:17,214 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 05:53:17,215 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 477
[2020-11-25 05:53:17,215 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2193 states and 2636 transitions.
[2020-11-25 05:53:17,222 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:17,222 INFO  L728         BuchiCegarLoop]: Abstraction has 2193 states and 2636 transitions.
[2020-11-25 05:53:17,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2193 states and 2636 transitions.
[2020-11-25 05:53:17,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2193 to 2193.
[2020-11-25 05:53:17,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2193 states.
[2020-11-25 05:53:17,287 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2193 states to 2193 states and 2636 transitions.
[2020-11-25 05:53:17,287 INFO  L751         BuchiCegarLoop]: Abstraction has 2193 states and 2636 transitions.
[2020-11-25 05:53:17,288 INFO  L631         BuchiCegarLoop]: Abstraction has 2193 states and 2636 transitions.
[2020-11-25 05:53:17,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:53:17,288 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2193 states and 2636 transitions.
[2020-11-25 05:53:17,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:17,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:17,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:17,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND TRUE   revert
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:17,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:17,302 INFO  L82        PathProgramCache]: Analyzing trace with hash 464444315, now seen corresponding path program 1 times
[2020-11-25 05:53:17,303 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:17,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:17,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:53:17,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:17,329 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:53:17,331 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:17,331 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:53:17,331 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:53:17,331 INFO  L87              Difference]: Start difference. First operand 2193 states and 2636 transitions. cyclomatic complexity: 445 Second operand 3 states.
[2020-11-25 05:53:17,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:17,387 INFO  L93              Difference]: Finished difference Result 2793 states and 3290 transitions.
[2020-11-25 05:53:17,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:53:17,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2793 states and 3290 transitions.
[2020-11-25 05:53:17,399 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:53:17,412 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2793 states to 2793 states and 3290 transitions.
[2020-11-25 05:53:17,412 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 645
[2020-11-25 05:53:17,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 645
[2020-11-25 05:53:17,413 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2793 states and 3290 transitions.
[2020-11-25 05:53:17,417 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:17,417 INFO  L728         BuchiCegarLoop]: Abstraction has 2793 states and 3290 transitions.
[2020-11-25 05:53:17,420 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2793 states and 3290 transitions.
[2020-11-25 05:53:17,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2793 to 2385.
[2020-11-25 05:53:17,443 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2385 states.
[2020-11-25 05:53:17,447 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2385 states to 2385 states and 2796 transitions.
[2020-11-25 05:53:17,447 INFO  L751         BuchiCegarLoop]: Abstraction has 2385 states and 2796 transitions.
[2020-11-25 05:53:17,447 INFO  L631         BuchiCegarLoop]: Abstraction has 2385 states and 2796 transitions.
[2020-11-25 05:53:17,447 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:53:17,447 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2385 states and 2796 transitions.
[2020-11-25 05:53:17,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,452 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:17,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:17,454 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:17,454 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND TRUE   !(account_s366 != null)
[L2265]              revert := true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:17,458 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:17,458 INFO  L82        PathProgramCache]: Analyzing trace with hash -837664519, now seen corresponding path program 1 times
[2020-11-25 05:53:17,459 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:17,469 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:17,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 33 trivial. 0 not checked.
[2020-11-25 05:53:17,512 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:53:17,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 05:53:17,512 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:17,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:53:17,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:53:17,513 INFO  L87              Difference]: Start difference. First operand 2385 states and 2796 transitions. cyclomatic complexity: 413 Second operand 7 states.
[2020-11-25 05:53:17,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:17,550 INFO  L93              Difference]: Finished difference Result 2393 states and 2803 transitions.
[2020-11-25 05:53:17,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:53:17,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2393 states and 2803 transitions.
[2020-11-25 05:53:17,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,567 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2393 states to 2384 states and 2794 transitions.
[2020-11-25 05:53:17,567 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 533
[2020-11-25 05:53:17,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 533
[2020-11-25 05:53:17,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2384 states and 2794 transitions.
[2020-11-25 05:53:17,570 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:17,570 INFO  L728         BuchiCegarLoop]: Abstraction has 2384 states and 2794 transitions.
[2020-11-25 05:53:17,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2384 states and 2794 transitions.
[2020-11-25 05:53:17,593 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2384 to 2384.
[2020-11-25 05:53:17,594 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2384 states.
[2020-11-25 05:53:17,597 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2384 states to 2384 states and 2794 transitions.
[2020-11-25 05:53:17,597 INFO  L751         BuchiCegarLoop]: Abstraction has 2384 states and 2794 transitions.
[2020-11-25 05:53:17,597 INFO  L631         BuchiCegarLoop]: Abstraction has 2384 states and 2794 transitions.
[2020-11-25 05:53:17,597 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:53:17,597 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2384 states and 2794 transitions.
[2020-11-25 05:53:17,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,602 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:17,602 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:17,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:17,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND TRUE   !(c_s533 >= a_s533)
[L2508]              revert := true;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND TRUE   revert
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND TRUE   !(sender_s323 != null)
[L2209]              revert := true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND TRUE   revert
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:17,608 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:17,608 INFO  L82        PathProgramCache]: Analyzing trace with hash -180643181, now seen corresponding path program 1 times
[2020-11-25 05:53:17,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:17,618 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:17,666 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 05:53:17,666 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:17,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:53:17,666 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:17,667 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:53:17,667 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:53:17,667 INFO  L87              Difference]: Start difference. First operand 2384 states and 2794 transitions. cyclomatic complexity: 412 Second operand 3 states.
[2020-11-25 05:53:17,709 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:17,709 INFO  L93              Difference]: Finished difference Result 2792 states and 3200 transitions.
[2020-11-25 05:53:17,709 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:53:17,709 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2792 states and 3200 transitions.
[2020-11-25 05:53:17,718 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:53:17,730 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2792 states to 2619 states and 2996 transitions.
[2020-11-25 05:53:17,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 05:53:17,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 613
[2020-11-25 05:53:17,731 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2619 states and 2996 transitions.
[2020-11-25 05:53:17,734 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:17,734 INFO  L728         BuchiCegarLoop]: Abstraction has 2619 states and 2996 transitions.
[2020-11-25 05:53:17,738 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2619 states and 2996 transitions.
[2020-11-25 05:53:17,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2619 to 2263.
[2020-11-25 05:53:17,776 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2263 states.
[2020-11-25 05:53:17,779 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2263 states to 2263 states and 2554 transitions.
[2020-11-25 05:53:17,779 INFO  L751         BuchiCegarLoop]: Abstraction has 2263 states and 2554 transitions.
[2020-11-25 05:53:17,779 INFO  L631         BuchiCegarLoop]: Abstraction has 2263 states and 2554 transitions.
[2020-11-25 05:53:17,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:53:17,779 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2263 states and 2554 transitions.
[2020-11-25 05:53:17,782 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,782 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:17,782 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:17,784 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:17,784 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND TRUE   !(sender_s323 != null)
[L2177]              revert := true;
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND TRUE   !(sender_s323 != null)
[L2177]              revert := true;
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:17,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:17,790 INFO  L82        PathProgramCache]: Analyzing trace with hash -1418592897, now seen corresponding path program 1 times
[2020-11-25 05:53:17,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:17,806 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:17,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:17,844 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:17,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 05:53:17,844 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:17,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 05:53:17,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 05:53:17,845 INFO  L87              Difference]: Start difference. First operand 2263 states and 2554 transitions. cyclomatic complexity: 293 Second operand 8 states.
[2020-11-25 05:53:17,906 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:17,906 INFO  L93              Difference]: Finished difference Result 2287 states and 2582 transitions.
[2020-11-25 05:53:17,907 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 05:53:17,907 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2287 states and 2582 transitions.
[2020-11-25 05:53:17,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,918 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2287 states to 2267 states and 2560 transitions.
[2020-11-25 05:53:17,918 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 523
[2020-11-25 05:53:17,918 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 523
[2020-11-25 05:53:17,918 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2267 states and 2560 transitions.
[2020-11-25 05:53:17,920 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:17,920 INFO  L728         BuchiCegarLoop]: Abstraction has 2267 states and 2560 transitions.
[2020-11-25 05:53:17,922 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2267 states and 2560 transitions.
[2020-11-25 05:53:17,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2267 to 2267.
[2020-11-25 05:53:17,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2267 states.
[2020-11-25 05:53:17,939 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2267 states to 2267 states and 2560 transitions.
[2020-11-25 05:53:17,939 INFO  L751         BuchiCegarLoop]: Abstraction has 2267 states and 2560 transitions.
[2020-11-25 05:53:17,939 INFO  L631         BuchiCegarLoop]: Abstraction has 2267 states and 2560 transitions.
[2020-11-25 05:53:17,939 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:53:17,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2267 states and 2560 transitions.
[2020-11-25 05:53:17,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:17,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:17,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:17,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:17,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND TRUE   !(recipient_s323 != null)
[L2182]              revert := true;
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND TRUE   !(recipient_s323 != null)
[L2182]              revert := true;
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:17,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:17,946 INFO  L82        PathProgramCache]: Analyzing trace with hash 663162937, now seen corresponding path program 1 times
[2020-11-25 05:53:17,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:17,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:17,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:17,994 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:17,995 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 05:53:17,995 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:17,995 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 05:53:17,995 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 05:53:17,995 INFO  L87              Difference]: Start difference. First operand 2267 states and 2560 transitions. cyclomatic complexity: 295 Second operand 7 states.
[2020-11-25 05:53:18,036 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:18,036 INFO  L93              Difference]: Finished difference Result 2361 states and 2667 transitions.
[2020-11-25 05:53:18,036 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:53:18,036 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2361 states and 2667 transitions.
[2020-11-25 05:53:18,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:18,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2361 states to 2353 states and 2659 transitions.
[2020-11-25 05:53:18,048 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 542
[2020-11-25 05:53:18,049 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 542
[2020-11-25 05:53:18,049 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2353 states and 2659 transitions.
[2020-11-25 05:53:18,051 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:18,051 INFO  L728         BuchiCegarLoop]: Abstraction has 2353 states and 2659 transitions.
[2020-11-25 05:53:18,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2353 states and 2659 transitions.
[2020-11-25 05:53:18,071 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2353 to 2340.
[2020-11-25 05:53:18,071 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2340 states.
[2020-11-25 05:53:18,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2340 states to 2340 states and 2644 transitions.
[2020-11-25 05:53:18,074 INFO  L751         BuchiCegarLoop]: Abstraction has 2340 states and 2644 transitions.
[2020-11-25 05:53:18,074 INFO  L631         BuchiCegarLoop]: Abstraction has 2340 states and 2644 transitions.
[2020-11-25 05:53:18,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:53:18,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2340 states and 2644 transitions.
[2020-11-25 05:53:18,077 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:18,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:18,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:18,079 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:18,079 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND FALSE  !(!(recipient_s323 != null))
[L2185]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2540]  COND TRUE   !(b_s576 <= a_s576)
[L2541]              revert := true;
[L2185]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2186]  COND TRUE   revert
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND FALSE  !(!(recipient_s323 != null))
[L2185]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2540]  COND TRUE   !(b_s576 <= a_s576)
[L2541]              revert := true;
[L2185]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2186]  COND TRUE   revert
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:18,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:18,082 INFO  L82        PathProgramCache]: Analyzing trace with hash -1848906438, now seen corresponding path program 1 times
[2020-11-25 05:53:18,083 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:18,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:18,163 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:18,163 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:18,163 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 05:53:18,164 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:18,164 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 05:53:18,164 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 05:53:18,164 INFO  L87              Difference]: Start difference. First operand 2340 states and 2644 transitions. cyclomatic complexity: 306 Second operand 10 states.
[2020-11-25 05:53:19,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:19,062 INFO  L93              Difference]: Finished difference Result 2453 states and 2772 transitions.
[2020-11-25 05:53:19,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 05:53:19,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2453 states and 2772 transitions.
[2020-11-25 05:53:19,068 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:53:19,074 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2453 states to 2453 states and 2772 transitions.
[2020-11-25 05:53:19,074 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 05:53:19,075 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-11-25 05:53:19,075 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2453 states and 2772 transitions.
[2020-11-25 05:53:19,077 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:19,077 INFO  L728         BuchiCegarLoop]: Abstraction has 2453 states and 2772 transitions.
[2020-11-25 05:53:19,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2453 states and 2772 transitions.
[2020-11-25 05:53:19,097 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2453 to 2340.
[2020-11-25 05:53:19,097 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2340 states.
[2020-11-25 05:53:19,099 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2340 states to 2340 states and 2644 transitions.
[2020-11-25 05:53:19,099 INFO  L751         BuchiCegarLoop]: Abstraction has 2340 states and 2644 transitions.
[2020-11-25 05:53:19,099 INFO  L631         BuchiCegarLoop]: Abstraction has 2340 states and 2644 transitions.
[2020-11-25 05:53:19,099 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:53:19,099 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2340 states and 2644 transitions.
[2020-11-25 05:53:19,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:19,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:19,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:19,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:19,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND FALSE  !(revert)
[L1749]              __ret_0_ := true;
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND FALSE  !(__exception)
[L380]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1723]  COND TRUE   DType[this] == StrikeFarm
[L1724]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1601]              __ret_0_ := msgsender_MSG;
[L1724]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1725]  COND FALSE  !(revert)
[L1736]  COND TRUE   DType[this] == StrikeFarm
[L1737]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2207]              __var_12 := null;
[L2208]  COND FALSE  !(!(sender_s323 != null))
[L2212]              __var_13 := null;
[L2213]  COND FALSE  !(!(recipient_s323 != null))
[L2217]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2552]  COND FALSE  !(!(b_s576 <= a_s576))
[L2556]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2557]              __ret_0_ := c_s576;
[L2217]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2218]  COND FALSE  !(revert)
[L2221]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2222]              _balances_ERC20[this][sender_s323] := __var_14;
[L2223]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2224]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2224]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2225]  COND FALSE  !(revert)
[L2228]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2229]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2230]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2231]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1737]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1738]  COND FALSE  !(revert)
[L1749]              __ret_0_ := true;
[L380]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L381]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _total_StrikeFarm[this] == old(_total_StrikeFarm[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:19,107 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:19,107 INFO  L82        PathProgramCache]: Analyzing trace with hash -892025093, now seen corresponding path program 1 times
[2020-11-25 05:53:19,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:19,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:19,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:19,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:19,477 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 05:53:19,478 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:19,478 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 05:53:19,478 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=260, Unknown=0, NotChecked=0, Total=306
[2020-11-25 05:53:19,478 INFO  L87              Difference]: Start difference. First operand 2340 states and 2644 transitions. cyclomatic complexity: 306 Second operand 18 states.
[2020-11-25 05:53:22,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:22,695 INFO  L93              Difference]: Finished difference Result 2376 states and 2685 transitions.
[2020-11-25 05:53:22,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 05:53:22,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2376 states and 2685 transitions.
[2020-11-25 05:53:22,699 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:53:22,705 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2376 states to 2370 states and 2678 transitions.
[2020-11-25 05:53:22,705 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 546
[2020-11-25 05:53:22,705 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 546
[2020-11-25 05:53:22,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2370 states and 2678 transitions.
[2020-11-25 05:53:22,707 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:22,707 INFO  L728         BuchiCegarLoop]: Abstraction has 2370 states and 2678 transitions.
[2020-11-25 05:53:22,709 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2370 states and 2678 transitions.
[2020-11-25 05:53:22,721 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2370 to 2347.
[2020-11-25 05:53:22,721 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2347 states.
[2020-11-25 05:53:22,723 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2347 states to 2347 states and 2650 transitions.
[2020-11-25 05:53:22,723 INFO  L751         BuchiCegarLoop]: Abstraction has 2347 states and 2650 transitions.
[2020-11-25 05:53:22,723 INFO  L631         BuchiCegarLoop]: Abstraction has 2347 states and 2650 transitions.
[2020-11-25 05:53:22,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 05:53:22,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2347 states and 2650 transitions.
[2020-11-25 05:53:22,726 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:22,726 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:22,726 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:22,727 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:22,727 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND FALSE  !(!(recipient_s323 != null))
[L2185]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2540]  COND FALSE  !(!(b_s576 <= a_s576))
[L2544]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2545]              __ret_0_ := c_s576;
[L2185]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2186]  COND FALSE  !(revert)
[L2189]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2190]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2191]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2192]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2494]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  COND TRUE   !(c_s533 >= a_s533)
[L2496]              revert := true;
[L2192]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2193]  COND TRUE   revert
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND FALSE  !(!(recipient_s323 != null))
[L2185]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2540]  COND FALSE  !(!(b_s576 <= a_s576))
[L2544]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2545]              __ret_0_ := c_s576;
[L2185]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2186]  COND FALSE  !(revert)
[L2189]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2190]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2191]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2192]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2494]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  COND TRUE   !(c_s533 >= a_s533)
[L2496]              revert := true;
[L2192]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2193]  COND TRUE   revert
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND TRUE   revert
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:22,731 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:22,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -2115024101, now seen corresponding path program 1 times
[2020-11-25 05:53:22,732 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:22,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:22,832 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:22,833 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:22,833 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 05:53:22,833 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:22,833 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 05:53:22,833 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 05:53:22,833 INFO  L87              Difference]: Start difference. First operand 2347 states and 2650 transitions. cyclomatic complexity: 305 Second operand 16 states.
[2020-11-25 05:53:23,996 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:23,997 INFO  L93              Difference]: Finished difference Result 2437 states and 2743 transitions.
[2020-11-25 05:53:23,997 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 05:53:23,997 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2437 states and 2743 transitions.
[2020-11-25 05:53:24,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:24,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2437 states to 2437 states and 2743 transitions.
[2020-11-25 05:53:24,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 581
[2020-11-25 05:53:24,006 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 581
[2020-11-25 05:53:24,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2437 states and 2743 transitions.
[2020-11-25 05:53:24,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:24,007 INFO  L728         BuchiCegarLoop]: Abstraction has 2437 states and 2743 transitions.
[2020-11-25 05:53:24,009 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2437 states and 2743 transitions.
[2020-11-25 05:53:24,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2437 to 2362.
[2020-11-25 05:53:24,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2362 states.
[2020-11-25 05:53:24,022 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2362 states to 2362 states and 2659 transitions.
[2020-11-25 05:53:24,022 INFO  L751         BuchiCegarLoop]: Abstraction has 2362 states and 2659 transitions.
[2020-11-25 05:53:24,022 INFO  L631         BuchiCegarLoop]: Abstraction has 2362 states and 2659 transitions.
[2020-11-25 05:53:24,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 05:53:24,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2362 states and 2659 transitions.
[2020-11-25 05:53:24,024 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:53:24,025 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:53:24,025 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:53:24,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:53:24,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4108]              assume null == 0;
[L4109]  CALL        call this := FreshRefGenerator__success();
[L1523]              havoc newRef;
[L1524]              assume Alloc[newRef] == false;
[L1525]              Alloc[newRef] := true;
[L1526]              assume newRef != null;
[L4109]  RET         call this := FreshRefGenerator__success();
[L4110]              assume now >= 0;
[L4111]              assume DType[this] == StrikeFarm;
[L4112]              assume msgvalue_MSG == 0;
[L4113]              gas := gas - 53000;
[L4114]  CALL        call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1025]  CALL        call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L2725]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L2725]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2726]  COND FALSE  !(revert)
[L2729]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2729]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2730]  COND FALSE  !(revert)
[L2733]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1649]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1587]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1572]              assume msgsender_MSG != null;
[L1573]              Balance[this] := 0;
[L1587]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1588]  COND FALSE  !(revert)
[L1649]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L1650]  COND FALSE  !(revert)
[L1653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L1653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1654]  COND FALSE  !(revert)
[L1657]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1621]              assume msgsender_MSG != null;
[L1622]              Balance[this] := 0;
[L1623]              _balances_ERC20[this] := zeroRefintArr();
[L1624]              sum__balances0[this] := 0;
[L1625]              _allowances_ERC20[this] := zeroRefRefintArr();
[L1626]              sum__allowances1[this] := 0;
[L1627]              _totalSupply_ERC20[this] := 0;
[L1657]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1658]  COND FALSE  !(revert)
[L2733]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]  COND FALSE  !(revert)
[L2737]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2413]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1555]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1540]              assume msgsender_MSG != null;
[L1541]              Balance[this] := 0;
[L1555]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1556]  COND FALSE  !(revert)
[L2413]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2414]  COND FALSE  !(revert)
[L2417]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2388]              assume msgsender_MSG != null;
[L2389]              Balance[this] := 0;
[L2390]              _name_ERC20Detailed[this] := -1368110498;
[L2391]              _symbol_ERC20Detailed[this] := -1368110498;
[L2392]              _decimals_ERC20Detailed[this] := 0;
[L2394]              _name_ERC20Detailed[this] := name_s483;
[L2395]              _symbol_ERC20Detailed[this] := symbol_s483;
[L2396]              _decimals_ERC20Detailed[this] := decimals_s483;
[L2417]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s483, symbol_s483, decimals_s483);
[L2418]  COND FALSE  !(revert)
[L2737]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 879309088, -1713371657, 18);
[L2738]  COND FALSE  !(revert)
[L2741]  CALL        call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2672]              assume msgsender_MSG != null;
[L2673]              Balance[this] := 0;
[L2674]              _total_StrikeFarm[this] := 11000;
[L2676]  COND TRUE   DType[this] == StrikeFarm
[L2677]  CALL        call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2455]              __ret_0_ := _decimals_ERC20Detailed[this];
[L2677]  RET         call __var_27 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2684]              __var_26 := __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2685]  COND TRUE   DType[this] == StrikeFarm
[L2686]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2263]              __var_16 := null;
[L2264]  COND FALSE  !(!(account_s366 != null))
[L2268]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2268]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2269]  COND FALSE  !(revert)
[L2272]              _totalSupply_ERC20[this] := __var_17;
[L2273]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2506]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2507]  COND FALSE  !(!(c_s533 >= a_s533))
[L2511]              __ret_0_ := c_s533;
[L2273]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2274]  COND FALSE  !(revert)
[L2277]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2278]              _balances_ERC20[this][account_s366] := __var_18;
[L2279]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2280]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2686]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, nonlinearMul(_total_StrikeFarm[this], nonlinearPow(10, __var_27 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2687]  COND FALSE  !(revert)
[L2741]  RET         call StrikeFarm_StrikeFarm_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2742]  COND FALSE  !(revert)
[L1025]  RET         call StrikeFarm_StrikeFarm__success(this, msgsender_MSG, msgvalue_MSG);
[L1026]              assume !revert && gas >= 0;
[L4114]  RET         call StrikeFarm_StrikeFarm(this, msgsender_MSG, msgvalue_MSG);
[L4115]              assume !revert && gas >= 0;
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND FALSE  !(choice == 11)
[L4035]  COND FALSE  !(choice == 10)
[L4041]  COND TRUE   choice == 9
[L4042]              gas := gas - 21000;
[L4043]  COND TRUE   gas >= 0
[L4044]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4045]              assume msgvalue_MSG == 0;
[L4046]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L356]               havoc __exception;
[L357]               revert := false;
[L358]   COND TRUE   __exception
[L359]               __tmp__Balance := Balance;
[L360]               __tmp__DType := DType;
[L361]               __tmp__Alloc := Alloc;
[L362]               __tmp__balance_ADDR := balance_ADDR;
[L363]               __tmp__M_Ref_int := M_Ref_int;
[L364]               __tmp__sum__balances0 := sum__balances0;
[L365]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L366]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L367]               __tmp__sum__allowances1 := sum__allowances1;
[L368]               __tmp__Length := Length;
[L369]               __tmp__now := now;
[L370]               __tmp___balances_ERC20 := _balances_ERC20;
[L371]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L372]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L373]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L374]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L375]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L376]               __tmp___total_StrikeFarm := _total_StrikeFarm;
[L377]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L1690]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1691]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1595]              __ret_0_ := msgsender_MSG;
[L1691]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L1692]  COND FALSE  !(revert)
[L1703]  COND TRUE   __tmp__DType[this] == StrikeFarm
[L1704]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2175]              __var_12 := null;
[L2176]  COND FALSE  !(!(sender_s323 != null))
[L2180]              __var_13 := null;
[L2181]  COND FALSE  !(!(recipient_s323 != null))
[L2185]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2540]  COND FALSE  !(!(b_s576 <= a_s576))
[L2544]              c_s576 := (a_s576 - b_s576) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2545]              __ret_0_ := c_s576;
[L2185]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 861085777);
[L2186]  COND FALSE  !(revert)
[L2189]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2190]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2191]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2192]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2494]              c_s533 := (a_s533 + b_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  COND FALSE  !(!(c_s533 >= a_s533))
[L2499]              __ret_0_ := c_s533;
[L2192]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2193]  COND FALSE  !(revert)
[L2196]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L2197]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L2198]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L1704]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L1705]  COND FALSE  !(revert)
[L1716]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L378]               assume revert || gas < 0;
[L4046]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4118]  RET         call CorralChoice_StrikeFarm(this);

Loop:
[L4118]  CALL        call CorralChoice_StrikeFarm(this);
[L3984]              havoc msgsender_MSG;
[L3985]              havoc msgvalue_MSG;
[L3986]              havoc choice;
[L3987]              havoc __ret_0_totalSupply;
[L3988]              havoc account_s121;
[L3989]              havoc __ret_0_balanceOf;
[L3990]              havoc recipient_s140;
[L3991]              havoc amount_s140;
[L3992]              havoc __ret_0_transfer;
[L3993]              havoc owner_s156;
[L3994]              havoc spender_s156;
[L3995]              havoc __ret_0_allowance;
[L3996]              havoc spender_s175;
[L3997]              havoc amount_s175;
[L3998]              havoc __ret_0_approve;
[L3999]              havoc sender_s211;
[L4000]              havoc recipient_s211;
[L4001]              havoc amount_s211;
[L4002]              havoc __ret_0_transferFrom;
[L4003]              havoc spender_s238;
[L4004]              havoc addedValue_s238;
[L4005]              havoc __ret_0_increaseAllowance;
[L4006]              havoc spender_s266;
[L4007]              havoc subtractedValue_s266;
[L4008]              havoc __ret_0_decreaseAllowance;
[L4009]              havoc name_s483;
[L4010]              havoc symbol_s483;
[L4011]              havoc decimals_s483;
[L4012]              havoc __ret_0_name;
[L4013]              havoc __ret_0_symbol;
[L4014]              havoc __ret_0_decimals;
[L4015]              havoc tmpNow;
[L4016]              havoc gas;
[L4017]              assume gas > 4000000 && gas <= 8000000;
[L4018]              tmpNow := now;
[L4019]              havoc now;
[L4020]              assume now > tmpNow;
[L4021]              assume msgsender_MSG != null;
[L4022]              assume DType[msgsender_MSG] != IERC20;
[L4023]              assume DType[msgsender_MSG] != Context;
[L4024]              assume DType[msgsender_MSG] != ERC20;
[L4025]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4026]              assume DType[msgsender_MSG] != SafeMath;
[L4027]              assume DType[msgsender_MSG] != StrikeFarm;
[L4028]              Alloc[msgsender_MSG] := true;
[L4029]  COND TRUE   choice == 11
[L4030]              gas := gas - 21000;
[L4031]  COND FALSE  !(gas >= 0)
[L4118]  RET         call CorralChoice_StrikeFarm(this);

[2020-11-25 05:53:24,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:53:24,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -519427546, now seen corresponding path program 1 times
[2020-11-25 05:53:24,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:53:24,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:53:24,070 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 05:53:24,070 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:53:24,071 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 05:53:24,072 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:53:24,072 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 05:53:24,072 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 05:53:24,072 INFO  L87              Difference]: Start difference. First operand 2362 states and 2659 transitions. cyclomatic complexity: 299 Second operand 5 states.
[2020-11-25 05:53:24,229 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:53:24,229 INFO  L93              Difference]: Finished difference Result 1686 states and 1877 transitions.
[2020-11-25 05:53:24,229 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 05:53:24,229 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1686 states and 1877 transitions.
[2020-11-25 05:53:24,232 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:53:24,232 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1686 states to 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 05:53:24,232 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 05:53:24,232 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:53:24,232 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 05:53:24,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 05:53:24,232 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 05:53:24,232 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 05:53:24,235 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:53:24 BasicIcfg
[2020-11-25 05:53:24,235 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:53:24,236 INFO  L168              Benchmark]: Toolchain (without parser) took 10033.01 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 897.1 MB). Free memory was 940.6 MB in the beginning and 1.3 GB in the end (delta: -321.5 MB). Peak memory consumption was 575.5 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,236 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,237 INFO  L168              Benchmark]: Boogie Preprocessor took 77.06 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,237 INFO  L168              Benchmark]: UtopiaSpecLang took 47.02 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,237 INFO  L168              Benchmark]: Boogie Printer took 13.64 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,237 INFO  L168              Benchmark]: RCFGBuilder took 727.83 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.4 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,238 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.04 ms. Allocated memory is still 1.0 GB. Free memory was 806.4 MB in the beginning and 797.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,238 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1242.91 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 192.9 MB). Free memory was 797.4 MB in the beginning and 1.0 GB in the end (delta: -237.8 MB). Peak memory consumption was 172.9 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,239 INFO  L168              Benchmark]: BlockEncodingV2 took 126.04 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 966.6 MB in the end (delta: 68.6 MB). Peak memory consumption was 68.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,239 INFO  L168              Benchmark]: BuchiAutomizer took 7755.04 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 704.1 MB). Free memory was 966.6 MB in the beginning and 1.3 GB in the end (delta: -295.5 MB). Peak memory consumption was 408.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:53:24,241 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3732 locations, 6785 edges
  - StatisticsResult: Encoded RCFG
    3632 locations, 6508 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 77.06 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 47.02 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.64 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 727.83 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.4 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.04 ms. Allocated memory is still 1.0 GB. Free memory was 806.4 MB in the beginning and 797.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1242.91 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 192.9 MB). Free memory was 797.4 MB in the beginning and 1.0 GB in the end (delta: -237.8 MB). Peak memory consumption was 172.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 126.04 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 966.6 MB in the end (delta: 68.6 MB). Peak memory consumption was 68.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7755.04 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 704.1 MB). Free memory was 966.6 MB in the beginning and 1.3 GB in the end (delta: -295.5 MB). Peak memory consumption was 408.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1475 locations, 2077 edges
  - StatisticsResult: BuchiProgram size
    3732 locations, 6785 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.7s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 0.9s. Construction of modules took 4.6s. BÃ¼chi inclusion checks took 1.5s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 9 MinimizatonAttempts, 988 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2385 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 23991 SDtfs, 17796 SDslu, 76470 SDs, 0 SdLazy, 45902 SolverSat, 3762 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
