This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:30:00,534 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:30:00,535 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:30:00,547 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:30:00,547 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:30:00,548 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:30:00,549 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:30:00,551 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:30:00,552 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:30:00,553 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:30:00,553 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:30:00,553 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:30:00,554 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:30:00,555 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:30:00,556 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:30:00,556 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:30:00,557 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:30:00,558 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:30:00,561 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:30:00,564 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:30:00,565 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:30:00,567 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:30:00,571 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:30:00,571 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:30:00,572 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:30:00,572 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:30:00,573 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:30:00,573 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:30:00,573 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:30:00,574 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:30:00,574 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:30:00,575 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:30:00,575 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:30:00,576 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:30:00,576 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:30:00,577 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:30:00,577 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:30:00,577 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:30:00,577 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:30:00,578 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:30:00,578 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:30:00,579 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:30:00,587 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:30:00,587 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:30:00,588 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:30:00,588 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:30:00,588 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:30:00,588 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:30:00,588 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:30:00,588 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:30:00,588 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:30:00,588 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:30:00,589 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:30:00,589 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:30:00,590 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:30:00,590 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:30:00,590 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:30:00,590 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:30:00,590 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:30:00,590 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:30:00,610 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:30:00,620 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:30:00,623 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:30:00,625 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:30:00,625 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:30:00,626 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl
[2020-11-25 02:30:00,626 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl'
[2020-11-25 02:30:00,749 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:30:00,750 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:30:00,750 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:30:00,750 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:30:00,751 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:30:00,767 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,769 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,816 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,817 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,848 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,865 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,884 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,903 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:30:00,904 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:30:00,904 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:30:00,907 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:30:00,911 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/1) ...
[2020-11-25 02:30:00,935 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:00,940 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:00,949 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:00,958 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s916 ) && msg.sender!=to_s916 ) && value_s916<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][to_s916] + value_s916 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s916>=0 ) && value_s916<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s916]>=0 ) && _balances_ERC20[this][to_s916]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:30:00,961 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - value_s916 ) ) && _balances_ERC20[this][to_s916]==( ( old(_balances_ERC20[this][to_s916]) ) + value_s916 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s916,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 02:30:00,969 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:30:00,969 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:30:00,988 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:00 PropertyContainer
[2020-11-25 02:30:00,988 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:30:00,989 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:30:00,989 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:30:00,989 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:30:00,990 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/2) ...
[2020-11-25 02:30:00,990 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:30:00,990 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:30:01,014 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:00" (2/2) ...
[2020-11-25 02:30:01,014 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:30:01,015 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:30:01,015 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:30:01,015 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:30:01,016 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/2) ...
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:30:01,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:30:01,071 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:30:01,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,072 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,073 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,073 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,073 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:30:01,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:30:01,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:30:01,074 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:30:01,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:30:01,074 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:30:01,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:30:01,074 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:30:01,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:30:01,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:30:01,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:30:01,074 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:30:01,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:30:01,075 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:30:01,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:30:01,076 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:30:01,076 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:30:01,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:30:01,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:30:01,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:30:01,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:30:01,077 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:30:01,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:30:01,078 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:30:01,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:30:01,078 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:30:01,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:30:01,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:30:01,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:30:01,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:30:01,078 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:30:01,079 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:30:01,080 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:30:01,080 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:30:01,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:30:01,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:30:01,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:30:01,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:30:01,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:30:01,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:30:01,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:30:01,082 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:30:01,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:30:01,083 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:30:01,084 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:30:01,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:30:01,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:30:01,087 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:30:01,088 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:30:01,089 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:30:01,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:30:01,091 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,092 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:30:01,093 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:30:01,094 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:30:01,095 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:30:01,096 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:30:01,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:30:01,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:30:01,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:30:01,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:30:01,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:30:01,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:30:01,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:30:01,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:30:01,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:30:01,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:30:01,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:30:01,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:30:01,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:30:01,106 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:30:01,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:30:01,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:30:01,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:30:01,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:30:01,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:30:01,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:30:01,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:30:01,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:30:01,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:30:02,226 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:02,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:02,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:02,242 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:30:02,591 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:30:02,591 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:30:02,594 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:02 BoogieIcfgContainer
[2020-11-25 02:30:02,594 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:00" (2/2) ...
[2020-11-25 02:30:02,595 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:30:02,595 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@63089ba1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:02, skipping insertion in model container
[2020-11-25 02:30:02,595 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:30:02,595 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:30:02,595 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:30:02,597 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:30:02,597 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/3) ...
[2020-11-25 02:30:02,597 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4d1b6051 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:02, skipping insertion in model container
[2020-11-25 02:30:02,597 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:30:02,633 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:02 NWAContainer
[2020-11-25 02:30:02,633 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:30:02,633 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:30:02,633 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:30:02,634 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:30:02,635 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:02" (3/4) ...
[2020-11-25 02:30:02,636 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1854e85 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:02, skipping insertion in model container
[2020-11-25 02:30:02,636 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:02" (4/4) ...
[2020-11-25 02:30:02,639 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:30:02,645 INFO  L110   BuchiProductObserver]: Initial RCFG 3604 locations, 5217 edges
[2020-11-25 02:30:02,645 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:30:02,659 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:30:05,570 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:30:05,581 INFO  L110   BuchiProductObserver]: BuchiProgram size 9264 locations, 17158 edges
[2020-11-25 02:30:05,582 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:05 BoogieIcfgContainer
[2020-11-25 02:30:05,582 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:30:05,582 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:30:05,582 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:30:05,583 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:30:05,584 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:05" (1/1) ...
[2020-11-25 02:30:05,739 INFO  L313           BlockEncoder]: Initial Icfg 9264 locations, 17158 edges
[2020-11-25 02:30:05,739 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:30:05,740 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:30:05,740 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:30:05,740 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:30:05,758 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:30:05,773 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:30:05,797 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:30:05,802 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:30:05,808 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:30:05,808 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:30:05,813 INFO  L313           BlockEncoder]: Encoded RCFG 9108 locations, 16731 edges
[2020-11-25 02:30:05,813 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:30:05 BasicIcfg
[2020-11-25 02:30:05,813 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:30:05,813 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:30:05,813 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:30:05,815 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:30:05,815 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,815 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:30:00" (1/6) ...
[2020-11-25 02:30:05,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42fb3d6 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:05, skipping insertion in model container
[2020-11-25 02:30:05,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,817 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:30:00" (2/6) ...
[2020-11-25 02:30:05,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42fb3d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:05, skipping insertion in model container
[2020-11-25 02:30:05,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,817 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:30:02" (3/6) ...
[2020-11-25 02:30:05,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42fb3d6 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:30:05, skipping insertion in model container
[2020-11-25 02:30:05,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,817 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:30:02" (4/6) ...
[2020-11-25 02:30:05,817 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42fb3d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:30:05, skipping insertion in model container
[2020-11-25 02:30:05,817 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,818 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:30:05" (5/6) ...
[2020-11-25 02:30:05,818 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42fb3d6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:30:05, skipping insertion in model container
[2020-11-25 02:30:05,818 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:30:05,818 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:30:05" (6/6) ...
[2020-11-25 02:30:05,819 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_transfer-normal.bpl_BEv2
[2020-11-25 02:30:05,851 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:30:05,851 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:30:05,851 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:30:05,851 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:30:05,851 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:30:05,851 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:30:05,851 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:30:05,851 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:30:05,852 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:30:05,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9108 states.
[2020-11-25 02:30:05,980 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:05,980 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:05,980 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:05,988 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:05,988 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:05,988 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:30:05,988 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9108 states.
[2020-11-25 02:30:06,021 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:06,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:06,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:06,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:06,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND FALSE  !(gas >= 0)
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:06,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:06,036 INFO  L82        PathProgramCache]: Analyzing trace with hash -578344028, now seen corresponding path program 1 times
[2020-11-25 02:30:06,041 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:06,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:06,092 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:30:06,093 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:06,094 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:30:06,431 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:06,439 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:30:06,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:30:06,441 INFO  L87              Difference]: Start difference. First operand 9108 states. Second operand 4 states.
[2020-11-25 02:30:07,335 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:07,335 INFO  L93              Difference]: Finished difference Result 5020 states and 6072 transitions.
[2020-11-25 02:30:07,335 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:30:07,336 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5020 states and 6072 transitions.
[2020-11-25 02:30:07,362 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:07,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5020 states to 5020 states and 6072 transitions.
[2020-11-25 02:30:07,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:30:07,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 02:30:07,397 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5020 states and 6072 transitions.
[2020-11-25 02:30:07,410 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:07,410 INFO  L728         BuchiCegarLoop]: Abstraction has 5020 states and 6072 transitions.
[2020-11-25 02:30:07,429 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5020 states and 6072 transitions.
[2020-11-25 02:30:07,500 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5020 to 5020.
[2020-11-25 02:30:07,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5020 states.
[2020-11-25 02:30:07,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5020 states to 5020 states and 6072 transitions.
[2020-11-25 02:30:07,508 INFO  L751         BuchiCegarLoop]: Abstraction has 5020 states and 6072 transitions.
[2020-11-25 02:30:07,509 INFO  L631         BuchiCegarLoop]: Abstraction has 5020 states and 6072 transitions.
[2020-11-25 02:30:07,509 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:30:07,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5020 states and 6072 transitions.
[2020-11-25 02:30:07,519 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:07,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:07,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:07,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:07,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND FALSE  !(!!_paused_Pausable[this])
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:07,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:07,526 INFO  L82        PathProgramCache]: Analyzing trace with hash 1005332467, now seen corresponding path program 1 times
[2020-11-25 02:30:07,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:07,537 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:07,560 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:30:07,560 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:07,560 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:30:07,561 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:07,561 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:30:07,561 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:30:07,561 INFO  L87              Difference]: Start difference. First operand 5020 states and 6072 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:30:07,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:07,745 INFO  L93              Difference]: Finished difference Result 6850 states and 8299 transitions.
[2020-11-25 02:30:07,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:30:07,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6850 states and 8299 transitions.
[2020-11-25 02:30:07,764 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:07,793 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6850 states to 6850 states and 8299 transitions.
[2020-11-25 02:30:07,793 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1489
[2020-11-25 02:30:07,794 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1489
[2020-11-25 02:30:07,795 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6850 states and 8299 transitions.
[2020-11-25 02:30:07,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:07,801 INFO  L728         BuchiCegarLoop]: Abstraction has 6850 states and 8299 transitions.
[2020-11-25 02:30:07,807 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6850 states and 8299 transitions.
[2020-11-25 02:30:07,874 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6850 to 5974.
[2020-11-25 02:30:07,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5974 states.
[2020-11-25 02:30:07,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5974 states to 5974 states and 7243 transitions.
[2020-11-25 02:30:07,882 INFO  L751         BuchiCegarLoop]: Abstraction has 5974 states and 7243 transitions.
[2020-11-25 02:30:07,882 INFO  L631         BuchiCegarLoop]: Abstraction has 5974 states and 7243 transitions.
[2020-11-25 02:30:07,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:30:07,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5974 states and 7243 transitions.
[2020-11-25 02:30:07,890 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:07,890 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:07,890 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:07,892 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:07,892 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND TRUE   !(account_s659 != null)
[L4809]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:07,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:07,896 INFO  L82        PathProgramCache]: Analyzing trace with hash -1946500153, now seen corresponding path program 1 times
[2020-11-25 02:30:07,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:07,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:07,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:30:07,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:07,960 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:30:07,960 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:07,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:30:07,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:30:07,961 INFO  L87              Difference]: Start difference. First operand 5974 states and 7243 transitions. cyclomatic complexity: 1271 Second operand 9 states.
[2020-11-25 02:30:08,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:08,141 INFO  L93              Difference]: Finished difference Result 6020 states and 7320 transitions.
[2020-11-25 02:30:08,141 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:30:08,141 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6020 states and 7320 transitions.
[2020-11-25 02:30:08,159 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,186 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6020 states to 6020 states and 7320 transitions.
[2020-11-25 02:30:08,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 02:30:08,187 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 02:30:08,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6020 states and 7320 transitions.
[2020-11-25 02:30:08,193 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:08,193 INFO  L728         BuchiCegarLoop]: Abstraction has 6020 states and 7320 transitions.
[2020-11-25 02:30:08,199 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6020 states and 7320 transitions.
[2020-11-25 02:30:08,270 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6020 to 6011.
[2020-11-25 02:30:08,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6011 states.
[2020-11-25 02:30:08,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6011 states to 6011 states and 7303 transitions.
[2020-11-25 02:30:08,278 INFO  L751         BuchiCegarLoop]: Abstraction has 6011 states and 7303 transitions.
[2020-11-25 02:30:08,278 INFO  L631         BuchiCegarLoop]: Abstraction has 6011 states and 7303 transitions.
[2020-11-25 02:30:08,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:30:08,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6011 states and 7303 transitions.
[2020-11-25 02:30:08,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:08,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:08,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:08,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND TRUE   !(account_s713 != null)
[L4880]              revert := true;
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND TRUE   revert
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:08,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:08,298 INFO  L82        PathProgramCache]: Analyzing trace with hash -1734447474, now seen corresponding path program 1 times
[2020-11-25 02:30:08,299 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:08,306 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:08,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:30:08,343 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:08,343 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:30:08,343 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:08,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:30:08,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:30:08,343 INFO  L87              Difference]: Start difference. First operand 6011 states and 7303 transitions. cyclomatic complexity: 1294 Second operand 7 states.
[2020-11-25 02:30:08,487 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:08,487 INFO  L93              Difference]: Finished difference Result 6074 states and 7389 transitions.
[2020-11-25 02:30:08,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:30:08,488 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6074 states and 7389 transitions.
[2020-11-25 02:30:08,501 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,519 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6074 states to 6035 states and 7333 transitions.
[2020-11-25 02:30:08,519 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1260
[2020-11-25 02:30:08,520 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1260
[2020-11-25 02:30:08,520 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6035 states and 7333 transitions.
[2020-11-25 02:30:08,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:08,526 INFO  L728         BuchiCegarLoop]: Abstraction has 6035 states and 7333 transitions.
[2020-11-25 02:30:08,531 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6035 states and 7333 transitions.
[2020-11-25 02:30:08,572 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6035 to 5999.
[2020-11-25 02:30:08,572 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5999 states.
[2020-11-25 02:30:08,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5999 states to 5999 states and 7288 transitions.
[2020-11-25 02:30:08,580 INFO  L751         BuchiCegarLoop]: Abstraction has 5999 states and 7288 transitions.
[2020-11-25 02:30:08,580 INFO  L631         BuchiCegarLoop]: Abstraction has 5999 states and 7288 transitions.
[2020-11-25 02:30:08,580 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:30:08,580 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5999 states and 7288 transitions.
[2020-11-25 02:30:08,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,588 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:08,588 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:08,589 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:08,589 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND TRUE   !(account_s713 != null)
[L4880]              revert := true;
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND TRUE   revert
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:08,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:08,592 INFO  L82        PathProgramCache]: Analyzing trace with hash -1268502860, now seen corresponding path program 1 times
[2020-11-25 02:30:08,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:08,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:08,633 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:30:08,633 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:08,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:30:08,634 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:08,634 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:30:08,634 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:30:08,634 INFO  L87              Difference]: Start difference. First operand 5999 states and 7288 transitions. cyclomatic complexity: 1291 Second operand 10 states.
[2020-11-25 02:30:08,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:08,721 INFO  L93              Difference]: Finished difference Result 6071 states and 7398 transitions.
[2020-11-25 02:30:08,721 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:30:08,721 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6071 states and 7398 transitions.
[2020-11-25 02:30:08,733 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,747 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6071 states to 6071 states and 7398 transitions.
[2020-11-25 02:30:08,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1276
[2020-11-25 02:30:08,748 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1276
[2020-11-25 02:30:08,748 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6071 states and 7398 transitions.
[2020-11-25 02:30:08,752 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:08,752 INFO  L728         BuchiCegarLoop]: Abstraction has 6071 states and 7398 transitions.
[2020-11-25 02:30:08,757 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6071 states and 7398 transitions.
[2020-11-25 02:30:08,791 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6071 to 6006.
[2020-11-25 02:30:08,791 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6006 states.
[2020-11-25 02:30:08,797 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6006 states to 6006 states and 7297 transitions.
[2020-11-25 02:30:08,797 INFO  L751         BuchiCegarLoop]: Abstraction has 6006 states and 7297 transitions.
[2020-11-25 02:30:08,797 INFO  L631         BuchiCegarLoop]: Abstraction has 6006 states and 7297 transitions.
[2020-11-25 02:30:08,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:30:08,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6006 states and 7297 transitions.
[2020-11-25 02:30:08,803 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:08,803 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:08,804 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:08,805 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:08,805 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND TRUE   !!__var_18
[L4817]              revert := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND TRUE   revert
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND TRUE   revert
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND TRUE   revert
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND FALSE  !(__exception)
[L1541]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5356]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8321]  COND TRUE   !!_paused_Pausable[this]
[L8322]              revert := true;
[L5356]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5357]  COND TRUE   revert
[L1541]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1542]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s916) && _balances_ERC20[this][to_s916] == old(_balances_ERC20[this][to_s916]) + value_s916) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L3]                 revert := revert_hold;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:08,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:08,807 INFO  L82        PathProgramCache]: Analyzing trace with hash -1627676453, now seen corresponding path program 1 times
[2020-11-25 02:30:08,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:08,818 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:08,839 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:30:08,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:08,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:30:08,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:08,839 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:30:08,840 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:30:08,840 INFO  L87              Difference]: Start difference. First operand 6006 states and 7297 transitions. cyclomatic complexity: 1293 Second operand 3 states.
[2020-11-25 02:30:08,942 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:08,942 INFO  L93              Difference]: Finished difference Result 6870 states and 7931 transitions.
[2020-11-25 02:30:08,942 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:30:08,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6870 states and 7931 transitions.
[2020-11-25 02:30:08,956 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:08,970 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6870 states to 6166 states and 7076 transitions.
[2020-11-25 02:30:08,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 02:30:08,970 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1332
[2020-11-25 02:30:08,971 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6166 states and 7076 transitions.
[2020-11-25 02:30:08,974 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:08,974 INFO  L728         BuchiCegarLoop]: Abstraction has 6166 states and 7076 transitions.
[2020-11-25 02:30:08,979 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6166 states and 7076 transitions.
[2020-11-25 02:30:09,005 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6166 to 5422.
[2020-11-25 02:30:09,005 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5422 states.
[2020-11-25 02:30:09,010 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5422 states to 5422 states and 6152 transitions.
[2020-11-25 02:30:09,010 INFO  L751         BuchiCegarLoop]: Abstraction has 5422 states and 6152 transitions.
[2020-11-25 02:30:09,010 INFO  L631         BuchiCegarLoop]: Abstraction has 5422 states and 6152 transitions.
[2020-11-25 02:30:09,010 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:30:09,010 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5422 states and 6152 transitions.
[2020-11-25 02:30:09,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:09,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:09,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:09,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:09,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:09,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:09,025 INFO  L82        PathProgramCache]: Analyzing trace with hash 1982903470, now seen corresponding path program 1 times
[2020-11-25 02:30:09,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:09,046 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:09,269 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 1022 trivial. 0 not checked.
[2020-11-25 02:30:09,269 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:09,270 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:30:09,270 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:09,270 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:30:09,270 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:30:09,270 INFO  L87              Difference]: Start difference. First operand 5422 states and 6152 transitions. cyclomatic complexity: 732 Second operand 7 states.
[2020-11-25 02:30:09,386 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:09,386 INFO  L93              Difference]: Finished difference Result 5445 states and 6178 transitions.
[2020-11-25 02:30:09,386 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:30:09,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5445 states and 6178 transitions.
[2020-11-25 02:30:09,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:09,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5445 states to 5428 states and 6158 transitions.
[2020-11-25 02:30:09,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:30:09,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:30:09,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5428 states and 6158 transitions.
[2020-11-25 02:30:09,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:09,409 INFO  L728         BuchiCegarLoop]: Abstraction has 5428 states and 6158 transitions.
[2020-11-25 02:30:09,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5428 states and 6158 transitions.
[2020-11-25 02:30:09,436 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5428 to 5428.
[2020-11-25 02:30:09,436 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5428 states.
[2020-11-25 02:30:09,441 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5428 states to 5428 states and 6158 transitions.
[2020-11-25 02:30:09,441 INFO  L751         BuchiCegarLoop]: Abstraction has 5428 states and 6158 transitions.
[2020-11-25 02:30:09,441 INFO  L631         BuchiCegarLoop]: Abstraction has 5428 states and 6158 transitions.
[2020-11-25 02:30:09,442 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:30:09,442 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5428 states and 6158 transitions.
[2020-11-25 02:30:09,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:09,447 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:09,447 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:09,449 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:09,449 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:09,454 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:09,455 INFO  L82        PathProgramCache]: Analyzing trace with hash -581721530, now seen corresponding path program 1 times
[2020-11-25 02:30:09,455 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:09,468 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:09,649 INFO  L134       CoverageAnalysis]: Checked inductivity of 1021 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 990 trivial. 0 not checked.
[2020-11-25 02:30:09,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:09,649 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:09,650 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:09,650 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:09,650 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:09,650 INFO  L87              Difference]: Start difference. First operand 5428 states and 6158 transitions. cyclomatic complexity: 732 Second operand 8 states.
[2020-11-25 02:30:09,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:09,783 INFO  L93              Difference]: Finished difference Result 5467 states and 6205 transitions.
[2020-11-25 02:30:09,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:09,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5467 states and 6205 transitions.
[2020-11-25 02:30:09,792 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:09,802 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5467 states to 5441 states and 6173 transitions.
[2020-11-25 02:30:09,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:30:09,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:30:09,803 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5441 states and 6173 transitions.
[2020-11-25 02:30:09,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:09,806 INFO  L728         BuchiCegarLoop]: Abstraction has 5441 states and 6173 transitions.
[2020-11-25 02:30:09,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5441 states and 6173 transitions.
[2020-11-25 02:30:09,837 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5441 to 5441.
[2020-11-25 02:30:09,837 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5441 states.
[2020-11-25 02:30:09,843 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5441 states to 5441 states and 6173 transitions.
[2020-11-25 02:30:09,843 INFO  L751         BuchiCegarLoop]: Abstraction has 5441 states and 6173 transitions.
[2020-11-25 02:30:09,843 INFO  L631         BuchiCegarLoop]: Abstraction has 5441 states and 6173 transitions.
[2020-11-25 02:30:09,843 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:30:09,843 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5441 states and 6173 transitions.
[2020-11-25 02:30:09,849 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:09,849 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:09,849 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:09,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:09,851 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND TRUE   DType[this] == ERC20Pausable
[L4944]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4944]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4945]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:09,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:09,856 INFO  L82        PathProgramCache]: Analyzing trace with hash -1105378404, now seen corresponding path program 1 times
[2020-11-25 02:30:09,858 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:09,869 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:10,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 1014 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 983 trivial. 0 not checked.
[2020-11-25 02:30:10,034 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:10,034 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:10,034 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:10,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:10,034 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:10,035 INFO  L87              Difference]: Start difference. First operand 5441 states and 6173 transitions. cyclomatic complexity: 734 Second operand 8 states.
[2020-11-25 02:30:10,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:10,197 INFO  L93              Difference]: Finished difference Result 5474 states and 6213 transitions.
[2020-11-25 02:30:10,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:10,197 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5474 states and 6213 transitions.
[2020-11-25 02:30:10,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:10,220 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5474 states to 5448 states and 6181 transitions.
[2020-11-25 02:30:10,220 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1163
[2020-11-25 02:30:10,220 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1163
[2020-11-25 02:30:10,220 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5448 states and 6181 transitions.
[2020-11-25 02:30:10,224 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:10,224 INFO  L728         BuchiCegarLoop]: Abstraction has 5448 states and 6181 transitions.
[2020-11-25 02:30:10,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5448 states and 6181 transitions.
[2020-11-25 02:30:10,252 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5448 to 5435.
[2020-11-25 02:30:10,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5435 states.
[2020-11-25 02:30:10,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5435 states to 5435 states and 6166 transitions.
[2020-11-25 02:30:10,257 INFO  L751         BuchiCegarLoop]: Abstraction has 5435 states and 6166 transitions.
[2020-11-25 02:30:10,257 INFO  L631         BuchiCegarLoop]: Abstraction has 5435 states and 6166 transitions.
[2020-11-25 02:30:10,257 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:30:10,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5435 states and 6166 transitions.
[2020-11-25 02:30:10,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:30:10,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:10,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:10,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:10,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND TRUE   __exception
[L2718]              __tmp__Balance := Balance;
[L2719]              __tmp__DType := DType;
[L2720]              __tmp__Alloc := Alloc;
[L2721]              __tmp__balance_ADDR := balance_ADDR;
[L2722]              __tmp__M_Ref_int := M_Ref_int;
[L2723]              __tmp__sum__balances0 := sum__balances0;
[L2724]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2725]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2726]              __tmp__sum__allowed1 := sum__allowed1;
[L2727]              __tmp__M_Ref_bool := M_Ref_bool;
[L2728]              __tmp__sum := sum;
[L2729]              __tmp__Length := Length;
[L2730]              __tmp__now := now;
[L2731]              __tmp___balances_ERC20 := _balances_ERC20;
[L2732]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2733]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2734]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2735]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2736]              __tmp___paused_Pausable := _paused_Pausable;
[L2737]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2738]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2739]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2740]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2741]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6137]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6137]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6138]  COND FALSE  !(revert)
[L6141]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6141]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6142]  COND FALSE  !(revert)
[L6145]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L6145]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6146]  COND FALSE  !(revert)
[L6149]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L6149]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6150]  COND FALSE  !(revert)
[L6153]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5281]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5282]  COND FALSE  !(revert)
[L5285]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5285]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5286]  COND FALSE  !(revert)
[L5289]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5289]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5290]  COND FALSE  !(revert)
[L5293]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4891]              assume msgsender_MSG != null;
[L4892]              __tmp__Balance[this] := 0;
[L4894]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L4894]  RET         call __var_22 := FreshRefGenerator__fail();
[L4895]  COND FALSE  !(revert)
[L4898]              __tmp___pausers_PauserRole[this] := __var_22;
[L4900]  COND TRUE   __tmp__DType[this] == OMToken
[L4901]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5121]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5121]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5122]  COND FALSE  !(revert)
[L4901]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4902]  COND FALSE  !(revert)
[L4966]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4967]  COND FALSE  !(revert)
[L5175]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5176]  COND FALSE  !(revert)
[L5179]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5156]              assume msgsender_MSG != null;
[L5157]              __tmp__Balance[this] := 0;
[L5158]              __tmp___paused_Pausable[this] := false;
[L5160]              __tmp___paused_Pausable[this] := false;
[L5179]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5180]  COND FALSE  !(revert)
[L5293]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5294]  COND FALSE  !(revert)
[L5297]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5266]              assume msgsender_MSG != null;
[L5267]              __tmp__Balance[this] := 0;
[L5297]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5298]  COND FALSE  !(revert)
[L6153]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6154]  COND FALSE  !(revert)
[L6157]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5607]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5607]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5608]  COND FALSE  !(revert)
[L5611]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5580]              assume msgsender_MSG != null;
[L5581]              __tmp__Balance[this] := 0;
[L5582]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5584]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5586]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5587]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5588]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5611]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5612]  COND FALSE  !(revert)
[L6157]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6158]  COND FALSE  !(revert)
[L6161]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L6161]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6162]  COND FALSE  !(revert)
[L6165]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L5919]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5920]  COND FALSE  !(revert)
[L5923]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L5923]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5924]  COND FALSE  !(revert)
[L5927]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5669]              assume msgsender_MSG != null;
[L5670]              __tmp__Balance[this] := 0;
[L5672]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3955]              havoc newRef;
[L3956]              assume __tmp__Alloc[newRef] == false;
[L3957]              __tmp__Alloc[newRef] := true;
[L3958]              assume newRef != null;
[L5672]  RET         call __var_35 := FreshRefGenerator__fail();
[L5673]  COND FALSE  !(revert)
[L5676]              __tmp___minters_MinterRole[this] := __var_35;
[L5678]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5683]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5684]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5869]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4787]              __var_17 := null;
[L4788]  COND FALSE  !(!(account_s659 != null))
[L4792]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4866]              __var_21 := null;
[L4867]  COND FALSE  !(!(account_s713 != null))
[L4871]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4792]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4793]  COND FALSE  !(revert)
[L4796]  COND FALSE  !(!!__var_18)
[L4800]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5869]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5870]  COND FALSE  !(revert)
[L5684]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5685]  COND FALSE  !(revert)
[L5734]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5735]  COND FALSE  !(revert)
[L5927]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5928]  COND FALSE  !(revert)
[L5931]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5904]              assume msgsender_MSG != null;
[L5905]              __tmp__Balance[this] := 0;
[L5931]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5932]  COND FALSE  !(revert)
[L6165]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6166]  COND FALSE  !(revert)
[L6169]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L6021]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6022]  COND FALSE  !(revert)
[L6025]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3982]              assume msgsender_MSG != null;
[L3983]              __tmp__Balance[this] := 0;
[L3997]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4195]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4170]              assume msgsender_MSG != null;
[L4171]              __tmp__Balance[this] := 0;
[L4172]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4173]              __tmp__sum__balances0[this] := 0;
[L4174]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4175]              __tmp__sum__allowed1[this] := 0;
[L4176]              __tmp___totalSupply_ERC20[this] := 0;
[L4199]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L6025]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6026]  COND FALSE  !(revert)
[L6029]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6006]              assume msgsender_MSG != null;
[L6007]              __tmp__Balance[this] := 0;
[L6029]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6030]  COND FALSE  !(revert)
[L6169]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6170]  COND FALSE  !(revert)
[L6173]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6122]              assume msgsender_MSG != null;
[L6123]              __tmp__Balance[this] := 0;
[L6173]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6174]  COND FALSE  !(revert)
[L2741]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2742]              assume revert || gas < 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:10,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:10,271 INFO  L82        PathProgramCache]: Analyzing trace with hash 1949935680, now seen corresponding path program 1 times
[2020-11-25 02:30:10,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:10,295 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:10,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 988 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 956 trivial. 0 not checked.
[2020-11-25 02:30:10,474 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:10,474 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:30:10,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:10,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:30:10,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:30:10,474 INFO  L87              Difference]: Start difference. First operand 5435 states and 6166 transitions. cyclomatic complexity: 733 Second operand 4 states.
[2020-11-25 02:30:11,171 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:11,171 INFO  L93              Difference]: Finished difference Result 6423 states and 7387 transitions.
[2020-11-25 02:30:11,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:30:11,172 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6423 states and 7387 transitions.
[2020-11-25 02:30:11,186 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:30:11,200 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6423 states to 6144 states and 7083 transitions.
[2020-11-25 02:30:11,200 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1402
[2020-11-25 02:30:11,201 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1402
[2020-11-25 02:30:11,201 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6144 states and 7083 transitions.
[2020-11-25 02:30:11,204 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:11,204 INFO  L728         BuchiCegarLoop]: Abstraction has 6144 states and 7083 transitions.
[2020-11-25 02:30:11,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6144 states and 7083 transitions.
[2020-11-25 02:30:11,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6144 to 5477.
[2020-11-25 02:30:11,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5477 states.
[2020-11-25 02:30:11,242 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5477 states to 5477 states and 6233 transitions.
[2020-11-25 02:30:11,242 INFO  L751         BuchiCegarLoop]: Abstraction has 5477 states and 6233 transitions.
[2020-11-25 02:30:11,242 INFO  L631         BuchiCegarLoop]: Abstraction has 5477 states and 6233 transitions.
[2020-11-25 02:30:11,242 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:30:11,242 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5477 states and 6233 transitions.
[2020-11-25 02:30:11,248 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:11,248 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:11,248 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:11,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:11,250 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND TRUE   DType[this] == Pausable
[L4949]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4949]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4950]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:11,255 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:11,255 INFO  L82        PathProgramCache]: Analyzing trace with hash 1949400976, now seen corresponding path program 1 times
[2020-11-25 02:30:11,256 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:11,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:11,460 INFO  L134       CoverageAnalysis]: Checked inductivity of 1016 backedges. 12 proven. 11 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:30:11,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:11,460 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:30:11,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:11,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:11,461 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:11,461 INFO  L87              Difference]: Start difference. First operand 5477 states and 6233 transitions. cyclomatic complexity: 758 Second operand 8 states.
[2020-11-25 02:30:11,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:11,595 INFO  L93              Difference]: Finished difference Result 5510 states and 6273 transitions.
[2020-11-25 02:30:11,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:11,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5510 states and 6273 transitions.
[2020-11-25 02:30:11,605 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:11,613 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5510 states to 5477 states and 6232 transitions.
[2020-11-25 02:30:11,613 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:30:11,614 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:30:11,614 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5477 states and 6232 transitions.
[2020-11-25 02:30:11,617 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:11,617 INFO  L728         BuchiCegarLoop]: Abstraction has 5477 states and 6232 transitions.
[2020-11-25 02:30:11,620 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5477 states and 6232 transitions.
[2020-11-25 02:30:11,647 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5477 to 5477.
[2020-11-25 02:30:11,648 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5477 states.
[2020-11-25 02:30:11,653 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5477 states to 5477 states and 6232 transitions.
[2020-11-25 02:30:11,653 INFO  L751         BuchiCegarLoop]: Abstraction has 5477 states and 6232 transitions.
[2020-11-25 02:30:11,653 INFO  L631         BuchiCegarLoop]: Abstraction has 5477 states and 6232 transitions.
[2020-11-25 02:30:11,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:30:11,654 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5477 states and 6232 transitions.
[2020-11-25 02:30:11,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:11,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:11,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:11,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:11,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:11,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:11,667 INFO  L82        PathProgramCache]: Analyzing trace with hash -528294548, now seen corresponding path program 1 times
[2020-11-25 02:30:11,667 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:11,685 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:11,851 INFO  L134       CoverageAnalysis]: Checked inductivity of 1027 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 1021 trivial. 0 not checked.
[2020-11-25 02:30:11,852 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:30:11,852 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:30:11,852 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:11,852 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:30:11,852 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:30:11,853 INFO  L87              Difference]: Start difference. First operand 5477 states and 6232 transitions. cyclomatic complexity: 757 Second operand 7 states.
[2020-11-25 02:30:11,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:11,996 INFO  L93              Difference]: Finished difference Result 5500 states and 6258 transitions.
[2020-11-25 02:30:11,996 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:30:11,996 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5500 states and 6258 transitions.
[2020-11-25 02:30:12,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5500 states to 5483 states and 6238 transitions.
[2020-11-25 02:30:12,034 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:30:12,035 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:30:12,035 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5483 states and 6238 transitions.
[2020-11-25 02:30:12,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:12,039 INFO  L728         BuchiCegarLoop]: Abstraction has 5483 states and 6238 transitions.
[2020-11-25 02:30:12,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5483 states and 6238 transitions.
[2020-11-25 02:30:12,083 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5483 to 5477.
[2020-11-25 02:30:12,083 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5477 states.
[2020-11-25 02:30:12,092 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5477 states to 5477 states and 6232 transitions.
[2020-11-25 02:30:12,092 INFO  L751         BuchiCegarLoop]: Abstraction has 5477 states and 6232 transitions.
[2020-11-25 02:30:12,092 INFO  L631         BuchiCegarLoop]: Abstraction has 5477 states and 6232 transitions.
[2020-11-25 02:30:12,092 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:30:12,092 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5477 states and 6232 transitions.
[2020-11-25 02:30:12,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:12,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:12,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:12,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND FALSE  !(DType[this] == ERC20Mintable)
[L5721]  COND TRUE   DType[this] == MinterRole
[L5722]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5722]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5723]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:12,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:12,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -419294858, now seen corresponding path program 1 times
[2020-11-25 02:30:12,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:12,138 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:12,361 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:30:12,361 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:12,361 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:30:12,362 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:12,362 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:12,362 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:12,362 INFO  L87              Difference]: Start difference. First operand 5477 states and 6232 transitions. cyclomatic complexity: 757 Second operand 8 states.
[2020-11-25 02:30:12,484 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:12,484 INFO  L93              Difference]: Finished difference Result 5504 states and 6261 transitions.
[2020-11-25 02:30:12,484 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:12,484 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5504 states and 6261 transitions.
[2020-11-25 02:30:12,493 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5504 states to 5472 states and 6225 transitions.
[2020-11-25 02:30:12,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:30:12,502 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:30:12,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5472 states and 6225 transitions.
[2020-11-25 02:30:12,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:12,505 INFO  L728         BuchiCegarLoop]: Abstraction has 5472 states and 6225 transitions.
[2020-11-25 02:30:12,509 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5472 states and 6225 transitions.
[2020-11-25 02:30:12,529 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5472 to 5472.
[2020-11-25 02:30:12,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5472 states.
[2020-11-25 02:30:12,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5472 states to 5472 states and 6225 transitions.
[2020-11-25 02:30:12,534 INFO  L751         BuchiCegarLoop]: Abstraction has 5472 states and 6225 transitions.
[2020-11-25 02:30:12,534 INFO  L631         BuchiCegarLoop]: Abstraction has 5472 states and 6225 transitions.
[2020-11-25 02:30:12,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:30:12,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5472 states and 6225 transitions.
[2020-11-25 02:30:12,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:12,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:12,541 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:12,542 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND FALSE  !(DType[this] == OMToken)
[L4943]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4948]  COND FALSE  !(DType[this] == Pausable)
[L4953]  COND TRUE   DType[this] == PauserRole
[L4954]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4954]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4955]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:12,545 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:12,546 INFO  L82        PathProgramCache]: Analyzing trace with hash -315775993, now seen corresponding path program 1 times
[2020-11-25 02:30:12,546 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:12,559 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:12,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 1014 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 989 trivial. 0 not checked.
[2020-11-25 02:30:12,719 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:12,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:30:12,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:12,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:30:12,720 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:30:12,720 INFO  L87              Difference]: Start difference. First operand 5472 states and 6225 transitions. cyclomatic complexity: 755 Second operand 9 states.
[2020-11-25 02:30:12,870 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:12,870 INFO  L93              Difference]: Finished difference Result 5502 states and 6260 transitions.
[2020-11-25 02:30:12,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:30:12,870 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5502 states and 6260 transitions.
[2020-11-25 02:30:12,879 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,888 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5502 states to 5444 states and 6190 transitions.
[2020-11-25 02:30:12,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:30:12,888 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:30:12,888 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5444 states and 6190 transitions.
[2020-11-25 02:30:12,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:12,891 INFO  L728         BuchiCegarLoop]: Abstraction has 5444 states and 6190 transitions.
[2020-11-25 02:30:12,894 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5444 states and 6190 transitions.
[2020-11-25 02:30:12,932 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5444 to 5444.
[2020-11-25 02:30:12,932 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5444 states.
[2020-11-25 02:30:12,937 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5444 states to 5444 states and 6190 transitions.
[2020-11-25 02:30:12,937 INFO  L751         BuchiCegarLoop]: Abstraction has 5444 states and 6190 transitions.
[2020-11-25 02:30:12,937 INFO  L631         BuchiCegarLoop]: Abstraction has 5444 states and 6190 transitions.
[2020-11-25 02:30:12,937 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:30:12,938 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5444 states and 6190 transitions.
[2020-11-25 02:30:12,943 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:12,943 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:12,943 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:12,944 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:12,944 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND FALSE  !(DType[this] == OMToken)
[L5716]  COND TRUE   DType[this] == ERC20Mintable
[L5717]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5717]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5718]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:12,949 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:12,949 INFO  L82        PathProgramCache]: Analyzing trace with hash -2135962390, now seen corresponding path program 1 times
[2020-11-25 02:30:12,950 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:12,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:13,130 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:30:13,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:13,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:30:13,130 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:13,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:30:13,130 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:30:13,131 INFO  L87              Difference]: Start difference. First operand 5444 states and 6190 transitions. cyclomatic complexity: 748 Second operand 8 states.
[2020-11-25 02:30:13,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:13,251 INFO  L93              Difference]: Finished difference Result 5465 states and 6213 transitions.
[2020-11-25 02:30:13,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:30:13,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5465 states and 6213 transitions.
[2020-11-25 02:30:13,261 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:13,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5465 states to 5433 states and 6177 transitions.
[2020-11-25 02:30:13,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1359
[2020-11-25 02:30:13,270 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1359
[2020-11-25 02:30:13,270 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5433 states and 6177 transitions.
[2020-11-25 02:30:13,273 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:13,273 INFO  L728         BuchiCegarLoop]: Abstraction has 5433 states and 6177 transitions.
[2020-11-25 02:30:13,276 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5433 states and 6177 transitions.
[2020-11-25 02:30:13,296 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5433 to 5433.
[2020-11-25 02:30:13,297 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5433 states.
[2020-11-25 02:30:13,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5433 states to 5433 states and 6177 transitions.
[2020-11-25 02:30:13,302 INFO  L751         BuchiCegarLoop]: Abstraction has 5433 states and 6177 transitions.
[2020-11-25 02:30:13,302 INFO  L631         BuchiCegarLoop]: Abstraction has 5433 states and 6177 transitions.
[2020-11-25 02:30:13,302 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:30:13,302 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5433 states and 6177 transitions.
[2020-11-25 02:30:13,307 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:30:13,307 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:13,307 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:13,308 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:13,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE   !!__tmp___paused_Pausable[this]
[L8314]              revert := true;
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL       call CorralChoice_OMToken(this);
[L9690]             havoc msgsender_MSG;
[L9691]             havoc msgvalue_MSG;
[L9692]             havoc choice;
[L9693]             havoc to_s916;
[L9694]             havoc value_s916;
[L9695]             havoc __ret_0_transfer;
[L9696]             havoc spender_s955;
[L9697]             havoc value_s955;
[L9698]             havoc __ret_0_approve;
[L9699]             havoc from_s937;
[L9700]             havoc to_s937;
[L9701]             havoc value_s937;
[L9702]             havoc __ret_0_transferFrom;
[L9703]             havoc __ret_0_totalSupply;
[L9704]             havoc owner_s231;
[L9705]             havoc __ret_0_balanceOf;
[L9706]             havoc owner_s247;
[L9707]             havoc spender_s247;
[L9708]             havoc __ret_0_allowance;
[L9709]             havoc spender_s973;
[L9710]             havoc addedValue_s973;
[L9711]             havoc success_s973;
[L9712]             havoc spender_s991;
[L9713]             havoc subtractedValue_s991;
[L9714]             havoc success_s991;
[L9715]             havoc account_s760;
[L9716]             havoc __ret_0_isPauser;
[L9717]             havoc account_s772;
[L9718]             havoc __ret_0_paused;
[L9719]             havoc name_s1022;
[L9720]             havoc symbol_s1022;
[L9721]             havoc decimals_s1022;
[L9722]             havoc __ret_0_name;
[L9723]             havoc __ret_0_symbol;
[L9724]             havoc __ret_0_decimals;
[L9725]             havoc account_s1093;
[L9726]             havoc __ret_0_isMinter;
[L9727]             havoc account_s1105;
[L9728]             havoc to_s1170;
[L9729]             havoc value_s1170;
[L9730]             havoc __ret_0_mint;
[L9731]             havoc value_s1185;
[L9732]             havoc from_s1198;
[L9733]             havoc value_s1198;
[L9734]             havoc name_s1230;
[L9735]             havoc symbol_s1230;
[L9736]             havoc decimals_s1230;
[L9737]             havoc tmpNow;
[L9738]             havoc gas;
[L9739]             assume gas > 4000000 && gas <= 8000000;
[L9740]             tmpNow := now;
[L9741]             havoc now;
[L9742]             assume now > tmpNow;
[L9743]             assume msgsender_MSG != null;
[L9744]             assume DType[msgsender_MSG] != IERC20;
[L9745]             assume DType[msgsender_MSG] != SafeMath;
[L9746]             assume DType[msgsender_MSG] != ERC20;
[L9747]             assume DType[msgsender_MSG] != Roles;
[L9748]             assume DType[msgsender_MSG] != PauserRole;
[L9749]             assume DType[msgsender_MSG] != Pausable;
[L9750]             assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]             assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]             assume DType[msgsender_MSG] != MinterRole;
[L9753]             assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]             assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]             assume DType[msgsender_MSG] != OMToken;
[L9756]             Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE  choice == 23
[L9758]             gas := gas - 21000;
[L9759]  COND TRUE  gas >= 0
[L9760]             assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]             assume msgvalue_MSG == 0;
[L9762]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_ERC20Pausable0 := true;
[L3]                call_transfer_ERC20Pausable0 := false;
[L3]                revert := revert_hold;
[L1512]             havoc __exception;
[L1513]             revert := false;
[L1514]  COND TRUE  __exception
[L1515]             __tmp__Balance := Balance;
[L1516]             __tmp__DType := DType;
[L1517]             __tmp__Alloc := Alloc;
[L1518]             __tmp__balance_ADDR := balance_ADDR;
[L1519]             __tmp__M_Ref_int := M_Ref_int;
[L1520]             __tmp__sum__balances0 := sum__balances0;
[L1521]             __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]             __tmp__sum__allowed1 := sum__allowed1;
[L1524]             __tmp__M_Ref_bool := M_Ref_bool;
[L1525]             __tmp__sum := sum;
[L1526]             __tmp__Length := Length;
[L1527]             __tmp__now := now;
[L1528]             __tmp___balances_ERC20 := _balances_ERC20;
[L1529]             __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]             __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]             __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]             __tmp___paused_Pausable := _paused_Pausable;
[L1534]             __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]             __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]             __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]             __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND TRUE  !!__tmp___paused_Pausable[this]
[L8314]             revert := true;
[L5331]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND TRUE  revert
[L1538]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]             assume revert || gas < 0;
[L9762]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET        call CorralChoice_OMToken(this);

[2020-11-25 02:30:13,313 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:13,313 INFO  L82        PathProgramCache]: Analyzing trace with hash -2037628620, now seen corresponding path program 1 times
[2020-11-25 02:30:13,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:13,331 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:30:13,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1024 trivial. 0 not checked.
[2020-11-25 02:30:13,525 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:30:13,525 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 02:30:13,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:30:13,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 02:30:13,526 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 02:30:13,526 INFO  L87              Difference]: Start difference. First operand 5433 states and 6177 transitions. cyclomatic complexity: 746 Second operand 14 states.
[2020-11-25 02:30:18,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:30:18,875 INFO  L93              Difference]: Finished difference Result 8541 states and 9799 transitions.
[2020-11-25 02:30:18,875 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 02:30:18,875 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8541 states and 9799 transitions.
[2020-11-25 02:30:18,892 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 02:30:18,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8541 states to 8541 states and 9799 transitions.
[2020-11-25 02:30:18,907 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1983
[2020-11-25 02:30:18,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1983
[2020-11-25 02:30:18,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8541 states and 9799 transitions.
[2020-11-25 02:30:18,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:30:18,912 INFO  L728         BuchiCegarLoop]: Abstraction has 8541 states and 9799 transitions.
[2020-11-25 02:30:18,916 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8541 states and 9799 transitions.
[2020-11-25 02:30:18,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8541 to 7641.
[2020-11-25 02:30:18,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7641 states.
[2020-11-25 02:30:18,962 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7641 states to 7641 states and 8899 transitions.
[2020-11-25 02:30:18,962 INFO  L751         BuchiCegarLoop]: Abstraction has 7641 states and 8899 transitions.
[2020-11-25 02:30:18,962 INFO  L631         BuchiCegarLoop]: Abstraction has 7641 states and 8899 transitions.
[2020-11-25 02:30:18,962 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:30:18,962 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7641 states and 8899 transitions.
[2020-11-25 02:30:18,970 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 02:30:18,971 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:30:18,971 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:30:18,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:30:18,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC20Pausable0 := false;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L9914]              assume null == 0;
[L9915]  CALL        call this := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L9915]  RET         call this := FreshRefGenerator__success();
[L9916]              assume now >= 0;
[L9917]              assume DType[this] == OMToken;
[L9918]              assume msgvalue_MSG == 0;
[L9919]              gas := gas - 53000;
[L9920]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9921]              assume !revert && gas >= 0;
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND FALSE  !(revert)
[L5335]  COND TRUE   __tmp__DType[this] == OMToken
[L5336]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4255]  COND TRUE   __tmp__DType[this] == OMToken
[L4256]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4256]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4257]  COND TRUE   revert
[L5336]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5337]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

Loop:
[L9924]  CALL        call CorralChoice_OMToken(this);
[L9690]              havoc msgsender_MSG;
[L9691]              havoc msgvalue_MSG;
[L9692]              havoc choice;
[L9693]              havoc to_s916;
[L9694]              havoc value_s916;
[L9695]              havoc __ret_0_transfer;
[L9696]              havoc spender_s955;
[L9697]              havoc value_s955;
[L9698]              havoc __ret_0_approve;
[L9699]              havoc from_s937;
[L9700]              havoc to_s937;
[L9701]              havoc value_s937;
[L9702]              havoc __ret_0_transferFrom;
[L9703]              havoc __ret_0_totalSupply;
[L9704]              havoc owner_s231;
[L9705]              havoc __ret_0_balanceOf;
[L9706]              havoc owner_s247;
[L9707]              havoc spender_s247;
[L9708]              havoc __ret_0_allowance;
[L9709]              havoc spender_s973;
[L9710]              havoc addedValue_s973;
[L9711]              havoc success_s973;
[L9712]              havoc spender_s991;
[L9713]              havoc subtractedValue_s991;
[L9714]              havoc success_s991;
[L9715]              havoc account_s760;
[L9716]              havoc __ret_0_isPauser;
[L9717]              havoc account_s772;
[L9718]              havoc __ret_0_paused;
[L9719]              havoc name_s1022;
[L9720]              havoc symbol_s1022;
[L9721]              havoc decimals_s1022;
[L9722]              havoc __ret_0_name;
[L9723]              havoc __ret_0_symbol;
[L9724]              havoc __ret_0_decimals;
[L9725]              havoc account_s1093;
[L9726]              havoc __ret_0_isMinter;
[L9727]              havoc account_s1105;
[L9728]              havoc to_s1170;
[L9729]              havoc value_s1170;
[L9730]              havoc __ret_0_mint;
[L9731]              havoc value_s1185;
[L9732]              havoc from_s1198;
[L9733]              havoc value_s1198;
[L9734]              havoc name_s1230;
[L9735]              havoc symbol_s1230;
[L9736]              havoc decimals_s1230;
[L9737]              havoc tmpNow;
[L9738]              havoc gas;
[L9739]              assume gas > 4000000 && gas <= 8000000;
[L9740]              tmpNow := now;
[L9741]              havoc now;
[L9742]              assume now > tmpNow;
[L9743]              assume msgsender_MSG != null;
[L9744]              assume DType[msgsender_MSG] != IERC20;
[L9745]              assume DType[msgsender_MSG] != SafeMath;
[L9746]              assume DType[msgsender_MSG] != ERC20;
[L9747]              assume DType[msgsender_MSG] != Roles;
[L9748]              assume DType[msgsender_MSG] != PauserRole;
[L9749]              assume DType[msgsender_MSG] != Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9751]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9752]              assume DType[msgsender_MSG] != MinterRole;
[L9753]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9754]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9755]              assume DType[msgsender_MSG] != OMToken;
[L9756]              Alloc[msgsender_MSG] := true;
[L9757]  COND TRUE   choice == 23
[L9758]              gas := gas - 21000;
[L9759]  COND TRUE   gas >= 0
[L9760]              assume value_s916 >= 0 && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9761]              assume msgvalue_MSG == 0;
[L9762]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND FALSE  !(revert)
[L5335]  COND TRUE   __tmp__DType[this] == OMToken
[L5336]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4255]  COND TRUE   __tmp__DType[this] == OMToken
[L4256]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4256]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4257]  COND TRUE   revert
[L5336]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5337]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L9924]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:30:18,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:18,976 INFO  L82        PathProgramCache]: Analyzing trace with hash 993690247, now seen corresponding path program 1 times
[2020-11-25 02:30:18,977 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:18,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:19,019 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:19,158 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:19,158 INFO  L82        PathProgramCache]: Analyzing trace with hash -1547307735, now seen corresponding path program 1 times
[2020-11-25 02:30:19,159 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:19,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:19,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:19,178 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:30:19,178 INFO  L82        PathProgramCache]: Analyzing trace with hash -1690809425, now seen corresponding path program 1 times
[2020-11-25 02:30:19,179 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:30:19,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:19,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 02:30:19,518 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 150
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 02:30:19,723 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 271
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 6661 to 13313
[2020-11-25 02:30:19,899 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification that was a NOOP. DAG size: 217
[2020-11-25 02:30:20,391 WARN  L188               SmtUtils]: Spent 488.00 ms on a formula simplification. DAG size of input: 281 DAG size of output: 275
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 02:30:20,627 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 170
[2020-11-25 02:30:20,777 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 347
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8713 to 17419
[2020-11-25 02:30:20,924 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 282
[2020-11-25 02:30:21,062 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification that was a NOOP. DAG size: 282
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 02:30:21,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
[2020-11-25 02:30:23,062 WARN  L188               SmtUtils]: Spent 967.00 ms on a formula simplification. DAG size of input: 476 DAG size of output: 445
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 02:30:23,339 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 198
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 02:30:23,472 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 02:30:23,920 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 217
[2020-11-25 02:30:24,293 WARN  L188               SmtUtils]: Spent 371.00 ms on a formula simplification. DAG size of input: 280 DAG size of output: 275
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
[2020-11-25 02:30:24,417 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 170
[2020-11-25 02:30:24,565 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 347
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:30:24,704 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 282
[2020-11-25 02:30:25,425 WARN  L188               SmtUtils]: Spent 719.00 ms on a formula simplification. DAG size of input: 568 DAG size of output: 553
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 02:30:25,618 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 273
[2020-11-25 02:30:25,831 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification that was a NOOP. DAG size: 388
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 02:30:26,212 WARN  L188               SmtUtils]: Spent 300.00 ms on a formula simplification. DAG size of input: 390 DAG size of output: 389
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 02:30:26,357 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification that was a NOOP. DAG size: 385
[2020-11-25 02:30:26,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:26,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:30:26,418 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:30:26 BasicIcfg
[2020-11-25 02:30:26,418 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:30:26,419 INFO  L168              Benchmark]: Toolchain (without parser) took 25669.37 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.4 GB). Free memory was 924.5 MB in the beginning and 2.5 GB in the end (delta: -1.6 GB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,419 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,420 INFO  L168              Benchmark]: Boogie Preprocessor took 153.66 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,420 INFO  L168              Benchmark]: UtopiaSpecLang took 84.17 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,420 INFO  L168              Benchmark]: Boogie Printer took 25.63 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,421 INFO  L168              Benchmark]: RCFGBuilder took 1580.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 886.9 MB in the beginning and 830.7 MB in the end (delta: 56.1 MB). Peak memory consumption was 176.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,421 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.07 ms. Allocated memory is still 1.1 GB. Free memory was 830.7 MB in the beginning and 827.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,422 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2948.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 452.5 MB). Free memory was 827.3 MB in the beginning and 1.3 GB in the end (delta: -445.6 MB). Peak memory consumption was 411.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,422 INFO  L168              Benchmark]: BlockEncodingV2 took 231.16 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 138.4 MB). Peak memory consumption was 138.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,422 INFO  L168              Benchmark]: BuchiAutomizer took 20604.85 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 1.1 GB in the beginning and 2.5 GB in the end (delta: -1.4 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 02:30:26,425 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9264 locations, 17158 edges
  - StatisticsResult: Encoded RCFG
    9108 locations, 16731 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 153.66 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 84.17 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.63 ms. Allocated memory is still 1.0 GB. Free memory was 892.3 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1580.32 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 886.9 MB in the beginning and 830.7 MB in the end (delta: 56.1 MB). Peak memory consumption was 176.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.07 ms. Allocated memory is still 1.1 GB. Free memory was 830.7 MB in the beginning and 827.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2948.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 452.5 MB). Free memory was 827.3 MB in the beginning and 1.3 GB in the end (delta: -445.6 MB). Peak memory consumption was 411.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 231.16 ms. Allocated memory is still 1.5 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 138.4 MB). Peak memory consumption was 138.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 20604.85 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 1.9 GB). Free memory was 1.1 GB in the beginning and 2.5 GB in the end (delta: -1.4 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3604 locations, 5217 edges
  - StatisticsResult: BuchiProgram size
    9264 locations, 17158 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 16 terminating modules (16 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.16 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 7641 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 20.5s and 17 iterations.  TraceHistogramMax:9. Analysis of lassos took 10.1s. Construction of modules took 6.0s. BÃ¼chi inclusion checks took 2.7s. Highest rank in rank-based complementation 0. Minimization of det autom 16. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 16 MinimizatonAttempts, 3316 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 7641 states and ocurred in iteration 16.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 94732 SDtfs, 29272 SDslu, 395276 SDs, 0 SdLazy, 87364 SolverSat, 6199 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979037) = (new OMToken)({from : 3979023, name : 3979034, symbol : 3979035, decimals : 3979019});
[L2715]              havoc __exception;
[L2716]              revert := false;
[L2717]  COND FALSE  !(__exception)
[L2744]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6182]  COND FALSE  !(revert)
[L6185]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6185]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6186]  COND FALSE  !(revert)
[L6189]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L6189]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]  COND FALSE  !(revert)
[L6193]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L6193]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6194]  COND FALSE  !(revert)
[L6197]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5305]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5306]  COND FALSE  !(revert)
[L5309]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5309]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5310]  COND FALSE  !(revert)
[L5313]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5313]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5314]  COND FALSE  !(revert)
[L5317]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4929]              assume msgsender_MSG != null;
[L4930]              Balance[this] := 0;
[L4932]  CALL        call __var_22 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L4932]  RET         call __var_22 := FreshRefGenerator__success();
[L4933]  COND FALSE  !(revert)
[L4936]              _pausers_PauserRole[this] := __var_22;
[L4938]  COND TRUE   DType[this] == OMToken
[L4939]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5129]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5129]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5130]  COND FALSE  !(revert)
[L5133]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4939]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4940]  COND FALSE  !(revert)
[L4975]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L5187]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5188]  COND FALSE  !(revert)
[L5191]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5166]              assume msgsender_MSG != null;
[L5167]              Balance[this] := 0;
[L5168]              _paused_Pausable[this] := false;
[L5170]              _paused_Pausable[this] := false;
[L5191]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5192]  COND FALSE  !(revert)
[L5317]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5318]  COND FALSE  !(revert)
[L5321]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5274]              assume msgsender_MSG != null;
[L5275]              Balance[this] := 0;
[L5321]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5322]  COND FALSE  !(revert)
[L6197]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6198]  COND FALSE  !(revert)
[L6201]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5619]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5619]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5620]  COND FALSE  !(revert)
[L5623]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5594]              assume msgsender_MSG != null;
[L5595]              Balance[this] := 0;
[L5596]              _name_ERC20Detailed[this] := -1676908070;
[L5597]              _symbol_ERC20Detailed[this] := -1676908070;
[L5598]              _decimals_ERC20Detailed[this] := 0;
[L5600]              _name_ERC20Detailed[this] := name_s1022;
[L5601]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5602]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5623]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5624]  COND FALSE  !(revert)
[L6201]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6202]  COND FALSE  !(revert)
[L6205]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L6205]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6206]  COND FALSE  !(revert)
[L6209]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L5939]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5940]  COND FALSE  !(revert)
[L5943]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L5943]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5944]  COND FALSE  !(revert)
[L5947]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5702]              assume msgsender_MSG != null;
[L5703]              Balance[this] := 0;
[L5705]  CALL        call __var_35 := FreshRefGenerator__success();
[L3963]              havoc newRef;
[L3964]              assume Alloc[newRef] == false;
[L3965]              Alloc[newRef] := true;
[L3966]              assume newRef != null;
[L5705]  RET         call __var_35 := FreshRefGenerator__success();
[L5706]  COND FALSE  !(revert)
[L5709]              _minters_MinterRole[this] := __var_35;
[L5711]  COND TRUE   DType[this] == OMToken
[L5712]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5877]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4807]              __var_17 := null;
[L4808]  COND FALSE  !(!(account_s659 != null))
[L4812]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4878]              __var_21 := null;
[L4879]  COND FALSE  !(!(account_s713 != null))
[L4883]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4812]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4813]  COND FALSE  !(revert)
[L4816]  COND FALSE  !(!!__var_18)
[L4820]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5877]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5878]  COND FALSE  !(revert)
[L5881]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5712]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5713]  COND FALSE  !(revert)
[L5743]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5744]  COND FALSE  !(revert)
[L5947]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]  COND FALSE  !(revert)
[L5951]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5912]              assume msgsender_MSG != null;
[L5913]              Balance[this] := 0;
[L5951]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5952]  COND FALSE  !(revert)
[L6209]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6210]  COND FALSE  !(revert)
[L6213]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L6037]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6038]  COND FALSE  !(revert)
[L6041]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3990]              assume msgsender_MSG != null;
[L3991]              Balance[this] := 0;
[L4005]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4207]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4208]  COND FALSE  !(revert)
[L4211]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4183]              assume msgsender_MSG != null;
[L4184]              Balance[this] := 0;
[L4185]              _balances_ERC20[this] := zeroRefintArr();
[L4186]              sum__balances0[this] := 0;
[L4187]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4188]              sum__allowed1[this] := 0;
[L4189]              _totalSupply_ERC20[this] := 0;
[L4211]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4212]  COND FALSE  !(revert)
[L6041]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6042]  COND FALSE  !(revert)
[L6045]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6014]              assume msgsender_MSG != null;
[L6015]              Balance[this] := 0;
[L6045]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6046]  COND FALSE  !(revert)
[L6213]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6214]  COND FALSE  !(revert)
[L6217]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6130]              assume msgsender_MSG != null;
[L6131]              Balance[this] := 0;
[L6217]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6218]  COND FALSE  !(revert)
[L2744]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2745]              assume !revert && gas >= 0;
[L9920]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
ERC20Pausable(3979037).transfer~address~uint256.gas(3979002)({from : 3979027, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND FALSE  !(revert)
[L5335]  COND TRUE   __tmp__DType[this] == OMToken
[L5336]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4255]  COND TRUE   __tmp__DType[this] == OMToken
[L4256]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4256]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4257]  COND TRUE   revert
[L5336]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5337]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);

Loop:
ERC20Pausable(3979037).transfer~address~uint256.gas(3979001)({from : 3979026, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s916) && msgsender_MSG != to_s916) && value_s916 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s916] + value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s916 >= 0) && value_s916 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s916] >= 0) && _balances_ERC20[this][to_s916] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC20Pausable0 := true;
[L3]                 call_transfer_ERC20Pausable0 := false;
[L3]                 revert := revert_hold;
[L1512]              havoc __exception;
[L1513]              revert := false;
[L1514]  COND TRUE   __exception
[L1515]              __tmp__Balance := Balance;
[L1516]              __tmp__DType := DType;
[L1517]              __tmp__Alloc := Alloc;
[L1518]              __tmp__balance_ADDR := balance_ADDR;
[L1519]              __tmp__M_Ref_int := M_Ref_int;
[L1520]              __tmp__sum__balances0 := sum__balances0;
[L1521]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1522]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1523]              __tmp__sum__allowed1 := sum__allowed1;
[L1524]              __tmp__M_Ref_bool := M_Ref_bool;
[L1525]              __tmp__sum := sum;
[L1526]              __tmp__Length := Length;
[L1527]              __tmp__now := now;
[L1528]              __tmp___balances_ERC20 := _balances_ERC20;
[L1529]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1530]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1531]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1532]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1533]              __tmp___paused_Pausable := _paused_Pausable;
[L1534]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1535]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1536]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1537]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1538]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5331]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L8313]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L5331]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5332]  COND FALSE  !(revert)
[L5335]  COND TRUE   __tmp__DType[this] == OMToken
[L5336]  CALL        call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L4255]  COND TRUE   __tmp__DType[this] == OMToken
[L4256]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4524]              __var_7 := null;
[L4525]  COND TRUE   !(to_s495 != null)
[L4526]              revert := true;
[L4256]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s266, value_s266);
[L4257]  COND TRUE   revert
[L5336]  RET         call __var_25 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L5337]  COND TRUE   revert
[L1538]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);
[L1539]              assume revert || gas < 0;
[L9762]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s916, value_s916);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
