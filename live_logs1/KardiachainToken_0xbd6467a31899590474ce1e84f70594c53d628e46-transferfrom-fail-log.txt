This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:04:58,539 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:04:58,541 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:04:58,553 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:04:58,553 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:04:58,554 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:04:58,555 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:04:58,556 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:04:58,558 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:04:58,559 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:04:58,559 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:04:58,560 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:04:58,561 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:04:58,561 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:04:58,562 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:04:58,563 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:04:58,564 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:04:58,566 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:04:58,568 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:04:58,569 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:04:58,570 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:04:58,571 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:04:58,573 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:04:58,573 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:04:58,573 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:04:58,574 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:04:58,574 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:04:58,575 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:04:58,575 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:04:58,575 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:04:58,576 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:04:58,576 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:04:58,577 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:04:58,577 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:04:58,578 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:04:58,578 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:04:58,579 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:04:58,579 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:04:58,579 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:04:58,580 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:04:58,580 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:04:58,581 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:04:58,596 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:04:58,596 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:04:58,597 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:04:58,597 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:04:58,597 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:04:58,597 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:04:58,598 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:04:58,598 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:04:58,598 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:04:58,599 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:04:58,599 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:04:58,600 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:04:58,625 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:04:58,642 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:04:58,647 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:04:58,650 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:04:58,651 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:04:58,652 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl
[2020-11-24 20:04:58,652 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl'
[2020-11-24 20:04:58,751 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:04:58,752 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:04:58,752 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:04:58,753 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:04:58,753 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:04:58,769 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,771 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,817 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,818 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,847 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,861 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,871 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,883 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:04:58,883 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:04:58,884 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:04:58,886 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:04:58,890 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/1) ...
[2020-11-24 20:04:58,908 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-24 20:04:58,914 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-24 20:04:58,922 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-24 20:04:58,930 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s747!=to_s747 && ( ( value_s747>_balances_ERC20[this][from_s747] || value_s747>_allowances_ERC20[this][from_s747][msg.sender] ) || ( _balances_ERC20[this][to_s747] + value_s747 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s747>=0 ) && value_s747<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s747]>=0 ) && _balances_ERC20[this][to_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s747]>=0 ) && _balances_ERC20[this][from_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s747][msg.sender]>=0 ) && _allowances_ERC20[this][from_s747][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:04:58,936 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transferFrom)))
[2020-11-24 20:04:58,936 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(fail_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:04:58,949 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:58 PropertyContainer
[2020-11-24 20:04:58,949 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:04:58,949 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:04:58,950 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:04:58,950 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:04:58,951 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/2) ...
[2020-11-24 20:04:58,951 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:04:58,951 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:04:58,971 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:58" (2/2) ...
[2020-11-24 20:04:58,971 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:04:58,971 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:04:58,971 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:04:58,972 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:04:58,972 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/2) ...
[2020-11-24 20:04:59,027 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:04:59,027 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:59,027 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:04:59,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:04:59,027 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:04:59,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:04:59,028 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:59,029 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:04:59,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:04:59,030 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:04:59,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:04:59,030 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:04:59,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:04:59,030 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:59,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:59,030 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:04:59,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:59,031 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:04:59,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:04:59,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:04:59,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:04:59,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:59,033 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:59,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:59,034 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken
[2020-11-24 20:04:59,035 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:59,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:04:59,036 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:59,037 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:04:59,038 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:59,039 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,040 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:04:59,041 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:04:59,042 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,043 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:59,044 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__success
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:04:59,045 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:04:59,046 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:59,046 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:59,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:59,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:59,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:04:59,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:04:59,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:59,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:59,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:59,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:59,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:59,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:59,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__fail
[2020-11-24 20:04:59,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__success
[2020-11-24 20:04:59,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:59,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:59,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:59,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:59,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:59,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:04:59,057 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:04:59,058 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:04:59,059 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:04:59,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:04:59,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:04:59,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:04:59,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:04:59,060 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:59,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:59,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:59,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:04:59,061 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:04:59,061 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:04:59,661 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:59,662 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:59,956 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:04:59,956 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-24 20:04:59,959 INFO  L202        PluginConnector]: Adding new model KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:59 BoogieIcfgContainer
[2020-11-24 20:04:59,960 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:58" (2/2) ...
[2020-11-24 20:04:59,960 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:04:59,960 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@72478159 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:59, skipping insertion in model container
[2020-11-24 20:04:59,960 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:04:59,960 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:04:59,960 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:04:59,962 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:04:59,962 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/3) ...
[2020-11-24 20:04:59,962 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@331ad23b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:59, skipping insertion in model container
[2020-11-24 20:04:59,963 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:58" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:05:00,000 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:05:00 NWAContainer
[2020-11-24 20:05:00,001 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:05:00,001 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:05:00,001 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:05:00,002 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:05:00,002 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:59" (3/4) ...
[2020-11-24 20:05:00,003 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7028c062 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:05:00, skipping insertion in model container
[2020-11-24 20:05:00,003 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:05:00" (4/4) ...
[2020-11-24 20:05:00,006 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:05:00,012 INFO  L110   BuchiProductObserver]: Initial RCFG 2373 locations, 3406 edges
[2020-11-24 20:05:00,012 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:05:00,024 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:05:01,649 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:05:01,657 INFO  L110   BuchiProductObserver]: BuchiProgram size 6094 locations, 11192 edges
[2020-11-24 20:05:01,657 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:05:01 BoogieIcfgContainer
[2020-11-24 20:05:01,658 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:05:01,658 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:05:01,658 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:05:01,659 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:05:01,660 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:05:01" (1/1) ...
[2020-11-24 20:05:01,768 INFO  L313           BlockEncoder]: Initial Icfg 6094 locations, 11192 edges
[2020-11-24 20:05:01,769 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:05:01,769 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:05:01,769 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:05:01,770 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:05:01,784 INFO  L70    emoveInfeasibleEdges]: Removed 174 edges and 17 locations because of local infeasibility
[2020-11-24 20:05:01,795 INFO  L70        RemoveSinkStates]: Removed 148 edges and 91 locations by removing sink states
[2020-11-24 20:05:01,808 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:05:01,812 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:05:01,816 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:05:01,816 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:05:01,819 INFO  L313           BlockEncoder]: Encoded RCFG 5956 locations, 10826 edges
[2020-11-24 20:05:01,820 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:05:01 BasicIcfg
[2020-11-24 20:05:01,820 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:05:01,820 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:05:01,820 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:05:01,822 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:05:01,822 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,822 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:58" (1/6) ...
[2020-11-24 20:05:01,824 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d9e96f and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:05:01, skipping insertion in model container
[2020-11-24 20:05:01,824 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,824 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:58" (2/6) ...
[2020-11-24 20:05:01,824 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d9e96f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:05:01, skipping insertion in model container
[2020-11-24 20:05:01,824 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,824 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:59" (3/6) ...
[2020-11-24 20:05:01,824 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d9e96f and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:05:01, skipping insertion in model container
[2020-11-24 20:05:01,824 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,824 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:05:00" (4/6) ...
[2020-11-24 20:05:01,824 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d9e96f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:05:01, skipping insertion in model container
[2020-11-24 20:05:01,825 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,825 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:05:01" (5/6) ...
[2020-11-24 20:05:01,825 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d9e96f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:05:01, skipping insertion in model container
[2020-11-24 20:05:01,825 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:05:01,825 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:05:01" (6/6) ...
[2020-11-24 20:05:01,826 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transferfrom-fail.bpl_BEv2
[2020-11-24 20:05:01,851 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:05:01,852 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:05:01,852 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:05:01,852 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:05:01,852 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:05:01,852 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:05:01,852 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:05:01,852 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:05:01,852 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:05:01,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5956 states.
[2020-11-24 20:05:01,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:01,942 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:01,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:01,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:01,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:01,949 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:05:01,949 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5956 states.
[2020-11-24 20:05:01,971 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:01,972 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:01,972 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:01,973 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:01,973 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:01,986 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:01,987 INFO  L82        PathProgramCache]: Analyzing trace with hash -1514554060, now seen corresponding path program 1 times
[2020-11-24 20:05:01,990 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:02,009 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:02,045 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:05:02,047 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:02,047 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:05:02,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:02,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:05:02,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:05:02,407 INFO  L87              Difference]: Start difference. First operand 5956 states. Second operand 4 states.
[2020-11-24 20:05:03,016 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:03,017 INFO  L93              Difference]: Finished difference Result 3639 states and 4346 transitions.
[2020-11-24 20:05:03,017 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:05:03,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3639 states and 4346 transitions.
[2020-11-24 20:05:03,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:03,072 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3639 states to 3639 states and 4346 transitions.
[2020-11-24 20:05:03,072 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:05:03,075 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 893
[2020-11-24 20:05:03,076 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3639 states and 4346 transitions.
[2020-11-24 20:05:03,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:03,086 INFO  L728         BuchiCegarLoop]: Abstraction has 3639 states and 4346 transitions.
[2020-11-24 20:05:03,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3639 states and 4346 transitions.
[2020-11-24 20:05:03,164 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3639 to 3639.
[2020-11-24 20:05:03,164 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3639 states.
[2020-11-24 20:05:03,174 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3639 states to 3639 states and 4346 transitions.
[2020-11-24 20:05:03,174 INFO  L751         BuchiCegarLoop]: Abstraction has 3639 states and 4346 transitions.
[2020-11-24 20:05:03,174 INFO  L631         BuchiCegarLoop]: Abstraction has 3639 states and 4346 transitions.
[2020-11-24 20:05:03,174 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:05:03,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3639 states and 4346 transitions.
[2020-11-24 20:05:03,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:03,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:03,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:03,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:03,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:03,187 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:03,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 845488333, now seen corresponding path program 1 times
[2020-11-24 20:05:03,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:03,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:03,217 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:05:03,218 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:03,218 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:05:03,219 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:03,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:05:03,219 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:05:03,219 INFO  L87              Difference]: Start difference. First operand 3639 states and 4346 transitions. cyclomatic complexity: 709 Second operand 3 states.
[2020-11-24 20:05:03,317 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:03,317 INFO  L93              Difference]: Finished difference Result 4856 states and 5815 transitions.
[2020-11-24 20:05:03,317 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:05:03,317 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4856 states and 5815 transitions.
[2020-11-24 20:05:03,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,352 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4856 states to 4856 states and 5815 transitions.
[2020-11-24 20:05:03,352 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1255
[2020-11-24 20:05:03,353 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1255
[2020-11-24 20:05:03,353 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4856 states and 5815 transitions.
[2020-11-24 20:05:03,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:03,359 INFO  L728         BuchiCegarLoop]: Abstraction has 4856 states and 5815 transitions.
[2020-11-24 20:05:03,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4856 states and 5815 transitions.
[2020-11-24 20:05:03,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4856 to 4363.
[2020-11-24 20:05:03,408 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4363 states.
[2020-11-24 20:05:03,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4363 states to 4363 states and 5219 transitions.
[2020-11-24 20:05:03,414 INFO  L751         BuchiCegarLoop]: Abstraction has 4363 states and 5219 transitions.
[2020-11-24 20:05:03,414 INFO  L631         BuchiCegarLoop]: Abstraction has 4363 states and 5219 transitions.
[2020-11-24 20:05:03,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:05:03,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4363 states and 5219 transitions.
[2020-11-24 20:05:03,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:03,420 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:03,423 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:03,423 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND TRUE   !(account_s453 != null)
[L3393]              revert := true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:03,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:03,427 INFO  L82        PathProgramCache]: Analyzing trace with hash -511331069, now seen corresponding path program 1 times
[2020-11-24 20:05:03,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:03,442 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:03,533 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-24 20:05:03,533 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:05:03,534 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:05:03,535 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:03,535 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:05:03,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:05:03,536 INFO  L87              Difference]: Start difference. First operand 4363 states and 5219 transitions. cyclomatic complexity: 858 Second operand 7 states.
[2020-11-24 20:05:03,598 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:03,598 INFO  L93              Difference]: Finished difference Result 4371 states and 5226 transitions.
[2020-11-24 20:05:03,598 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:05:03,598 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4371 states and 5226 transitions.
[2020-11-24 20:05:03,607 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,619 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4371 states to 4362 states and 5217 transitions.
[2020-11-24 20:05:03,620 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1164
[2020-11-24 20:05:03,620 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1164
[2020-11-24 20:05:03,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4362 states and 5217 transitions.
[2020-11-24 20:05:03,624 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:03,624 INFO  L728         BuchiCegarLoop]: Abstraction has 4362 states and 5217 transitions.
[2020-11-24 20:05:03,627 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4362 states and 5217 transitions.
[2020-11-24 20:05:03,660 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4362 to 4362.
[2020-11-24 20:05:03,661 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4362 states.
[2020-11-24 20:05:03,666 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4362 states to 4362 states and 5217 transitions.
[2020-11-24 20:05:03,666 INFO  L751         BuchiCegarLoop]: Abstraction has 4362 states and 5217 transitions.
[2020-11-24 20:05:03,666 INFO  L631         BuchiCegarLoop]: Abstraction has 4362 states and 5217 transitions.
[2020-11-24 20:05:03,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:05:03,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4362 states and 5217 transitions.
[2020-11-24 20:05:03,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:03,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:03,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:03,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND TRUE   !(c_s26 >= a_s26)
[L2790]              revert := true;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND TRUE   revert
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND TRUE   revert
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:03,677 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:03,677 INFO  L82        PathProgramCache]: Analyzing trace with hash 291122811, now seen corresponding path program 1 times
[2020-11-24 20:05:03,678 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:03,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:03,731 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-11-24 20:05:03,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:03,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:05:03,732 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:03,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:05:03,732 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:05:03,732 INFO  L87              Difference]: Start difference. First operand 4362 states and 5217 transitions. cyclomatic complexity: 857 Second operand 3 states.
[2020-11-24 20:05:03,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:03,810 INFO  L93              Difference]: Finished difference Result 4858 states and 5581 transitions.
[2020-11-24 20:05:03,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:05:03,810 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4858 states and 5581 transitions.
[2020-11-24 20:05:03,821 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,834 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4858 states to 4447 states and 5085 transitions.
[2020-11-24 20:05:03,835 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1117
[2020-11-24 20:05:03,835 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-24 20:05:03,835 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4447 states and 5085 transitions.
[2020-11-24 20:05:03,839 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:03,839 INFO  L728         BuchiCegarLoop]: Abstraction has 4447 states and 5085 transitions.
[2020-11-24 20:05:03,843 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4447 states and 5085 transitions.
[2020-11-24 20:05:03,874 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4447 to 4047.
[2020-11-24 20:05:03,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4047 states.
[2020-11-24 20:05:03,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4047 states to 4047 states and 4582 transitions.
[2020-11-24 20:05:03,879 INFO  L751         BuchiCegarLoop]: Abstraction has 4047 states and 4582 transitions.
[2020-11-24 20:05:03,879 INFO  L631         BuchiCegarLoop]: Abstraction has 4047 states and 4582 transitions.
[2020-11-24 20:05:03,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:05:03,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4047 states and 4582 transitions.
[2020-11-24 20:05:03,884 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:03,885 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:03,885 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:03,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:03,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:03,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:03,891 INFO  L82        PathProgramCache]: Analyzing trace with hash -20205200, now seen corresponding path program 1 times
[2020-11-24 20:05:03,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:03,909 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:04,090 INFO  L134       CoverageAnalysis]: Checked inductivity of 181 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 170 trivial. 0 not checked.
[2020-11-24 20:05:04,090 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:04,090 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 20:05:04,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:04,091 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 20:05:04,092 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-24 20:05:04,092 INFO  L87              Difference]: Start difference. First operand 4047 states and 4582 transitions. cyclomatic complexity: 537 Second operand 16 states.
[2020-11-24 20:05:06,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:06,128 INFO  L93              Difference]: Finished difference Result 4158 states and 4705 transitions.
[2020-11-24 20:05:06,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-24 20:05:06,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4158 states and 4705 transitions.
[2020-11-24 20:05:06,136 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:05:06,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4158 states to 4158 states and 4705 transitions.
[2020-11-24 20:05:06,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1116
[2020-11-24 20:05:06,148 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1116
[2020-11-24 20:05:06,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4158 states and 4705 transitions.
[2020-11-24 20:05:06,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:06,152 INFO  L728         BuchiCegarLoop]: Abstraction has 4158 states and 4705 transitions.
[2020-11-24 20:05:06,155 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4158 states and 4705 transitions.
[2020-11-24 20:05:06,179 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4158 to 3933.
[2020-11-24 20:05:06,179 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3933 states.
[2020-11-24 20:05:06,183 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3933 states to 3933 states and 4431 transitions.
[2020-11-24 20:05:06,183 INFO  L751         BuchiCegarLoop]: Abstraction has 3933 states and 4431 transitions.
[2020-11-24 20:05:06,183 INFO  L631         BuchiCegarLoop]: Abstraction has 3933 states and 4431 transitions.
[2020-11-24 20:05:06,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:05:06,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3933 states and 4431 transitions.
[2020-11-24 20:05:06,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:06,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:06,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:06,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:06,190 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND TRUE   __exception
[L1608]              __tmp__Balance := Balance;
[L1609]              __tmp__DType := DType;
[L1610]              __tmp__Alloc := Alloc;
[L1611]              __tmp__balance_ADDR := balance_ADDR;
[L1612]              __tmp__M_Ref_int := M_Ref_int;
[L1613]              __tmp__sum__balances0 := sum__balances0;
[L1614]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1615]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1616]              __tmp__sum__allowances1 := sum__allowances1;
[L1617]              __tmp__Length := Length;
[L1618]              __tmp__now := now;
[L1619]              __tmp___balances_ERC20 := _balances_ERC20;
[L1620]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1621]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1622]              __tmp___owner_Ownable := _owner_Ownable;
[L1623]              __tmp__paused_Pausable := paused_Pausable;
[L1624]              __tmp__name_KardiachainToken := name_KardiachainToken;
[L1625]              __tmp__symbol_KardiachainToken := symbol_KardiachainToken;
[L1626]              __tmp__decimals_KardiachainToken := decimals_KardiachainToken;
[L1627]              __tmp__initialSupply_KardiachainToken := initialSupply_KardiachainToken;
[L1628]  CALL        call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L4150]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2933]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L2933]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  COND FALSE  !(revert)
[L2937]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2908]              assume msgsender_MSG != null;
[L2909]              __tmp__Balance[this] := 0;
[L2910]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2911]              __tmp__sum__balances0[this] := 0;
[L2912]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2913]              __tmp__sum__allowances1[this] := 0;
[L2914]              __tmp___totalSupply_ERC20[this] := 0;
[L2937]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2938]  COND FALSE  !(revert)
[L4154]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L4158]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L4162]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3701]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3701]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3684]              assume msgsender_MSG != null;
[L3685]              __tmp__Balance[this] := 0;
[L3686]              __tmp__paused_Pausable[this] := false;
[L3705]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L4162]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4163]  COND FALSE  !(revert)
[L4166]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3807]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L3807]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3808]  COND FALSE  !(revert)
[L3811]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2933]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2891]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2876]              assume msgsender_MSG != null;
[L2877]              __tmp__Balance[this] := 0;
[L2891]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2892]  COND FALSE  !(revert)
[L2933]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2934]  COND FALSE  !(revert)
[L2937]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2908]              assume msgsender_MSG != null;
[L2909]              __tmp__Balance[this] := 0;
[L2910]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2911]              __tmp__sum__balances0[this] := 0;
[L2912]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2913]              __tmp__sum__allowances1[this] := 0;
[L2914]              __tmp___totalSupply_ERC20[this] := 0;
[L2937]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2938]  COND FALSE  !(revert)
[L3811]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3812]  COND FALSE  !(revert)
[L3815]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3815]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3816]  COND FALSE  !(revert)
[L3819]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3701]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]              assume msgsender_MSG != null;
[L3593]              __tmp__Balance[this] := 0;
[L3594]              __tmp___owner_Ownable[this] := null;
[L3596]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3612]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3613]  COND FALSE  !(revert)
[L3701]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3702]  COND FALSE  !(revert)
[L3705]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3684]              assume msgsender_MSG != null;
[L3685]              __tmp__Balance[this] := 0;
[L3686]              __tmp__paused_Pausable[this] := false;
[L3705]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3706]  COND FALSE  !(revert)
[L3819]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3820]  COND FALSE  !(revert)
[L3823]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3792]              assume msgsender_MSG != null;
[L3793]              __tmp__Balance[this] := 0;
[L3823]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3824]  COND FALSE  !(revert)
[L4166]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4167]  COND FALSE  !(revert)
[L4170]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4107]              assume msgsender_MSG != null;
[L4108]              __tmp__Balance[this] := 0;
[L4109]              __tmp__name_KardiachainToken[this] := -505187484;
[L4110]              __tmp__symbol_KardiachainToken[this] := 1585535741;
[L4111]              __tmp__decimals_KardiachainToken[this] := 18;
[L4112]              __var_29 := __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4113]              __tmp__initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4115]  COND TRUE   __tmp__DType[this] == KardiachainToken
[L4116]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L3367]              __var_8 := null;
[L3368]  COND FALSE  !(!(account_s453 != null))
[L3372]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3372]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s453);
[L3373]  COND FALSE  !(revert)
[L3376]              __tmp___totalSupply_ERC20[this] := __var_9;
[L3377]  CALL        call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L2776]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2777]  COND FALSE  !(!(c_s26 >= a_s26))
[L2781]              __ret_0_ := c_s26;
[L3377]  RET         call __var_10 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s453], amount_s453);
[L3378]  COND FALSE  !(revert)
[L3381]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s453];
[L3382]              __tmp___balances_ERC20[this][account_s453] := __var_10;
[L3383]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s453];
[L4116]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__initialSupply_KardiachainToken[this]);
[L4117]  COND FALSE  !(revert)
[L4170]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4171]  COND FALSE  !(revert)
[L1628]  RET         call KardiachainToken_KardiachainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1629]              assume revert || gas < 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND FALSE  !(DType[this] == KardiachainToken)
[L3941]  COND TRUE   DType[this] == ERC20Pausable
[L3942]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3942]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3943]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:06,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:06,196 INFO  L82        PathProgramCache]: Analyzing trace with hash 1312771355, now seen corresponding path program 1 times
[2020-11-24 20:05:06,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:06,212 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:06,321 INFO  L134       CoverageAnalysis]: Checked inductivity of 175 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 175 trivial. 0 not checked.
[2020-11-24 20:05:06,321 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:06,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:05:06,322 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:06,322 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:05:06,322 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:05:06,323 INFO  L87              Difference]: Start difference. First operand 3933 states and 4431 transitions. cyclomatic complexity: 501 Second operand 4 states.
[2020-11-24 20:05:06,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:06,781 INFO  L93              Difference]: Finished difference Result 4705 states and 5413 transitions.
[2020-11-24 20:05:06,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:05:06,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4705 states and 5413 transitions.
[2020-11-24 20:05:06,791 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:05:06,803 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4705 states to 4539 states and 5239 transitions.
[2020-11-24 20:05:06,803 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1214
[2020-11-24 20:05:06,804 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1214
[2020-11-24 20:05:06,804 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4539 states and 5239 transitions.
[2020-11-24 20:05:06,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:06,807 INFO  L728         BuchiCegarLoop]: Abstraction has 4539 states and 5239 transitions.
[2020-11-24 20:05:06,811 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4539 states and 5239 transitions.
[2020-11-24 20:05:06,846 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4539 to 3767.
[2020-11-24 20:05:06,846 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3767 states.
[2020-11-24 20:05:06,851 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3767 states to 3767 states and 4256 transitions.
[2020-11-24 20:05:06,851 INFO  L751         BuchiCegarLoop]: Abstraction has 3767 states and 4256 transitions.
[2020-11-24 20:05:06,851 INFO  L631         BuchiCegarLoop]: Abstraction has 3767 states and 4256 transitions.
[2020-11-24 20:05:06,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:05:06,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3767 states and 4256 transitions.
[2020-11-24 20:05:06,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:06,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:06,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:06,859 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:06,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND TRUE   choice == 16
[L6367]              gas := gas - 21000;
[L6368]  COND TRUE   gas >= 0
[L6369]              assume value_s765 >= 0 && value_s765 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6370]              assume msgvalue_MSG == 0;
[L6371]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1407]              havoc __exception;
[L1408]              revert := false;
[L1409]  COND FALSE  !(__exception)
[L1433]  CALL        call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3982]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3982]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3983]  COND FALSE  !(revert)
[L3986]  COND TRUE   DType[this] == KardiachainToken
[L3987]  CALL        call __var_23 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3065]  COND TRUE   DType[this] == KardiachainToken
[L3066]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3066]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3067]  COND FALSE  !(revert)
[L3083]              __ret_0_ := true;
[L3987]  RET         call __var_23 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L3988]  COND FALSE  !(revert)
[L3999]              __ret_0_ := __var_23;
[L1433]  RET         call __ret_0_ := approve~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L1434]              assume !revert && gas >= 0;
[L6371]  RET         call __ret_0_approve := approve~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, spender_s765, value_s765);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:06,865 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:06,865 INFO  L82        PathProgramCache]: Analyzing trace with hash -424352532, now seen corresponding path program 1 times
[2020-11-24 20:05:06,866 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:06,898 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:07,381 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-24 20:05:07,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:07,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-24 20:05:07,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:07,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:05:07,382 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=590, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:05:07,382 INFO  L87              Difference]: Start difference. First operand 3767 states and 4256 transitions. cyclomatic complexity: 492 Second operand 26 states.
[2020-11-24 20:05:12,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:12,362 INFO  L93              Difference]: Finished difference Result 3833 states and 4333 transitions.
[2020-11-24 20:05:12,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-24 20:05:12,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3833 states and 4333 transitions.
[2020-11-24 20:05:12,368 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3833 states to 3833 states and 4333 transitions.
[2020-11-24 20:05:12,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1037
[2020-11-24 20:05:12,377 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1037
[2020-11-24 20:05:12,377 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3833 states and 4333 transitions.
[2020-11-24 20:05:12,380 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:12,380 INFO  L728         BuchiCegarLoop]: Abstraction has 3833 states and 4333 transitions.
[2020-11-24 20:05:12,383 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3833 states and 4333 transitions.
[2020-11-24 20:05:12,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3833 to 3781.
[2020-11-24 20:05:12,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3781 states.
[2020-11-24 20:05:12,407 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3781 states to 3781 states and 4280 transitions.
[2020-11-24 20:05:12,407 INFO  L751         BuchiCegarLoop]: Abstraction has 3781 states and 4280 transitions.
[2020-11-24 20:05:12,407 INFO  L631         BuchiCegarLoop]: Abstraction has 3781 states and 4280 transitions.
[2020-11-24 20:05:12,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:05:12,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3781 states and 4280 transitions.
[2020-11-24 20:05:12,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,411 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:12,411 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:12,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:12,412 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND FALSE  !(choice == 2)
[L6461]  COND TRUE   choice == 1
[L6462]              gas := gas - 21000;
[L6463]  COND TRUE   gas >= 0
[L6464]              assume amount_s863 >= 0 && amount_s863 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1725]              havoc __exception;
[L1726]              revert := false;
[L1727]  COND FALSE  !(__exception)
[L1751]  CALL        call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4243]  COND TRUE   DType[this] == KardiachainToken
[L4244]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L3547]  COND FALSE  !(DType[this] == KardiachainToken)
[L3552]  COND TRUE   DType[this] == ERC20Pausable
[L3553]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3553]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3554]  COND FALSE  !(revert)
[L3565]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3565]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L3566]  COND FALSE  !(revert)
[L3569]  COND FALSE  !(DType[this] == KardiachainToken)
[L3574]  COND TRUE   DType[this] == ERC20Pausable
[L3575]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3575]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3576]  COND FALSE  !(revert)
[L4244]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4245]  COND FALSE  !(revert)
[L1751]  RET         call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1752]              assume !revert && gas >= 0;
[L6466]  RET         call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND FALSE  !(DType[this] == KardiachainToken)
[L3941]  COND TRUE   DType[this] == ERC20Pausable
[L3942]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3942]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3943]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:12,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:12,416 INFO  L82        PathProgramCache]: Analyzing trace with hash -1158498434, now seen corresponding path program 1 times
[2020-11-24 20:05:12,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:12,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:12,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 252 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 251 trivial. 0 not checked.
[2020-11-24 20:05:12,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:12,526 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:05:12,526 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:12,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:05:12,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:05:12,527 INFO  L87              Difference]: Start difference. First operand 3781 states and 4280 transitions. cyclomatic complexity: 504 Second operand 7 states.
[2020-11-24 20:05:12,617 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:12,617 INFO  L93              Difference]: Finished difference Result 3817 states and 4316 transitions.
[2020-11-24 20:05:12,617 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:05:12,617 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3817 states and 4316 transitions.
[2020-11-24 20:05:12,626 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,636 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3817 states to 3765 states and 4256 transitions.
[2020-11-24 20:05:12,636 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1011
[2020-11-24 20:05:12,637 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1011
[2020-11-24 20:05:12,637 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3765 states and 4256 transitions.
[2020-11-24 20:05:12,640 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:12,641 INFO  L728         BuchiCegarLoop]: Abstraction has 3765 states and 4256 transitions.
[2020-11-24 20:05:12,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3765 states and 4256 transitions.
[2020-11-24 20:05:12,669 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3765 to 3765.
[2020-11-24 20:05:12,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3765 states.
[2020-11-24 20:05:12,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3765 states to 3765 states and 4256 transitions.
[2020-11-24 20:05:12,674 INFO  L751         BuchiCegarLoop]: Abstraction has 3765 states and 4256 transitions.
[2020-11-24 20:05:12,674 INFO  L631         BuchiCegarLoop]: Abstraction has 3765 states and 4256 transitions.
[2020-11-24 20:05:12,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:05:12,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3765 states and 4256 transitions.
[2020-11-24 20:05:12,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,695 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:12,695 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:12,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:12,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND FALSE  !(choice == 2)
[L6461]  COND TRUE   choice == 1
[L6462]              gas := gas - 21000;
[L6463]  COND TRUE   gas >= 0
[L6464]              assume amount_s863 >= 0 && amount_s863 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1725]              havoc __exception;
[L1726]              revert := false;
[L1727]  COND FALSE  !(__exception)
[L1751]  CALL        call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4243]  COND TRUE   DType[this] == KardiachainToken
[L4244]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L3547]  COND TRUE   DType[this] == KardiachainToken
[L3548]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3548]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3549]  COND FALSE  !(revert)
[L3565]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3565]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L3566]  COND FALSE  !(revert)
[L3569]  COND FALSE  !(DType[this] == KardiachainToken)
[L3574]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3579]  COND TRUE   DType[this] == ERC20
[L3580]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3580]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3581]  COND FALSE  !(revert)
[L4244]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4245]  COND FALSE  !(revert)
[L1751]  RET         call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1752]              assume !revert && gas >= 0;
[L6466]  RET         call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND FALSE  !(DType[this] == KardiachainToken)
[L3941]  COND TRUE   DType[this] == ERC20Pausable
[L3942]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3942]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3943]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:12,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:12,709 INFO  L82        PathProgramCache]: Analyzing trace with hash -25178062, now seen corresponding path program 1 times
[2020-11-24 20:05:12,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:12,729 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:12,859 INFO  L134       CoverageAnalysis]: Checked inductivity of 252 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 251 trivial. 0 not checked.
[2020-11-24 20:05:12,860 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:12,860 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:05:12,860 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:12,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:05:12,861 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:05:12,861 INFO  L87              Difference]: Start difference. First operand 3765 states and 4256 transitions. cyclomatic complexity: 496 Second operand 3 states.
[2020-11-24 20:05:12,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:12,895 INFO  L93              Difference]: Finished difference Result 3777 states and 4270 transitions.
[2020-11-24 20:05:12,895 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:05:12,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3777 states and 4270 transitions.
[2020-11-24 20:05:12,904 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,913 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3777 states to 3777 states and 4270 transitions.
[2020-11-24 20:05:12,913 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1016
[2020-11-24 20:05:12,914 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1016
[2020-11-24 20:05:12,914 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3777 states and 4270 transitions.
[2020-11-24 20:05:12,917 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:12,917 INFO  L728         BuchiCegarLoop]: Abstraction has 3777 states and 4270 transitions.
[2020-11-24 20:05:12,920 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3777 states and 4270 transitions.
[2020-11-24 20:05:12,942 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3777 to 3773.
[2020-11-24 20:05:12,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3773 states.
[2020-11-24 20:05:12,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3773 states to 3773 states and 4266 transitions.
[2020-11-24 20:05:12,946 INFO  L751         BuchiCegarLoop]: Abstraction has 3773 states and 4266 transitions.
[2020-11-24 20:05:12,946 INFO  L631         BuchiCegarLoop]: Abstraction has 3773 states and 4266 transitions.
[2020-11-24 20:05:12,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:05:12,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3773 states and 4266 transitions.
[2020-11-24 20:05:12,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:12,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:12,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:12,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:12,951 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND FALSE  !(choice == 2)
[L6461]  COND TRUE   choice == 1
[L6462]              gas := gas - 21000;
[L6463]  COND TRUE   gas >= 0
[L6464]              assume amount_s863 >= 0 && amount_s863 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1725]              havoc __exception;
[L1726]              revert := false;
[L1727]  COND FALSE  !(__exception)
[L1751]  CALL        call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4243]  COND TRUE   DType[this] == KardiachainToken
[L4244]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L3547]  COND TRUE   DType[this] == KardiachainToken
[L3548]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3548]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3549]  COND FALSE  !(revert)
[L3565]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3565]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L3566]  COND FALSE  !(revert)
[L3569]  COND TRUE   DType[this] == KardiachainToken
[L3570]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3570]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3571]  COND FALSE  !(revert)
[L4244]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4245]  COND FALSE  !(revert)
[L1751]  RET         call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1752]              assume !revert && gas >= 0;
[L6466]  RET         call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND FALSE  !(DType[this] == KardiachainToken)
[L3941]  COND TRUE   DType[this] == ERC20Pausable
[L3942]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3942]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3943]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND FALSE  !(DType[this] == KardiachainToken)
[L3941]  COND TRUE   DType[this] == ERC20Pausable
[L3942]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3942]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3943]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:12,955 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:12,955 INFO  L82        PathProgramCache]: Analyzing trace with hash 1700625336, now seen corresponding path program 1 times
[2020-11-24 20:05:12,956 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:12,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:13,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 252 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 252 trivial. 0 not checked.
[2020-11-24 20:05:13,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:13,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:05:13,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:13,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:05:13,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:05:13,068 INFO  L87              Difference]: Start difference. First operand 3773 states and 4266 transitions. cyclomatic complexity: 498 Second operand 6 states.
[2020-11-24 20:05:13,119 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:13,120 INFO  L93              Difference]: Finished difference Result 3807 states and 4299 transitions.
[2020-11-24 20:05:13,120 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:05:13,120 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3807 states and 4299 transitions.
[2020-11-24 20:05:13,126 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:13,133 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3807 states to 3763 states and 4252 transitions.
[2020-11-24 20:05:13,133 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1012
[2020-11-24 20:05:13,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1012
[2020-11-24 20:05:13,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3763 states and 4252 transitions.
[2020-11-24 20:05:13,136 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:13,136 INFO  L728         BuchiCegarLoop]: Abstraction has 3763 states and 4252 transitions.
[2020-11-24 20:05:13,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3763 states and 4252 transitions.
[2020-11-24 20:05:13,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3763 to 3763.
[2020-11-24 20:05:13,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3763 states.
[2020-11-24 20:05:13,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3763 states to 3763 states and 4252 transitions.
[2020-11-24 20:05:13,159 INFO  L751         BuchiCegarLoop]: Abstraction has 3763 states and 4252 transitions.
[2020-11-24 20:05:13,159 INFO  L631         BuchiCegarLoop]: Abstraction has 3763 states and 4252 transitions.
[2020-11-24 20:05:13,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:05:13,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3763 states and 4252 transitions.
[2020-11-24 20:05:13,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:13,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:13,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:13,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:13,164 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND FALSE  !(choice == 2)
[L6461]  COND TRUE   choice == 1
[L6462]              gas := gas - 21000;
[L6463]  COND TRUE   gas >= 0
[L6464]              assume amount_s863 >= 0 && amount_s863 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1725]              havoc __exception;
[L1726]              revert := false;
[L1727]  COND FALSE  !(__exception)
[L1751]  CALL        call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4243]  COND TRUE   DType[this] == KardiachainToken
[L4244]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L3547]  COND FALSE  !(DType[this] == KardiachainToken)
[L3552]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3557]  COND TRUE   DType[this] == ERC20
[L3558]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3558]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3559]  COND FALSE  !(revert)
[L3565]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3565]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L3566]  COND FALSE  !(revert)
[L3569]  COND FALSE  !(DType[this] == KardiachainToken)
[L3574]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3579]  COND TRUE   DType[this] == ERC20
[L3580]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3580]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3581]  COND FALSE  !(revert)
[L4244]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4245]  COND FALSE  !(revert)
[L1751]  RET         call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1752]              assume !revert && gas >= 0;
[L6466]  RET         call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:13,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:13,168 INFO  L82        PathProgramCache]: Analyzing trace with hash -310107794, now seen corresponding path program 1 times
[2020-11-24 20:05:13,168 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:13,180 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:13,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 252 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 251 trivial. 0 not checked.
[2020-11-24 20:05:13,309 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:13,309 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:05:13,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:13,309 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:05:13,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:05:13,309 INFO  L87              Difference]: Start difference. First operand 3763 states and 4252 transitions. cyclomatic complexity: 494 Second operand 7 states.
[2020-11-24 20:05:13,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:13,369 INFO  L93              Difference]: Finished difference Result 3789 states and 4274 transitions.
[2020-11-24 20:05:13,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:05:13,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3789 states and 4274 transitions.
[2020-11-24 20:05:13,375 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:13,381 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3789 states to 3731 states and 4210 transitions.
[2020-11-24 20:05:13,381 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1003
[2020-11-24 20:05:13,381 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1003
[2020-11-24 20:05:13,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3731 states and 4210 transitions.
[2020-11-24 20:05:13,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:13,383 INFO  L728         BuchiCegarLoop]: Abstraction has 3731 states and 4210 transitions.
[2020-11-24 20:05:13,386 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3731 states and 4210 transitions.
[2020-11-24 20:05:13,402 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3731 to 3731.
[2020-11-24 20:05:13,402 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3731 states.
[2020-11-24 20:05:13,405 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3731 states to 3731 states and 4210 transitions.
[2020-11-24 20:05:13,405 INFO  L751         BuchiCegarLoop]: Abstraction has 3731 states and 4210 transitions.
[2020-11-24 20:05:13,406 INFO  L631         BuchiCegarLoop]: Abstraction has 3731 states and 4210 transitions.
[2020-11-24 20:05:13,406 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:05:13,406 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3731 states and 4210 transitions.
[2020-11-24 20:05:13,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:13,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:13,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:13,411 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:13,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND FALSE  !(choice == 15)
[L6380]  COND FALSE  !(choice == 14)
[L6387]  COND FALSE  !(choice == 13)
[L6394]  COND FALSE  !(choice == 12)
[L6400]  COND FALSE  !(choice == 11)
[L6406]  COND FALSE  !(choice == 10)
[L6412]  COND FALSE  !(choice == 9)
[L6418]  COND FALSE  !(choice == 8)
[L6424]  COND FALSE  !(choice == 7)
[L6430]  COND FALSE  !(choice == 6)
[L6436]  COND FALSE  !(choice == 5)
[L6442]  COND FALSE  !(choice == 4)
[L6448]  COND FALSE  !(choice == 3)
[L6454]  COND FALSE  !(choice == 2)
[L6461]  COND TRUE   choice == 1
[L6462]              gas := gas - 21000;
[L6463]  COND TRUE   gas >= 0
[L6464]              assume amount_s863 >= 0 && amount_s863 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6465]              assume msgvalue_MSG == 0;
[L6466]  CALL        call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1725]              havoc __exception;
[L1726]              revert := false;
[L1727]  COND FALSE  !(__exception)
[L1751]  CALL        call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4243]  COND TRUE   DType[this] == KardiachainToken
[L4244]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L3547]  COND TRUE   DType[this] == KardiachainToken
[L3548]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3440]              __var_11 := null;
[L3441]  COND FALSE  !(!(account_s496 != null))
[L3445]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3445]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s496);
[L3446]  COND FALSE  !(revert)
[L3449]              _totalSupply_ERC20[this] := __var_12;
[L3450]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3450]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s496], value_s496);
[L3451]  COND FALSE  !(revert)
[L3454]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s496];
[L3455]              _balances_ERC20[this][account_s496] := __var_13;
[L3456]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s496];
[L3457]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3548]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, amount_s566);
[L3549]  COND FALSE  !(revert)
[L3565]  CALL        call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3565]  RET         call __var_16 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][account_s566][msgsender_MSG], amount_s566);
[L3566]  COND FALSE  !(revert)
[L3569]  COND TRUE   DType[this] == KardiachainToken
[L3570]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3570]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s566, msgsender_MSG, __var_16);
[L3571]  COND FALSE  !(revert)
[L4244]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L4245]  COND FALSE  !(revert)
[L1751]  RET         call burnFrom~address~uint256_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L1752]              assume !revert && gas >= 0;
[L6466]  RET         call burnFrom~address~uint256_KardiachainToken(this, msgsender_MSG, msgvalue_MSG, account_s863, amount_s863);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:13,415 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:13,415 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586373734, now seen corresponding path program 1 times
[2020-11-24 20:05:13,416 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:13,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:14,095 INFO  L134       CoverageAnalysis]: Checked inductivity of 252 backedges. 10 proven. 1 refuted. 0 times theorem prover too weak. 241 trivial. 0 not checked.
[2020-11-24 20:05:14,095 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:05:14,095 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-24 20:05:14,095 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:14,096 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-24 20:05:14,096 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=1212, Unknown=0, NotChecked=0, Total=1332
[2020-11-24 20:05:14,096 INFO  L87              Difference]: Start difference. First operand 3731 states and 4210 transitions. cyclomatic complexity: 484 Second operand 37 states.
[2020-11-24 20:05:21,635 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:21,635 INFO  L93              Difference]: Finished difference Result 3793 states and 4286 transitions.
[2020-11-24 20:05:21,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-24 20:05:21,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3793 states and 4286 transitions.
[2020-11-24 20:05:21,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:21,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3793 states to 3793 states and 4286 transitions.
[2020-11-24 20:05:21,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1029
[2020-11-24 20:05:21,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1029
[2020-11-24 20:05:21,649 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3793 states and 4286 transitions.
[2020-11-24 20:05:21,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:21,650 INFO  L728         BuchiCegarLoop]: Abstraction has 3793 states and 4286 transitions.
[2020-11-24 20:05:21,653 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3793 states and 4286 transitions.
[2020-11-24 20:05:21,667 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3793 to 3735.
[2020-11-24 20:05:21,668 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3735 states.
[2020-11-24 20:05:21,671 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3735 states to 3735 states and 4222 transitions.
[2020-11-24 20:05:21,671 INFO  L751         BuchiCegarLoop]: Abstraction has 3735 states and 4222 transitions.
[2020-11-24 20:05:21,671 INFO  L631         BuchiCegarLoop]: Abstraction has 3735 states and 4222 transitions.
[2020-11-24 20:05:21,671 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:05:21,671 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3735 states and 4222 transitions.
[2020-11-24 20:05:21,675 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:21,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:21,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:21,676 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:21,676 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND FALSE  !(DType[this] == KardiachainToken)
[L3164]  COND TRUE   DType[this] == ERC20Pausable
[L3165]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3165]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3166]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:21,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:21,681 INFO  L82        PathProgramCache]: Analyzing trace with hash 1006736925, now seen corresponding path program 1 times
[2020-11-24 20:05:21,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:21,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:21,775 INFO  L134       CoverageAnalysis]: Checked inductivity of 263 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 262 trivial. 0 not checked.
[2020-11-24 20:05:21,775 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:21,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:05:21,776 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:21,776 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:05:21,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:05:21,776 INFO  L87              Difference]: Start difference. First operand 3735 states and 4222 transitions. cyclomatic complexity: 493 Second operand 3 states.
[2020-11-24 20:05:21,799 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:21,799 INFO  L93              Difference]: Finished difference Result 3749 states and 4238 transitions.
[2020-11-24 20:05:21,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:05:21,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3749 states and 4238 transitions.
[2020-11-24 20:05:21,804 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:21,810 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3749 states to 3749 states and 4238 transitions.
[2020-11-24 20:05:21,810 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1009
[2020-11-24 20:05:21,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1009
[2020-11-24 20:05:21,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3749 states and 4238 transitions.
[2020-11-24 20:05:21,812 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:21,813 INFO  L728         BuchiCegarLoop]: Abstraction has 3749 states and 4238 transitions.
[2020-11-24 20:05:21,815 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3749 states and 4238 transitions.
[2020-11-24 20:05:21,830 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3749 to 3743.
[2020-11-24 20:05:21,830 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3743 states.
[2020-11-24 20:05:21,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3743 states to 3743 states and 4232 transitions.
[2020-11-24 20:05:21,833 INFO  L751         BuchiCegarLoop]: Abstraction has 3743 states and 4232 transitions.
[2020-11-24 20:05:21,833 INFO  L631         BuchiCegarLoop]: Abstraction has 3743 states and 4232 transitions.
[2020-11-24 20:05:21,833 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:05:21,833 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3743 states and 4232 transitions.
[2020-11-24 20:05:21,837 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:21,837 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:21,837 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:21,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:21,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND FALSE  !(DType[this] == KardiachainToken)
[L3142]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3147]  COND TRUE   DType[this] == ERC20
[L3148]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3148]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3149]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND FALSE  !(DType[this] == KardiachainToken)
[L3164]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3169]  COND TRUE   DType[this] == ERC20
[L3170]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3170]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3171]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:21,842 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:21,842 INFO  L82        PathProgramCache]: Analyzing trace with hash 1462699048, now seen corresponding path program 1 times
[2020-11-24 20:05:21,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:21,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:21,983 INFO  L134       CoverageAnalysis]: Checked inductivity of 263 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 262 trivial. 0 not checked.
[2020-11-24 20:05:21,984 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:21,984 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:05:21,984 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:21,984 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:05:21,984 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:05:21,985 INFO  L87              Difference]: Start difference. First operand 3743 states and 4232 transitions. cyclomatic complexity: 495 Second operand 7 states.
[2020-11-24 20:05:22,047 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:22,047 INFO  L93              Difference]: Finished difference Result 3799 states and 4289 transitions.
[2020-11-24 20:05:22,047 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:05:22,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3799 states and 4289 transitions.
[2020-11-24 20:05:22,054 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:22,060 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3799 states to 3723 states and 4204 transitions.
[2020-11-24 20:05:22,060 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1001
[2020-11-24 20:05:22,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1001
[2020-11-24 20:05:22,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3723 states and 4204 transitions.
[2020-11-24 20:05:22,062 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:22,062 INFO  L728         BuchiCegarLoop]: Abstraction has 3723 states and 4204 transitions.
[2020-11-24 20:05:22,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3723 states and 4204 transitions.
[2020-11-24 20:05:22,079 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3723 to 3723.
[2020-11-24 20:05:22,080 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3723 states.
[2020-11-24 20:05:22,083 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3723 states to 3723 states and 4204 transitions.
[2020-11-24 20:05:22,083 INFO  L751         BuchiCegarLoop]: Abstraction has 3723 states and 4204 transitions.
[2020-11-24 20:05:22,083 INFO  L631         BuchiCegarLoop]: Abstraction has 3723 states and 4204 transitions.
[2020-11-24 20:05:22,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:05:22,083 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3723 states and 4204 transitions.
[2020-11-24 20:05:22,087 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:22,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:22,087 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:22,088 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:22,088 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND FALSE  !(DType[this] == KardiachainToken)
[L3142]  COND TRUE   DType[this] == ERC20Pausable
[L3143]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3143]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND FALSE  !(DType[this] == KardiachainToken)
[L3164]  COND TRUE   DType[this] == ERC20Pausable
[L3165]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3165]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3166]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:22,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:22,092 INFO  L82        PathProgramCache]: Analyzing trace with hash -1303294772, now seen corresponding path program 1 times
[2020-11-24 20:05:22,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:22,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:22,193 INFO  L134       CoverageAnalysis]: Checked inductivity of 263 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 262 trivial. 0 not checked.
[2020-11-24 20:05:22,194 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:22,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:05:22,194 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:22,194 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:05:22,194 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:05:22,194 INFO  L87              Difference]: Start difference. First operand 3723 states and 4204 transitions. cyclomatic complexity: 487 Second operand 7 states.
[2020-11-24 20:05:22,254 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:22,255 INFO  L93              Difference]: Finished difference Result 3767 states and 4245 transitions.
[2020-11-24 20:05:22,255 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:05:22,255 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3767 states and 4245 transitions.
[2020-11-24 20:05:22,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:22,266 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3767 states to 3695 states and 4166 transitions.
[2020-11-24 20:05:22,266 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 993
[2020-11-24 20:05:22,267 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 993
[2020-11-24 20:05:22,267 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3695 states and 4166 transitions.
[2020-11-24 20:05:22,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:22,268 INFO  L728         BuchiCegarLoop]: Abstraction has 3695 states and 4166 transitions.
[2020-11-24 20:05:22,271 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3695 states and 4166 transitions.
[2020-11-24 20:05:22,285 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3695 to 3695.
[2020-11-24 20:05:22,285 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3695 states.
[2020-11-24 20:05:22,288 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3695 states to 3695 states and 4166 transitions.
[2020-11-24 20:05:22,288 INFO  L751         BuchiCegarLoop]: Abstraction has 3695 states and 4166 transitions.
[2020-11-24 20:05:22,288 INFO  L631         BuchiCegarLoop]: Abstraction has 3695 states and 4166 transitions.
[2020-11-24 20:05:22,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:05:22,288 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3695 states and 4166 transitions.
[2020-11-24 20:05:22,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:05:22,292 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:05:22,292 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:05:22,293 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:05:22,293 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC20Pausable0 := false;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND FALSE  !(choice == 18)
[L6360]  COND FALSE  !(choice == 17)
[L6366]  COND FALSE  !(choice == 16)
[L6373]  COND TRUE   choice == 15
[L6374]              gas := gas - 21000;
[L6375]  COND TRUE   gas >= 0
[L6376]              assume value_s747 >= 0 && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6377]              assume msgvalue_MSG == 0;
[L6378]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s747 != to_s747 && ((value_s747 > _balances_ERC20[this][from_s747] || value_s747 > _allowances_ERC20[this][from_s747][msgsender_MSG]) || _balances_ERC20[this][to_s747] + value_s747 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s747 >= 0) && value_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s747] >= 0) && _balances_ERC20[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s747] >= 0) && _balances_ERC20[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s747][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC20Pausable0 := true;
[L2]                 call_transferFrom_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1375]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3932]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3932]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3933]  COND FALSE  !(revert)
[L3936]  COND TRUE   DType[this] == KardiachainToken
[L3937]  CALL        call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3137]  COND TRUE   DType[this] == KardiachainToken
[L3138]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3138]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, recipient_s300, amount_s300);
[L3139]  COND FALSE  !(revert)
[L3155]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3155]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s300][msgsender_MSG], amount_s300);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == KardiachainToken
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3483]              __var_14 := null;
[L3484]  COND FALSE  !(!(owner_s538 != null))
[L3488]              __var_15 := null;
[L3489]  COND FALSE  !(!(spender_s538 != null))
[L3493]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] - _allowances_ERC20[this][owner_s538][spender_s538];
[L3494]              _allowances_ERC20[this][owner_s538][spender_s538] := value_s538;
[L3495]              sum__allowances1[owner_s538] := sum__allowances1[owner_s538] + _allowances_ERC20[this][owner_s538][spender_s538];
[L3496]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s300, msgsender_MSG, __var_1);
[L3161]  COND FALSE  !(revert)
[L3177]              __ret_0_ := true;
[L3937]  RET         call __var_21 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L3938]  COND FALSE  !(revert)
[L3949]              __ret_0_ := __var_21;
[L1375]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L1376]              assume !revert && gas >= 0;
[L6378]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, value_s747);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:05:22,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:05:22,297 INFO  L82        PathProgramCache]: Analyzing trace with hash -1738312137, now seen corresponding path program 1 times
[2020-11-24 20:05:22,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:05:22,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:05:22,541 INFO  L134       CoverageAnalysis]: Checked inductivity of 263 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 261 trivial. 0 not checked.
[2020-11-24 20:05:22,541 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:05:22,542 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 20:05:22,542 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:05:22,542 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:05:22,542 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=266, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:05:22,543 INFO  L87              Difference]: Start difference. First operand 3695 states and 4166 transitions. cyclomatic complexity: 477 Second operand 18 states.
[2020-11-24 20:05:24,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:05:24,529 INFO  L93              Difference]: Finished difference Result 2126 states and 2392 transitions.
[2020-11-24 20:05:24,529 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 20:05:24,529 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2126 states and 2392 transitions.
[2020-11-24 20:05:24,533 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:05:24,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2126 states to 0 states and 0 transitions.
[2020-11-24 20:05:24,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:05:24,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:05:24,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:05:24,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:05:24,533 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:05:24,533 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:05:24,533 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:05:24,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 20:05:24,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:05:24,534 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:05:24,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:05:24,536 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:05:24 BasicIcfg
[2020-11-24 20:05:24,537 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:05:24,537 INFO  L168              Benchmark]: Toolchain (without parser) took 25785.71 ms. Allocated memory was 1.0 GB in the beginning and 2.6 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 962.9 MB in the end (delta: -27.7 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,538 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.31 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,538 INFO  L168              Benchmark]: Boogie Preprocessor took 130.68 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,538 INFO  L168              Benchmark]: UtopiaSpecLang took 65.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,538 INFO  L168              Benchmark]: Boogie Printer took 21.50 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,539 INFO  L168              Benchmark]: RCFGBuilder took 988.88 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -130.4 MB). Peak memory consumption was 196.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,540 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.27 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.4 MB). Peak memory consumption was 13.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,540 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1656.88 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 149.4 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -73.1 MB). Peak memory consumption was 560.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,541 INFO  L168              Benchmark]: BlockEncodingV2 took 162.10 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 92.1 MB). Peak memory consumption was 92.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,541 INFO  L168              Benchmark]: BuchiAutomizer took 22716.38 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 1.0 GB in the beginning and 962.9 MB in the end (delta: 43.4 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-24 20:05:24,543 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6094 locations, 11192 edges
  - StatisticsResult: Encoded RCFG
    5956 locations, 10826 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.31 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 130.68 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.90 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.50 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 988.88 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -130.4 MB). Peak memory consumption was 196.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.27 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.4 MB). Peak memory consumption was 13.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1656.88 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 149.4 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -73.1 MB). Peak memory consumption was 560.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 162.10 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 92.1 MB). Peak memory consumption was 92.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 22716.38 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 1.0 GB in the beginning and 962.9 MB in the end (delta: 43.4 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2373 locations, 3406 edges
  - StatisticsResult: BuchiProgram size
    6094 locations, 11192 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 16 terminating modules (16 trivial, 0 deterministic, 0 nondeterministic). 16 modules have a trivial ranking function, the largest among these consists of 37 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 22.6s and 17 iterations.  TraceHistogramMax:4. Analysis of lassos took 3.3s. Construction of modules took 13.8s. BÃ¼chi inclusion checks took 4.4s. Highest rank in rank-based complementation 0. Minimization of det autom 16. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 15 MinimizatonAttempts, 2010 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 4363 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 62687 SDtfs, 35804 SDslu, 184267 SDs, 0 SdLazy, 193876 SolverSat, 6785 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 13.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC20Pausable0) ==> ( <>(fail_transferFrom_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
