This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 10:02:10,798 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 10:02:10,799 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 10:02:10,810 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 10:02:10,810 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 10:02:10,811 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 10:02:10,812 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 10:02:10,813 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 10:02:10,815 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 10:02:10,816 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 10:02:10,816 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 10:02:10,817 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 10:02:10,818 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 10:02:10,818 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 10:02:10,819 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 10:02:10,820 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 10:02:10,821 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 10:02:10,821 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 10:02:10,823 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 10:02:10,824 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 10:02:10,824 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 10:02:10,825 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 10:02:10,827 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 10:02:10,827 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 10:02:10,827 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 10:02:10,828 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 10:02:10,828 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 10:02:10,829 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 10:02:10,829 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 10:02:10,829 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 10:02:10,830 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 10:02:10,830 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 10:02:10,831 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 10:02:10,831 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 10:02:10,832 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 10:02:10,832 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 10:02:10,833 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 10:02:10,833 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 10:02:10,833 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 10:02:10,834 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 10:02:10,834 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 10:02:10,834 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 10:02:10,845 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 10:02:10,845 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 10:02:10,846 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 10:02:10,847 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 10:02:10,847 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 10:02:10,847 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 10:02:10,847 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 10:02:10,848 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 10:02:10,848 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 10:02:10,848 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 10:02:10,848 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 10:02:10,848 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 10:02:10,849 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 10:02:10,849 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 10:02:10,849 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 10:02:10,849 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 10:02:10,849 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 10:02:10,850 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 10:02:10,850 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 10:02:10,850 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 10:02:10,850 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 10:02:10,850 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 10:02:10,851 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 10:02:10,851 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 10:02:10,851 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 10:02:10,851 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 10:02:10,881 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 10:02:10,895 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 10:02:10,897 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 10:02:10,898 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 10:02:10,899 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 10:02:10,899 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl
[2020-11-25 10:02:10,900 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl'
[2020-11-25 10:02:11,008 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 10:02:11,009 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 10:02:11,009 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 10:02:11,009 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 10:02:11,010 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 10:02:11,026 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,028 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,067 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,068 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,095 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,107 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,118 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,135 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 10:02:11,135 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 10:02:11,136 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 10:02:11,138 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 10:02:11,142 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/1) ...
[2020-11-25 10:02:11,164 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this]) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this]) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this]) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this]) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this]) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this]) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this]) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this]) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this]) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this]) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:02:11,170 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this]) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this]) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this]) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this]) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this]) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this]) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this]) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this]) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this]) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this]) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:02:11,179 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this]) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this]) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this]) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this]) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this]) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this]) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this]) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this]) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this]) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this]) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:02:11,188 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s468 && p1!=to_s468 ) && ( p2!=from_s468 || p3!=msg.sender ) ) && from_s468!=to_s468 ) && tokens_s468<=balances_TokenERC20[this][from_s468] ) && tokens_s468<=allowed_TokenERC20[this][from_s468][msg.sender] ) && ( balances_TokenERC20[this][to_s468] + tokens_s468 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s468>=0 ) && tokens_s468<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s468]>=0 ) && balances_TokenERC20[this][to_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][from_s468]>=0 ) && balances_TokenERC20[this][from_s468]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_TokenERC20[this][from_s468][msg.sender]>=0 ) && allowed_TokenERC20[this][from_s468][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 10:02:11,194 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s468==true && balances_TokenERC20[this][from_s468]==( ( old(balances_TokenERC20[this][from_s468]) ) - tokens_s468 ) ) && balances_TokenERC20[this][to_s468]==( ( old(balances_TokenERC20[this][to_s468]) ) + tokens_s468 ) ) && allowed_TokenERC20[this][from_s468][msg.sender]==( ( old(allowed_TokenERC20[this][from_s468][msg.sender]) ) - tokens_s468 ) ) && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this][p1]==( old(balances_TokenERC20[this][p1]) ) ) && allowed_TokenERC20[this][p2][p3]==( old(allowed_TokenERC20[this][p2][p3]) ) ) && aSBlock_ZEBELLION[this]==( old(aSBlock_ZEBELLION[this]) ) ) && aEBlock_ZEBELLION[this]==( old(aEBlock_ZEBELLION[this]) ) ) && aCap_ZEBELLION[this]==( old(aCap_ZEBELLION[this]) ) ) && aTot_ZEBELLION[this]==( old(aTot_ZEBELLION[this]) ) ) && aAmt_ZEBELLION[this]==( old(aAmt_ZEBELLION[this]) ) ) && sSBlock_ZEBELLION[this]==( old(sSBlock_ZEBELLION[this]) ) ) && sEBlock_ZEBELLION[this]==( old(sEBlock_ZEBELLION[this]) ) ) && sCap_ZEBELLION[this]==( old(sCap_ZEBELLION[this]) ) ) && sTot_ZEBELLION[this]==( old(sTot_ZEBELLION[this]) ) ) && sChunk_ZEBELLION[this]==( old(sChunk_ZEBELLION[this]) ) ) && sPrice_ZEBELLION[this]==( old(sPrice_ZEBELLION[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s468,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[from_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s468,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_ZEBELLION,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 10:02:11,203 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_TokenERC20[this][from] && value <= allowed_TokenERC20[this][from][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][from] >= 0 &&  balances_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_TokenERC20[this][from][msg.sender] >= 0 && allowed_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balances_TokenERC20[this][from] == old(balances_TokenERC20[this][from]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && allowed_TokenERC20[this][from][msg.sender] == old(allowed_TokenERC20[this][from][msg.sender]) - value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3]) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this]) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this]) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this]) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this]) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this]) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this]) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this]) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this]) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this]) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this]) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 10:02:11,203 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 10:02:11,219 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:02:11 PropertyContainer
[2020-11-25 10:02:11,219 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 10:02:11,219 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 10:02:11,219 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 10:02:11,219 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 10:02:11,220 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/2) ...
[2020-11-25 10:02:11,220 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 10:02:11,221 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 10:02:11,240 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:02:11" (2/2) ...
[2020-11-25 10:02:11,240 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 10:02:11,241 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 10:02:11,241 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 10:02:11,241 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 10:02:11,242 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/2) ...
[2020-11-25 10:02:11,300 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 10:02:11,300 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:02:11,300 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 10:02:11,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 10:02:11,300 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 10:02:11,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 10:02:11,301 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 10:02:11,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:02:11,302 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 10:02:11,302 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 10:02:11,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 10:02:11,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 10:02:11,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 10:02:11,303 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 10:02:11,303 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 10:02:11,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 10:02:11,304 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 10:02:11,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 10:02:11,304 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 10:02:11,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 10:02:11,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 10:02:11,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 10:02:11,304 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 10:02:11,304 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 10:02:11,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 10:02:11,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 10:02:11,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 10:02:11,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 10:02:11,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 10:02:11,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 10:02:11,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 10:02:11,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 10:02:11,306 INFO  L130     BoogieDeclarations]: Found specification of procedure ZEBELLION_ZEBELLION_NoBaseCtor__success
[2020-11-25 10:02:11,306 INFO  L130     BoogieDeclarations]: Found specification of procedure ZEBELLION_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZEBELLION_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZEBELLION
[2020-11-25 10:02:11,306 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION
[2020-11-25 10:02:11,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION
[2020-11-25 10:02:11,308 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZEBELLION
[2020-11-25 10:02:11,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZEBELLION
[2020-11-25 10:02:11,308 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZEBELLION__success
[2020-11-25 10:02:11,308 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZEBELLION
[2020-11-25 10:02:11,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZEBELLION
[2020-11-25 10:02:11,308 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZEBELLION
[2020-11-25 10:02:11,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZEBELLION
[2020-11-25 10:02:11,309 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZEBELLION
[2020-11-25 10:02:11,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZEBELLION
[2020-11-25 10:02:11,309 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZEBELLION
[2020-11-25 10:02:11,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZEBELLION
[2020-11-25 10:02:11,310 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZEBELLION
[2020-11-25 10:02:11,311 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZEBELLION
[2020-11-25 10:02:11,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZEBELLION
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 10:02:11,312 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 10:02:11,313 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZEBELLION
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 10:02:11,314 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,315 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 10:02:11,316 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 10:02:11,317 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 10:02:11,318 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,319 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 10:02:11,320 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure ZEBELLION_ZEBELLION_NoBaseCtor__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure ZEBELLION_ZEBELLION__success
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure ZEBELLION_ZEBELLION__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZEBELLION__success
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZEBELLION__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZEBELLION__success
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZEBELLION__fail
[2020-11-25 10:02:11,321 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZEBELLION__fail
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZEBELLION__success
[2020-11-25 10:02:11,322 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZEBELLION__success
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZEBELLION__success
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZEBELLION__success
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZEBELLION__success
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZEBELLION__success
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZEBELLION__fail
[2020-11-25 10:02:11,323 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZEBELLION__success
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZEBELLION__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZEBELLION__success
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZEBELLION__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZEBELLION__success
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZEBELLION__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZEBELLION__success
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZEBELLION__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZEBELLION__success
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZEBELLION__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 10:02:11,324 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 10:02:11,325 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 10:02:11,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 10:02:11,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 10:02:11,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZEBELLION_ZEBELLION_NoBaseCtor__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZEBELLION_ZEBELLION_NoBaseCtor__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZEBELLION_ZEBELLION__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZEBELLION_ZEBELLION__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZEBELLION__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZEBELLION__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZEBELLION__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZEBELLION__success
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZEBELLION__fail
[2020-11-25 10:02:11,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZEBELLION__success
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZEBELLION__fail
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZEBELLION__success
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION__fail
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZEBELLION__success
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION__fail
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZEBELLION__success
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZEBELLION__fail
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZEBELLION__success
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZEBELLION__fail
[2020-11-25 10:02:11,331 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZEBELLION__success
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZEBELLION__fail
[2020-11-25 10:02:11,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZEBELLION__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZEBELLION__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZEBELLION__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZEBELLION__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZEBELLION__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZEBELLION__success
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 10:02:11,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 10:02:11,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZEBELLION
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 10:02:11,335 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 10:02:11,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 10:02:11,776 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:02:11,777 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:02:11,777 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:02:11,905 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:02:12,294 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 10:02:12,294 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 10:02:12,296 INFO  L202        PluginConnector]: Adding new model ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:02:12 BoogieIcfgContainer
[2020-11-25 10:02:12,296 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:02:11" (2/2) ...
[2020-11-25 10:02:12,296 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 10:02:12,296 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@27760749 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:02:12, skipping insertion in model container
[2020-11-25 10:02:12,296 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 10:02:12,297 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 10:02:12,297 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 10:02:12,298 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 10:02:12,298 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/3) ...
[2020-11-25 10:02:12,298 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@13f88764 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:02:12, skipping insertion in model container
[2020-11-25 10:02:12,298 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:02:11" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 10:02:12,330 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:02:12 NWAContainer
[2020-11-25 10:02:12,330 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 10:02:12,330 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 10:02:12,330 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 10:02:12,331 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 10:02:12,331 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:02:12" (3/4) ...
[2020-11-25 10:02:12,332 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7528914c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:02:12, skipping insertion in model container
[2020-11-25 10:02:12,332 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:02:12" (4/4) ...
[2020-11-25 10:02:12,334 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 10:02:12,339 INFO  L110   BuchiProductObserver]: Initial RCFG 3569 locations, 4645 edges
[2020-11-25 10:02:12,339 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 10:02:12,349 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 10:02:14,218 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 10:02:14,228 INFO  L110   BuchiProductObserver]: BuchiProgram size 8364 locations, 14620 edges
[2020-11-25 10:02:14,228 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:02:14 BoogieIcfgContainer
[2020-11-25 10:02:14,228 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 10:02:14,229 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 10:02:14,229 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 10:02:14,230 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 10:02:14,230 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:02:14" (1/1) ...
[2020-11-25 10:02:14,354 INFO  L313           BlockEncoder]: Initial Icfg 8364 locations, 14620 edges
[2020-11-25 10:02:14,355 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 10:02:14,355 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 10:02:14,355 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 10:02:14,356 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 10:02:14,372 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 10:02:14,388 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 10:02:14,409 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 10:02:14,414 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 10:02:14,418 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 10:02:14,419 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 10:02:14,423 INFO  L313           BlockEncoder]: Encoded RCFG 8308 locations, 14475 edges
[2020-11-25 10:02:14,423 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:02:14 BasicIcfg
[2020-11-25 10:02:14,423 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 10:02:14,423 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 10:02:14,423 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 10:02:14,425 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 10:02:14,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:02:11" (1/6) ...
[2020-11-25 10:02:14,426 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7a591b89 and model type ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:02:14, skipping insertion in model container
[2020-11-25 10:02:14,426 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,427 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:02:11" (2/6) ...
[2020-11-25 10:02:14,427 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7a591b89 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:02:14, skipping insertion in model container
[2020-11-25 10:02:14,427 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,427 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:02:12" (3/6) ...
[2020-11-25 10:02:14,427 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7a591b89 and model type ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:02:14, skipping insertion in model container
[2020-11-25 10:02:14,427 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,427 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:02:12" (4/6) ...
[2020-11-25 10:02:14,428 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7a591b89 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:02:14, skipping insertion in model container
[2020-11-25 10:02:14,428 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,428 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:02:14" (5/6) ...
[2020-11-25 10:02:14,428 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7a591b89 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 10:02:14, skipping insertion in model container
[2020-11-25 10:02:14,428 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:02:14,428 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:02:14" (6/6) ...
[2020-11-25 10:02:14,429 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZEBELLION_0x98a1208a9287e378d329225836b823481d890409_transferfrom-normal.bpl_BEv2
[2020-11-25 10:02:14,459 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 10:02:14,459 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 10:02:14,459 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 10:02:14,459 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 10:02:14,459 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 10:02:14,459 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 10:02:14,459 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 10:02:14,459 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 10:02:14,459 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 10:02:14,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 10:02:14,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:14,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:14,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:14,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:14,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:14,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 10:02:14,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8308 states.
[2020-11-25 10:02:14,669 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:14,669 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:14,669 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:14,671 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:14,672 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:14,690 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:14,690 INFO  L82        PathProgramCache]: Analyzing trace with hash 468519205, now seen corresponding path program 1 times
[2020-11-25 10:02:14,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:14,715 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:14,747 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:02:14,749 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:14,749 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:02:15,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:15,136 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:02:15,136 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:02:15,138 INFO  L87              Difference]: Start difference. First operand 8308 states. Second operand 3 states.
[2020-11-25 10:02:15,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:15,551 INFO  L93              Difference]: Finished difference Result 7023 states and 8364 transitions.
[2020-11-25 10:02:15,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:02:15,553 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7023 states and 8364 transitions.
[2020-11-25 10:02:15,586 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:15,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7023 states to 7023 states and 8364 transitions.
[2020-11-25 10:02:15,629 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 10:02:15,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 10:02:15,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7023 states and 8364 transitions.
[2020-11-25 10:02:15,644 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:15,645 INFO  L728         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 10:02:15,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7023 states and 8364 transitions.
[2020-11-25 10:02:15,758 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7023 to 7023.
[2020-11-25 10:02:15,758 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7023 states.
[2020-11-25 10:02:15,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7023 states to 7023 states and 8364 transitions.
[2020-11-25 10:02:15,770 INFO  L751         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 10:02:15,770 INFO  L631         BuchiCegarLoop]: Abstraction has 7023 states and 8364 transitions.
[2020-11-25 10:02:15,770 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 10:02:15,770 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7023 states and 8364 transitions.
[2020-11-25 10:02:15,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:15,779 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:15,779 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:15,781 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:15,781 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:15,786 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:15,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 41212819, now seen corresponding path program 1 times
[2020-11-25 10:02:15,788 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:15,802 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:15,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:02:15,827 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:15,827 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:02:15,828 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:15,828 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:02:15,828 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:02:15,828 INFO  L87              Difference]: Start difference. First operand 7023 states and 8364 transitions. cyclomatic complexity: 1347 Second operand 3 states.
[2020-11-25 10:02:15,963 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:15,963 INFO  L93              Difference]: Finished difference Result 8379 states and 9923 transitions.
[2020-11-25 10:02:15,963 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:02:15,964 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8379 states and 9923 transitions.
[2020-11-25 10:02:15,985 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:02:16,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8379 states to 8379 states and 9923 transitions.
[2020-11-25 10:02:16,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 326
[2020-11-25 10:02:16,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 326
[2020-11-25 10:02:16,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8379 states and 9923 transitions.
[2020-11-25 10:02:16,034 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:16,034 INFO  L728         BuchiCegarLoop]: Abstraction has 8379 states and 9923 transitions.
[2020-11-25 10:02:16,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8379 states and 9923 transitions.
[2020-11-25 10:02:16,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8379 to 7435.
[2020-11-25 10:02:16,119 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7435 states.
[2020-11-25 10:02:16,128 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7435 states to 7435 states and 8753 transitions.
[2020-11-25 10:02:16,128 INFO  L751         BuchiCegarLoop]: Abstraction has 7435 states and 8753 transitions.
[2020-11-25 10:02:16,128 INFO  L631         BuchiCegarLoop]: Abstraction has 7435 states and 8753 transitions.
[2020-11-25 10:02:16,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 10:02:16,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7435 states and 8753 transitions.
[2020-11-25 10:02:16,137 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:16,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:16,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:16,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:16,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE   revert
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND TRUE   revert
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:16,143 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:16,143 INFO  L82        PathProgramCache]: Analyzing trace with hash -322253679, now seen corresponding path program 1 times
[2020-11-25 10:02:16,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:16,151 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:16,175 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:02:16,176 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:16,176 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 10:02:16,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:16,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 10:02:16,176 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 10:02:16,177 INFO  L87              Difference]: Start difference. First operand 7435 states and 8753 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 10:02:16,280 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:16,280 INFO  L93              Difference]: Finished difference Result 8379 states and 9749 transitions.
[2020-11-25 10:02:16,280 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 10:02:16,280 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8379 states and 9749 transitions.
[2020-11-25 10:02:16,314 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:02:16,339 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8379 states to 8075 states and 9381 transitions.
[2020-11-25 10:02:16,339 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-25 10:02:16,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-25 10:02:16,340 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8075 states and 9381 transitions.
[2020-11-25 10:02:16,348 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:16,348 INFO  L728         BuchiCegarLoop]: Abstraction has 8075 states and 9381 transitions.
[2020-11-25 10:02:16,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8075 states and 9381 transitions.
[2020-11-25 10:02:16,415 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8075 to 7187.
[2020-11-25 10:02:16,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7187 states.
[2020-11-25 10:02:16,424 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7187 states to 7187 states and 8271 transitions.
[2020-11-25 10:02:16,424 INFO  L751         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 10:02:16,424 INFO  L631         BuchiCegarLoop]: Abstraction has 7187 states and 8271 transitions.
[2020-11-25 10:02:16,424 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 10:02:16,424 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7187 states and 8271 transitions.
[2020-11-25 10:02:16,431 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:16,432 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:16,432 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:16,434 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:16,434 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:16,438 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:16,439 INFO  L82        PathProgramCache]: Analyzing trace with hash -1508717019, now seen corresponding path program 1 times
[2020-11-25 10:02:16,439 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:16,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:16,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 10:02:16,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:16,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 10:02:16,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:16,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 10:02:16,531 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 10:02:16,531 INFO  L87              Difference]: Start difference. First operand 7187 states and 8271 transitions. cyclomatic complexity: 1090 Second operand 7 states.
[2020-11-25 10:02:17,924 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:17,924 INFO  L93              Difference]: Finished difference Result 7683 states and 8817 transitions.
[2020-11-25 10:02:17,924 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 10:02:17,924 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7683 states and 8817 transitions.
[2020-11-25 10:02:17,937 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:02:17,963 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7683 states to 7683 states and 8817 transitions.
[2020-11-25 10:02:17,964 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 351
[2020-11-25 10:02:17,964 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 351
[2020-11-25 10:02:17,964 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7683 states and 8817 transitions.
[2020-11-25 10:02:17,969 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:17,969 INFO  L728         BuchiCegarLoop]: Abstraction has 7683 states and 8817 transitions.
[2020-11-25 10:02:17,975 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7683 states and 8817 transitions.
[2020-11-25 10:02:18,024 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7683 to 7265.
[2020-11-25 10:02:18,024 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7265 states.
[2020-11-25 10:02:18,030 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7265 states to 7265 states and 8359 transitions.
[2020-11-25 10:02:18,031 INFO  L751         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 10:02:18,031 INFO  L631         BuchiCegarLoop]: Abstraction has 7265 states and 8359 transitions.
[2020-11-25 10:02:18,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 10:02:18,031 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7265 states and 8359 transitions.
[2020-11-25 10:02:18,037 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:18,037 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:18,037 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:18,039 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:18,039 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:18,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:18,043 INFO  L82        PathProgramCache]: Analyzing trace with hash -982518175, now seen corresponding path program 1 times
[2020-11-25 10:02:18,044 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:18,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:19,018 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 51
[2020-11-25 10:02:19,211 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-11-25 10:02:19,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:02:19,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 10:02:19,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:19,211 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 10:02:19,212 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=543, Unknown=0, NotChecked=0, Total=600
[2020-11-25 10:02:19,212 INFO  L87              Difference]: Start difference. First operand 7265 states and 8359 transitions. cyclomatic complexity: 1100 Second operand 25 states.
[2020-11-25 10:02:38,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:39,000 INFO  L93              Difference]: Finished difference Result 7444 states and 8560 transitions.
[2020-11-25 10:02:39,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 10:02:39,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7444 states and 8560 transitions.
[2020-11-25 10:02:39,011 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:02:39,027 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7444 states to 7444 states and 8560 transitions.
[2020-11-25 10:02:39,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 287
[2020-11-25 10:02:39,028 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 287
[2020-11-25 10:02:39,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7444 states and 8560 transitions.
[2020-11-25 10:02:39,032 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:39,032 INFO  L728         BuchiCegarLoop]: Abstraction has 7444 states and 8560 transitions.
[2020-11-25 10:02:39,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7444 states and 8560 transitions.
[2020-11-25 10:02:39,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7444 to 7379.
[2020-11-25 10:02:39,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7379 states.
[2020-11-25 10:02:39,080 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7379 states to 7379 states and 8485 transitions.
[2020-11-25 10:02:39,080 INFO  L751         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 10:02:39,080 INFO  L631         BuchiCegarLoop]: Abstraction has 7379 states and 8485 transitions.
[2020-11-25 10:02:39,081 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 10:02:39,081 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7379 states and 8485 transitions.
[2020-11-25 10:02:39,087 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:02:39,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:39,087 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:39,089 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:39,089 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:39,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:39,093 INFO  L82        PathProgramCache]: Analyzing trace with hash 1730911947, now seen corresponding path program 1 times
[2020-11-25 10:02:39,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:39,102 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:39,146 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 10:02:39,146 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:39,146 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 10:02:39,147 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:39,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 10:02:39,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 10:02:39,147 INFO  L87              Difference]: Start difference. First operand 7379 states and 8485 transitions. cyclomatic complexity: 1114 Second operand 7 states.
[2020-11-25 10:02:40,519 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:40,520 INFO  L93              Difference]: Finished difference Result 7703 states and 8843 transitions.
[2020-11-25 10:02:40,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 10:02:40,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7703 states and 8843 transitions.
[2020-11-25 10:02:40,535 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:02:40,552 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7703 states to 7703 states and 8843 transitions.
[2020-11-25 10:02:40,553 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 10:02:40,553 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 10:02:40,553 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7703 states and 8843 transitions.
[2020-11-25 10:02:40,558 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:40,558 INFO  L728         BuchiCegarLoop]: Abstraction has 7703 states and 8843 transitions.
[2020-11-25 10:02:40,563 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7703 states and 8843 transitions.
[2020-11-25 10:02:40,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7703 to 7479.
[2020-11-25 10:02:40,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7479 states.
[2020-11-25 10:02:40,611 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7479 states to 7479 states and 8587 transitions.
[2020-11-25 10:02:40,611 INFO  L751         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 10:02:40,611 INFO  L631         BuchiCegarLoop]: Abstraction has 7479 states and 8587 transitions.
[2020-11-25 10:02:40,611 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 10:02:40,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7479 states and 8587 transitions.
[2020-11-25 10:02:40,618 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:02:40,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:40,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:40,619 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:40,619 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:40,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:40,622 INFO  L82        PathProgramCache]: Analyzing trace with hash -1873640708, now seen corresponding path program 1 times
[2020-11-25 10:02:40,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:40,633 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:40,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 10:02:40,805 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:40,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 10:02:40,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:40,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 10:02:40,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=303, Unknown=0, NotChecked=0, Total=342
[2020-11-25 10:02:40,805 INFO  L87              Difference]: Start difference. First operand 7479 states and 8587 transitions. cyclomatic complexity: 1116 Second operand 19 states.
[2020-11-25 10:02:49,593 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:49,593 INFO  L93              Difference]: Finished difference Result 7807 states and 8972 transitions.
[2020-11-25 10:02:49,593 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 10:02:49,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7807 states and 8972 transitions.
[2020-11-25 10:02:49,606 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:02:49,621 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7807 states to 7807 states and 8972 transitions.
[2020-11-25 10:02:49,621 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 378
[2020-11-25 10:02:49,622 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 378
[2020-11-25 10:02:49,622 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7807 states and 8972 transitions.
[2020-11-25 10:02:49,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:49,625 INFO  L728         BuchiCegarLoop]: Abstraction has 7807 states and 8972 transitions.
[2020-11-25 10:02:49,631 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7807 states and 8972 transitions.
[2020-11-25 10:02:49,665 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7807 to 7483.
[2020-11-25 10:02:49,665 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7483 states.
[2020-11-25 10:02:49,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7483 states to 7483 states and 8591 transitions.
[2020-11-25 10:02:49,672 INFO  L751         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 10:02:49,672 INFO  L631         BuchiCegarLoop]: Abstraction has 7483 states and 8591 transitions.
[2020-11-25 10:02:49,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 10:02:49,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7483 states and 8591 transitions.
[2020-11-25 10:02:49,679 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:02:49,679 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:49,679 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:49,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:49,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND FALSE  !(revert)
[L4540]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s468];
[L4541]              __tmp__balances_TokenERC20[this][to_s468] := __var_9;
[L4542]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s468];
[L4543]              success_s468 := true;
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:49,683 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:49,683 INFO  L82        PathProgramCache]: Analyzing trace with hash -612461072, now seen corresponding path program 1 times
[2020-11-25 10:02:49,683 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:49,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:49,725 INFO  L134       CoverageAnalysis]: Checked inductivity of 27 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-11-25 10:02:49,725 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:02:49,725 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 10:02:49,725 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:49,725 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 10:02:49,725 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 10:02:49,725 INFO  L87              Difference]: Start difference. First operand 7483 states and 8591 transitions. cyclomatic complexity: 1116 Second operand 5 states.
[2020-11-25 10:02:50,700 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:02:50,700 INFO  L93              Difference]: Finished difference Result 8804 states and 10144 transitions.
[2020-11-25 10:02:50,700 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 10:02:50,701 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8804 states and 10144 transitions.
[2020-11-25 10:02:50,716 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 10:02:50,733 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8804 states to 7234 states and 8413 transitions.
[2020-11-25 10:02:50,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 296
[2020-11-25 10:02:50,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 296
[2020-11-25 10:02:50,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7234 states and 8413 transitions.
[2020-11-25 10:02:50,737 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:02:50,737 INFO  L728         BuchiCegarLoop]: Abstraction has 7234 states and 8413 transitions.
[2020-11-25 10:02:50,741 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7234 states and 8413 transitions.
[2020-11-25 10:02:50,769 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7234 to 5852.
[2020-11-25 10:02:50,769 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5852 states.
[2020-11-25 10:02:50,774 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5852 states to 5852 states and 6726 transitions.
[2020-11-25 10:02:50,774 INFO  L751         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 10:02:50,774 INFO  L631         BuchiCegarLoop]: Abstraction has 5852 states and 6726 transitions.
[2020-11-25 10:02:50,774 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 10:02:50,774 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5852 states and 6726 transitions.
[2020-11-25 10:02:50,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:02:50,780 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:02:50,780 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:02:50,781 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:02:50,781 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_ZEBELLION(this);
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND FALSE  !(__exception)
[L1173]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4552]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4552]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4553]  COND FALSE  !(revert)
[L4556]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4557]              balances_TokenERC20[this][from_s468] := __var_7;
[L4558]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4559]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4559]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4560]  COND FALSE  !(revert)
[L4563]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4564]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4565]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4566]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4566]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4567]  COND FALSE  !(revert)
[L4570]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4571]              balances_TokenERC20[this][to_s468] := __var_9;
[L4572]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4573]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4574]              success_s468 := true;
[L1173]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1174]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((((((((((success_s468 == true && balances_TokenERC20[this][from_s468] == old(balances_TokenERC20[this][from_s468]) - tokens_s468) && balances_TokenERC20[this][to_s468] == old(balances_TokenERC20[this][to_s468]) + tokens_s468) && allowed_TokenERC20[this][from_s468][msgsender_MSG] == old(allowed_TokenERC20[this][from_s468][msgsender_MSG]) - tokens_s468) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && allowed_TokenERC20[this][p2][p3] == old(allowed_TokenERC20[this][p2][p3])) && aSBlock_ZEBELLION[this] == old(aSBlock_ZEBELLION[this])) && aEBlock_ZEBELLION[this] == old(aEBlock_ZEBELLION[this])) && aCap_ZEBELLION[this] == old(aCap_ZEBELLION[this])) && aTot_ZEBELLION[this] == old(aTot_ZEBELLION[this])) && aAmt_ZEBELLION[this] == old(aAmt_ZEBELLION[this])) && sSBlock_ZEBELLION[this] == old(sSBlock_ZEBELLION[this])) && sEBlock_ZEBELLION[this] == old(sEBlock_ZEBELLION[this])) && sCap_ZEBELLION[this] == old(sCap_ZEBELLION[this])) && sTot_ZEBELLION[this] == old(sTot_ZEBELLION[this])) && sChunk_ZEBELLION[this] == old(sChunk_ZEBELLION[this])) && sPrice_ZEBELLION[this] == old(sPrice_ZEBELLION[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:02:50,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:02:50,785 INFO  L82        PathProgramCache]: Analyzing trace with hash 1004063115, now seen corresponding path program 1 times
[2020-11-25 10:02:50,785 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:02:50,834 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:02:51,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 10:02:51,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:02:51,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 10:02:51,231 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:02:51,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 10:02:51,231 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=622, Unknown=0, NotChecked=0, Total=702
[2020-11-25 10:02:51,231 INFO  L87              Difference]: Start difference. First operand 5852 states and 6726 transitions. cyclomatic complexity: 881 Second operand 27 states.
[2020-11-25 10:03:03,162 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:03:03,163 INFO  L93              Difference]: Finished difference Result 5980 states and 6883 transitions.
[2020-11-25 10:03:03,163 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 10:03:03,163 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5980 states and 6883 transitions.
[2020-11-25 10:03:03,172 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 10:03:03,183 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5980 states to 5974 states and 6876 transitions.
[2020-11-25 10:03:03,183 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 240
[2020-11-25 10:03:03,183 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 240
[2020-11-25 10:03:03,183 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5974 states and 6876 transitions.
[2020-11-25 10:03:03,186 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:03:03,186 INFO  L728         BuchiCegarLoop]: Abstraction has 5974 states and 6876 transitions.
[2020-11-25 10:03:03,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5974 states and 6876 transitions.
[2020-11-25 10:03:03,212 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5974 to 5844.
[2020-11-25 10:03:03,213 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5844 states.
[2020-11-25 10:03:03,218 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5844 states to 5844 states and 6715 transitions.
[2020-11-25 10:03:03,218 INFO  L751         BuchiCegarLoop]: Abstraction has 5844 states and 6715 transitions.
[2020-11-25 10:03:03,218 INFO  L631         BuchiCegarLoop]: Abstraction has 5844 states and 6715 transitions.
[2020-11-25 10:03:03,218 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 10:03:03,218 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5844 states and 6715 transitions.
[2020-11-25 10:03:03,223 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:03:03,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:03:03,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:03:03,224 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:03:03,224 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == ZEBELLION;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -242809931;
[L4362]              name_TokenERC20[this] := -242809931;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -862891426;
[L4371]              name_TokenERC20[this] := 1732834815;
[L4372]              decimals_TokenERC20[this] := 18;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(886374127716767201942328194800777558872423513121771619871115364515446784, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_ZEBELLION[this] := 0;
[L4706]              aEBlock_ZEBELLION[this] := 0;
[L4707]              aCap_ZEBELLION[this] := 0;
[L4708]              aTot_ZEBELLION[this] := 0;
[L4709]              aAmt_ZEBELLION[this] := 0;
[L4710]              sSBlock_ZEBELLION[this] := 0;
[L4711]              sEBlock_ZEBELLION[this] := 0;
[L4712]              sCap_ZEBELLION[this] := 0;
[L4713]              sTot_ZEBELLION[this] := 0;
[L4714]              sChunk_ZEBELLION[this] := 0;
[L4715]              sPrice_ZEBELLION[this] := 0;
[L4753]  RET         call ZEBELLION_ZEBELLION_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call ZEBELLION_ZEBELLION__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND TRUE   choice == 28
[L7486]              gas := gas - 21000;
[L7487]  COND TRUE   gas >= 0
[L7488]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7489]              assume msgvalue_MSG == 0;
[L7490]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1057]              havoc __exception;
[L1058]              revert := false;
[L1059]  COND FALSE  !(__exception)
[L1093]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4509]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4510]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4511]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4512]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4513]              success_s409 := true;
[L1093]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1094]              assume !revert && gas >= 0;
[L7490]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7683]  RET         call CorralChoice_ZEBELLION(this);
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND FALSE  !(choice == 29)
[L7485]  COND FALSE  !(choice == 28)
[L7492]  COND TRUE   choice == 27
[L7493]              gas := gas - 21000;
[L7494]  COND TRUE   gas >= 0
[L7495]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7496]              assume msgvalue_MSG == 0;
[L7497]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s468 && p1 != to_s468) && (p2 != from_s468 || p3 != msgsender_MSG)) && from_s468 != to_s468) && tokens_s468 <= balances_TokenERC20[this][from_s468]) && tokens_s468 <= allowed_TokenERC20[this][from_s468][msgsender_MSG]) && balances_TokenERC20[this][to_s468] + tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s468 >= 0) && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s468] >= 0) && balances_TokenERC20[this][to_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][from_s468] >= 0) && balances_TokenERC20[this][from_s468] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_TokenERC20[this][from_s468][msgsender_MSG] >= 0) && allowed_TokenERC20[this][from_s468][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L1137]              havoc __exception;
[L1138]              revert := false;
[L1139]  COND TRUE   __exception
[L1140]              __tmp__Balance := Balance;
[L1141]              __tmp__DType := DType;
[L1142]              __tmp__Alloc := Alloc;
[L1143]              __tmp__balance_ADDR := balance_ADDR;
[L1144]              __tmp__M_Ref_int := M_Ref_int;
[L1145]              __tmp__sum_balances0 := sum_balances0;
[L1146]              __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L1147]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1148]              __tmp__sum_allowed1 := sum_allowed1;
[L1149]              __tmp__Length := Length;
[L1150]              __tmp__now := now;
[L1151]              __tmp__owner_Owned := owner_Owned;
[L1152]              __tmp__newOwner_Owned := newOwner_Owned;
[L1153]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1154]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1155]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1156]              __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L1157]              __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1158]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1159]              __tmp__aSBlock_ZEBELLION := aSBlock_ZEBELLION;
[L1160]              __tmp__aEBlock_ZEBELLION := aEBlock_ZEBELLION;
[L1161]              __tmp__aCap_ZEBELLION := aCap_ZEBELLION;
[L1162]              __tmp__aTot_ZEBELLION := aTot_ZEBELLION;
[L1163]              __tmp__aAmt_ZEBELLION := aAmt_ZEBELLION;
[L1164]              __tmp__sSBlock_ZEBELLION := sSBlock_ZEBELLION;
[L1165]              __tmp__sEBlock_ZEBELLION := sEBlock_ZEBELLION;
[L1166]              __tmp__sCap_ZEBELLION := sCap_ZEBELLION;
[L1167]              __tmp__sTot_ZEBELLION := sTot_ZEBELLION;
[L1168]              __tmp__sChunk_ZEBELLION := sChunk_ZEBELLION;
[L1169]              __tmp__sPrice_ZEBELLION := sPrice_ZEBELLION;
[L1170]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4522]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4522]  RET         call __var_7 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][from_s468], tokens_s468);
[L4523]  COND FALSE  !(revert)
[L4526]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][from_s468];
[L4527]              __tmp__balances_TokenERC20[this][from_s468] := __var_7;
[L4528]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][from_s468];
[L4529]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4529]  RET         call __var_8 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4530]  COND FALSE  !(revert)
[L4533]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] - __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4534]              __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4535]              __tmp__sum_allowed1[from_s468] := __tmp__sum_allowed1[from_s468] + __tmp__allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4536]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4536]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s468], tokens_s468);
[L4537]  COND TRUE   revert
[L1170]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1171]              assume revert || gas < 0;
[L7497]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7683]  RET         call CorralChoice_ZEBELLION(this);

Loop:
[L7683]  CALL        call CorralChoice_ZEBELLION(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != ZEBELLION;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_ZEBELLION(this);

[2020-11-25 10:03:03,227 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:03:03,227 INFO  L82        PathProgramCache]: Analyzing trace with hash -701613402, now seen corresponding path program 1 times
[2020-11-25 10:03:03,228 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:03:03,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:03:03,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 112 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 10:03:03,330 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:03:03,330 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 10:03:03,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:03:03,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 10:03:03,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 10:03:03,330 INFO  L87              Difference]: Start difference. First operand 5844 states and 6715 transitions. cyclomatic complexity: 878 Second operand 9 states.
[2020-11-25 10:03:04,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:03:04,263 INFO  L93              Difference]: Finished difference Result 3221 states and 3683 transitions.
[2020-11-25 10:03:04,263 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 10:03:04,263 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3221 states and 3683 transitions.
[2020-11-25 10:03:04,268 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 10:03:04,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3221 states to 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 10:03:04,268 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 10:03:04,268 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:03:04,268 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 10:03:04,268 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 10:03:04,268 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 10:03:04,268 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 10:03:04,271 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:03:04 BasicIcfg
[2020-11-25 10:03:04,271 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 10:03:04,271 INFO  L168              Benchmark]: Toolchain (without parser) took 53263.29 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.8 GB). Free memory was 940.5 MB in the beginning and 2.6 GB in the end (delta: -1.6 GB). Peak memory consumption was 219.9 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,272 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,272 INFO  L168              Benchmark]: Boogie Preprocessor took 125.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.5 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,272 INFO  L168              Benchmark]: UtopiaSpecLang took 83.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,273 INFO  L168              Benchmark]: Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,273 INFO  L168              Benchmark]: RCFGBuilder took 1055.64 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 903.0 MB in the beginning and 990.3 MB in the end (delta: -87.4 MB). Peak memory consumption was 192.5 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,273 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.23 ms. Allocated memory is still 1.1 GB. Free memory was 990.3 MB in the beginning and 977.7 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,274 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1898.43 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 170.9 MB). Free memory was 977.7 MB in the beginning and 862.8 MB in the end (delta: 114.9 MB). Peak memory consumption was 471.2 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,274 INFO  L168              Benchmark]: BlockEncodingV2 took 194.51 ms. Allocated memory is still 1.3 GB. Free memory was 862.8 MB in the beginning and 765.9 MB in the end (delta: 96.9 MB). Peak memory consumption was 96.9 MB. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,274 INFO  L168              Benchmark]: BuchiAutomizer took 49847.83 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 765.9 MB in the beginning and 2.6 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 10:03:04,277 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8364 locations, 14620 edges
  - StatisticsResult: Encoded RCFG
    8308 locations, 14475 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 125.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.5 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 83.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1055.64 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 903.0 MB in the beginning and 990.3 MB in the end (delta: -87.4 MB). Peak memory consumption was 192.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.23 ms. Allocated memory is still 1.1 GB. Free memory was 990.3 MB in the beginning and 977.7 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1898.43 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 170.9 MB). Free memory was 977.7 MB in the beginning and 862.8 MB in the end (delta: 114.9 MB). Peak memory consumption was 471.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 194.51 ms. Allocated memory is still 1.3 GB. Free memory was 862.8 MB in the beginning and 765.9 MB in the end (delta: 96.9 MB). Peak memory consumption was 96.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 49847.83 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 765.9 MB in the beginning and 2.6 GB in the end (delta: -1.8 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3569 locations, 4645 edges
  - StatisticsResult: BuchiProgram size
    8364 locations, 14620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 27 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 49.8s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 2.6s. Construction of modules took 37.5s. BÃ¼chi inclusion checks took 8.3s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 9 MinimizatonAttempts, 4375 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 7483 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 73360 SDtfs, 85925 SDslu, 187897 SDs, 0 SdLazy, 302616 SolverSat, 14541 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 37.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(success_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
