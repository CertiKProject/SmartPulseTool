This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:18:22,258 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:18:22,260 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:18:22,273 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:18:22,273 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:18:22,274 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:18:22,275 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:18:22,277 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:18:22,279 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:18:22,280 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:18:22,281 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:18:22,281 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:18:22,281 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:18:22,282 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:18:22,283 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:18:22,284 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:18:22,285 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:18:22,286 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:18:22,288 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:18:22,289 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:18:22,290 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:18:22,290 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:18:22,292 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:18:22,292 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:18:22,293 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:18:22,293 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:18:22,294 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:18:22,294 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:18:22,294 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:18:22,295 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:18:22,295 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:18:22,296 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:18:22,296 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:18:22,297 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:18:22,298 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:18:22,298 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:18:22,298 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:18:22,298 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:18:22,299 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:18:22,299 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:18:22,300 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:18:22,300 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:18:22,308 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:18:22,308 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:18:22,309 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:18:22,310 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:18:22,310 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:18:22,310 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:18:22,311 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:18:22,311 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:18:22,312 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:18:22,312 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:18:22,312 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:18:22,335 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:18:22,348 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:18:22,351 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:18:22,352 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:18:22,352 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:18:22,353 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl
[2020-11-25 06:18:22,353 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl'
[2020-11-25 06:18:22,420 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:18:22,421 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:18:22,421 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:18:22,422 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:18:22,422 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:18:22,439 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,440 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,464 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,464 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,482 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,488 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,496 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,505 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:18:22,506 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:18:22,506 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:18:22,508 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:18:22,512 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/1) ...
[2020-11-25 06:18:22,526 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]))))
[2020-11-25 06:18:22,535 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]))))
[2020-11-25 06:18:22,543 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]))))
[2020-11-25 06:18:22,549 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s186 && _value_s186<=balanceOf_TokenERC20[this][msg.sender] ) && _value_s186>=0 ) && _value_s186<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s186]>=0 ) && balanceOf_TokenERC20[this][_to_s186]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s186,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:18:22,552 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( success_s186==true && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this]==( old(balanceOf_TokenERC20[this]) ) ) && allowance_TokenERC20[this]==( old(allowance_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s186,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 06:18:22,556 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]))))
[2020-11-25 06:18:22,556 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:18:22,562 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:18:22 PropertyContainer
[2020-11-25 06:18:22,562 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:18:22,562 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:18:22,562 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:18:22,562 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:18:22,563 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/2) ...
[2020-11-25 06:18:22,563 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:18:22,564 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:18:22,573 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:18:22" (2/2) ...
[2020-11-25 06:18:22,573 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:18:22,573 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:18:22,573 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:18:22,573 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:18:22,574 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/2) ...
[2020-11-25 06:18:22,631 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:18:22,632 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:18:22,632 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:18:22,632 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:18:22,633 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 06:18:22,633 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:18:22,633 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 06:18:22,633 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 06:18:22,633 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:18:22,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:18:22,634 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:18:22,634 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:18:22,635 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:18:22,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:18:22,635 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:18:22,635 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:18:22,635 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 06:18:22,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 06:18:22,636 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:18:22,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:18:22,636 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 06:18:22,636 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 06:18:22,637 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 06:18:22,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 06:18:22,637 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 06:18:22,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 06:18:22,637 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 06:18:22,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 06:18:22,638 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 06:18:22,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 06:18:22,638 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 06:18:22,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 06:18:22,639 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:18:22,639 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:18:22,639 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:18:22,639 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 06:18:22,639 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,640 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 06:18:22,641 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:18:22,642 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:18:22,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:18:22,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 06:18:22,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:18:22,646 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:18:22,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:18:23,157 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:18:23,158 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:18:23,158 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:18:23,185 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:18:23,185 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 06:18:23,187 INFO  L202        PluginConnector]: Adding new model TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:18:23 BoogieIcfgContainer
[2020-11-25 06:18:23,187 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:18:22" (2/2) ...
[2020-11-25 06:18:23,187 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:18:23,188 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1b741128 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:18:23, skipping insertion in model container
[2020-11-25 06:18:23,188 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:18:23,188 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:18:23,188 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:18:23,189 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:18:23,190 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/3) ...
[2020-11-25 06:18:23,190 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1abcf60e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:18:23, skipping insertion in model container
[2020-11-25 06:18:23,190 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:18:22" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:18:23,226 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:18:23 NWAContainer
[2020-11-25 06:18:23,227 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:18:23,227 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:18:23,227 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:18:23,228 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:18:23,229 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:18:23" (3/4) ...
[2020-11-25 06:18:23,230 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7b3bfd56 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:18:23, skipping insertion in model container
[2020-11-25 06:18:23,230 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:18:23" (4/4) ...
[2020-11-25 06:18:23,234 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:18:23,236 INFO  L110   BuchiProductObserver]: Initial RCFG 816 locations, 988 edges
[2020-11-25 06:18:23,237 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:18:23,247 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:18:24,211 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:18:24,214 INFO  L110   BuchiProductObserver]: BuchiProgram size 1898 locations, 3179 edges
[2020-11-25 06:18:24,214 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:18:24 BoogieIcfgContainer
[2020-11-25 06:18:24,214 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:18:24,214 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:18:24,215 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:18:24,216 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:18:24,217 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:18:24" (1/1) ...
[2020-11-25 06:18:24,261 INFO  L313           BlockEncoder]: Initial Icfg 1898 locations, 3179 edges
[2020-11-25 06:18:24,261 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:18:24,261 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:18:24,262 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:18:24,262 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:18:24,269 INFO  L70    emoveInfeasibleEdges]: Removed 30 edges and 7 locations because of local infeasibility
[2020-11-25 06:18:24,273 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 06:18:24,279 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:18:24,281 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:18:24,282 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:18:24,283 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:18:24,285 INFO  L313           BlockEncoder]: Encoded RCFG 1878 locations, 3130 edges
[2020-11-25 06:18:24,286 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:18:24 BasicIcfg
[2020-11-25 06:18:24,286 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:18:24,286 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:18:24,286 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:18:24,288 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:18:24,288 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,288 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:18:22" (1/6) ...
[2020-11-25 06:18:24,290 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@225dc59e and model type TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:18:24, skipping insertion in model container
[2020-11-25 06:18:24,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,290 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:18:22" (2/6) ...
[2020-11-25 06:18:24,290 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@225dc59e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:18:24, skipping insertion in model container
[2020-11-25 06:18:24,290 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,290 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:18:23" (3/6) ...
[2020-11-25 06:18:24,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@225dc59e and model type TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:18:24, skipping insertion in model container
[2020-11-25 06:18:24,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:18:23" (4/6) ...
[2020-11-25 06:18:24,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@225dc59e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:18:24, skipping insertion in model container
[2020-11-25 06:18:24,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:18:24" (5/6) ...
[2020-11-25 06:18:24,291 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@225dc59e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:18:24, skipping insertion in model container
[2020-11-25 06:18:24,291 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:18:24,291 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:18:24" (6/6) ...
[2020-11-25 06:18:24,292 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TokenERC20_0xd08Bd5110B58396d435665de74A43a06B0136B10_transfer-self.bpl_BEv2
[2020-11-25 06:18:24,323 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:18:24,324 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:18:24,324 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:18:24,324 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:18:24,324 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:18:24,324 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:18:24,324 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:18:24,324 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:18:24,324 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:18:24,350 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1878 states.
[2020-11-25 06:18:24,399 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:24,399 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:24,399 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:24,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:24,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:24,409 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:18:24,409 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1878 states.
[2020-11-25 06:18:24,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:24,423 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:24,423 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:24,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:24,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND TRUE   revert
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND TRUE   choice == 12
[L2088]              gas := gas - 21000;
[L2089]  COND FALSE  !(gas >= 0)
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:24,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:24,449 INFO  L82        PathProgramCache]: Analyzing trace with hash -1288605972, now seen corresponding path program 1 times
[2020-11-25 06:18:24,455 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:24,479 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:24,525 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:24,527 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:24,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:18:24,533 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:24,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:18:24,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:18:24,642 INFO  L87              Difference]: Start difference. First operand 1878 states. Second operand 3 states.
[2020-11-25 06:18:24,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:24,806 INFO  L93              Difference]: Finished difference Result 1509 states and 1644 transitions.
[2020-11-25 06:18:24,806 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:18:24,807 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1509 states and 1644 transitions.
[2020-11-25 06:18:24,818 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:24,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1509 states to 1507 states and 1640 transitions.
[2020-11-25 06:18:24,834 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 06:18:24,836 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 06:18:24,836 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1507 states and 1640 transitions.
[2020-11-25 06:18:24,842 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:24,842 INFO  L728         BuchiCegarLoop]: Abstraction has 1507 states and 1640 transitions.
[2020-11-25 06:18:24,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1507 states and 1640 transitions.
[2020-11-25 06:18:24,893 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1507 to 1507.
[2020-11-25 06:18:24,893 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1507 states.
[2020-11-25 06:18:24,897 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1507 states to 1507 states and 1640 transitions.
[2020-11-25 06:18:24,898 INFO  L751         BuchiCegarLoop]: Abstraction has 1507 states and 1640 transitions.
[2020-11-25 06:18:24,898 INFO  L631         BuchiCegarLoop]: Abstraction has 1507 states and 1640 transitions.
[2020-11-25 06:18:24,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:18:24,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1507 states and 1640 transitions.
[2020-11-25 06:18:24,904 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:24,904 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:24,905 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:24,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:24,907 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND TRUE   !(_to_s167 != null)
[L1211]              revert := true;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND TRUE   revert
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND TRUE   !(_to_s167 != null)
[L1211]              revert := true;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND TRUE   revert
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:24,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:24,912 INFO  L82        PathProgramCache]: Analyzing trace with hash -64707373, now seen corresponding path program 1 times
[2020-11-25 06:18:24,913 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:24,930 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:24,975 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:24,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:24,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:18:24,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:24,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:18:24,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:18:24,977 INFO  L87              Difference]: Start difference. First operand 1507 states and 1640 transitions. cyclomatic complexity: 135 Second operand 7 states.
[2020-11-25 06:18:25,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:25,066 INFO  L93              Difference]: Finished difference Result 1607 states and 1752 transitions.
[2020-11-25 06:18:25,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:18:25,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1607 states and 1752 transitions.
[2020-11-25 06:18:25,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:25,083 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1607 states to 1589 states and 1733 transitions.
[2020-11-25 06:18:25,083 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 742
[2020-11-25 06:18:25,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 742
[2020-11-25 06:18:25,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1589 states and 1733 transitions.
[2020-11-25 06:18:25,087 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:25,087 INFO  L728         BuchiCegarLoop]: Abstraction has 1589 states and 1733 transitions.
[2020-11-25 06:18:25,089 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1589 states and 1733 transitions.
[2020-11-25 06:18:25,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1589 to 1559.
[2020-11-25 06:18:25,108 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1559 states.
[2020-11-25 06:18:25,112 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1559 states to 1559 states and 1701 transitions.
[2020-11-25 06:18:25,112 INFO  L751         BuchiCegarLoop]: Abstraction has 1559 states and 1701 transitions.
[2020-11-25 06:18:25,112 INFO  L631         BuchiCegarLoop]: Abstraction has 1559 states and 1701 transitions.
[2020-11-25 06:18:25,112 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:18:25,112 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1559 states and 1701 transitions.
[2020-11-25 06:18:25,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:25,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:25,117 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:25,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:25,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND FALSE  !(!(_to_s167 != null))
[L1214]  COND TRUE   !(balanceOf_TokenERC20[this][_from_s167] >= _value_s167)
[L1215]              revert := true;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND TRUE   revert
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND FALSE  !(!(_to_s167 != null))
[L1214]  COND TRUE   !(balanceOf_TokenERC20[this][_from_s167] >= _value_s167)
[L1215]              revert := true;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND TRUE   revert
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:25,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:25,123 INFO  L82        PathProgramCache]: Analyzing trace with hash -2105202220, now seen corresponding path program 1 times
[2020-11-25 06:18:25,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:25,136 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:25,159 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:25,160 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:25,160 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:18:25,160 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:25,160 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:18:25,160 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:18:25,161 INFO  L87              Difference]: Start difference. First operand 1559 states and 1701 transitions. cyclomatic complexity: 144 Second operand 3 states.
[2020-11-25 06:18:25,207 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:25,207 INFO  L93              Difference]: Finished difference Result 2011 states and 2239 transitions.
[2020-11-25 06:18:25,207 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:18:25,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2011 states and 2239 transitions.
[2020-11-25 06:18:25,219 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:18:25,229 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2011 states to 1919 states and 2132 transitions.
[2020-11-25 06:18:25,229 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 924
[2020-11-25 06:18:25,230 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 924
[2020-11-25 06:18:25,230 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1919 states and 2132 transitions.
[2020-11-25 06:18:25,234 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:25,234 INFO  L728         BuchiCegarLoop]: Abstraction has 1919 states and 2132 transitions.
[2020-11-25 06:18:25,236 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1919 states and 2132 transitions.
[2020-11-25 06:18:25,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1919 to 1538.
[2020-11-25 06:18:25,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1538 states.
[2020-11-25 06:18:25,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1538 states to 1538 states and 1654 transitions.
[2020-11-25 06:18:25,258 INFO  L751         BuchiCegarLoop]: Abstraction has 1538 states and 1654 transitions.
[2020-11-25 06:18:25,258 INFO  L631         BuchiCegarLoop]: Abstraction has 1538 states and 1654 transitions.
[2020-11-25 06:18:25,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:18:25,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1538 states and 1654 transitions.
[2020-11-25 06:18:25,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:18:25,264 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:25,264 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:25,266 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:25,266 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND FALSE  !(!(_to_s167 != null))
[L1214]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s167] >= _value_s167))
[L1218]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s167]))
[L1222]              previousBalances_s167 := (balanceOf_TokenERC20[this][_from_s167] + balanceOf_TokenERC20[this][_to_s167]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1223]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s167];
[L1224]              balanceOf_TokenERC20[this][_from_s167] := (balanceOf_TokenERC20[this][_from_s167] - _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1225]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s167];
[L1226]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s167];
[L1227]              balanceOf_TokenERC20[this][_to_s167] := (balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1228]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s167];
[L1229]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L1230]              assert (balanceOf_TokenERC20[this][_from_s167] + balanceOf_TokenERC20[this][_to_s167]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s167;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND FALSE  !(revert)
[L1249]              success_s186 := true;
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND FALSE  !(__exception)
[L218]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1245]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1209]              __var_2 := null;
[L1210]  COND FALSE  !(!(_to_s167 != null))
[L1214]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s167] >= _value_s167))
[L1218]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s167]))
[L1222]              previousBalances_s167 := (balanceOf_TokenERC20[this][_from_s167] + balanceOf_TokenERC20[this][_to_s167]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1223]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s167];
[L1224]              balanceOf_TokenERC20[this][_from_s167] := (balanceOf_TokenERC20[this][_from_s167] - _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1225]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s167];
[L1226]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s167];
[L1227]              balanceOf_TokenERC20[this][_to_s167] := (balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1228]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s167];
[L1229]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L1230]              assert (balanceOf_TokenERC20[this][_from_s167] + balanceOf_TokenERC20[this][_to_s167]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s167;
[L1245]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1246]  COND FALSE  !(revert)
[L1249]              success_s186 := true;
[L218]   RET         call success_s186 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L219]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s186 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]));
[L2]                 revert := revert_hold;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:25,269 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:25,269 INFO  L82        PathProgramCache]: Analyzing trace with hash -1007620350, now seen corresponding path program 1 times
[2020-11-25 06:18:25,270 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:25,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:26,047 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:26,047 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:26,047 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 06:18:26,048 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:26,048 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 06:18:26,048 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=267, Unknown=0, NotChecked=0, Total=306
[2020-11-25 06:18:26,049 INFO  L87              Difference]: Start difference. First operand 1538 states and 1654 transitions. cyclomatic complexity: 118 Second operand 18 states.
[2020-11-25 06:18:27,920 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:27,920 INFO  L93              Difference]: Finished difference Result 1628 states and 1771 transitions.
[2020-11-25 06:18:27,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 06:18:27,920 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1628 states and 1771 transitions.
[2020-11-25 06:18:27,926 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:18:27,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1628 states to 1628 states and 1771 transitions.
[2020-11-25 06:18:27,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 759
[2020-11-25 06:18:27,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 759
[2020-11-25 06:18:27,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1628 states and 1771 transitions.
[2020-11-25 06:18:27,935 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:27,936 INFO  L728         BuchiCegarLoop]: Abstraction has 1628 states and 1771 transitions.
[2020-11-25 06:18:27,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1628 states and 1771 transitions.
[2020-11-25 06:18:27,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1628 to 1595.
[2020-11-25 06:18:27,970 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1595 states.
[2020-11-25 06:18:27,973 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1595 states to 1595 states and 1721 transitions.
[2020-11-25 06:18:27,973 INFO  L751         BuchiCegarLoop]: Abstraction has 1595 states and 1721 transitions.
[2020-11-25 06:18:27,973 INFO  L631         BuchiCegarLoop]: Abstraction has 1595 states and 1721 transitions.
[2020-11-25 06:18:27,973 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:18:27,973 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1595 states and 1721 transitions.
[2020-11-25 06:18:27,977 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:18:27,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:27,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:27,978 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:27,978 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND TRUE   !(_to_s167 != null)
[L1185]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND TRUE   !(_to_s167 != null)
[L1185]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:27,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:27,983 INFO  L82        PathProgramCache]: Analyzing trace with hash -1581383688, now seen corresponding path program 1 times
[2020-11-25 06:18:27,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:27,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:28,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:28,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:28,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:18:28,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:28,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:18:28,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:18:28,008 INFO  L87              Difference]: Start difference. First operand 1595 states and 1721 transitions. cyclomatic complexity: 130 Second operand 7 states.
[2020-11-25 06:18:28,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:28,031 INFO  L93              Difference]: Finished difference Result 1642 states and 1771 transitions.
[2020-11-25 06:18:28,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:18:28,032 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1642 states and 1771 transitions.
[2020-11-25 06:18:28,035 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:18:28,040 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1642 states to 1634 states and 1763 transitions.
[2020-11-25 06:18:28,040 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 761
[2020-11-25 06:18:28,040 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 761
[2020-11-25 06:18:28,040 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1634 states and 1763 transitions.
[2020-11-25 06:18:28,041 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:28,041 INFO  L728         BuchiCegarLoop]: Abstraction has 1634 states and 1763 transitions.
[2020-11-25 06:18:28,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1634 states and 1763 transitions.
[2020-11-25 06:18:28,054 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1634 to 1625.
[2020-11-25 06:18:28,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1625 states.
[2020-11-25 06:18:28,056 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1625 states to 1625 states and 1754 transitions.
[2020-11-25 06:18:28,056 INFO  L751         BuchiCegarLoop]: Abstraction has 1625 states and 1754 transitions.
[2020-11-25 06:18:28,056 INFO  L631         BuchiCegarLoop]: Abstraction has 1625 states and 1754 transitions.
[2020-11-25 06:18:28,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:18:28,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1625 states and 1754 transitions.
[2020-11-25 06:18:28,059 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:18:28,059 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:28,059 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:28,060 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:28,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND FALSE  !(!(_to_s167 != null))
[L1188]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s167] >= _value_s167)
[L1189]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND FALSE  !(!(_to_s167 != null))
[L1188]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s167] >= _value_s167)
[L1189]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:28,063 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,063 INFO  L82        PathProgramCache]: Analyzing trace with hash -2005002130, now seen corresponding path program 1 times
[2020-11-25 06:18:28,064 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:28,090 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:28,090 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:28,091 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:18:28,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:18:28,091 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:18:28,091 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:18:28,091 INFO  L87              Difference]: Start difference. First operand 1625 states and 1754 transitions. cyclomatic complexity: 133 Second operand 7 states.
[2020-11-25 06:18:28,315 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:28,315 INFO  L93              Difference]: Finished difference Result 1723 states and 1873 transitions.
[2020-11-25 06:18:28,315 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 06:18:28,315 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1723 states and 1873 transitions.
[2020-11-25 06:18:28,320 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 06:18:28,324 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1723 states to 1723 states and 1873 transitions.
[2020-11-25 06:18:28,324 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 807
[2020-11-25 06:18:28,325 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 807
[2020-11-25 06:18:28,325 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1723 states and 1873 transitions.
[2020-11-25 06:18:28,326 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:28,326 INFO  L728         BuchiCegarLoop]: Abstraction has 1723 states and 1873 transitions.
[2020-11-25 06:18:28,327 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1723 states and 1873 transitions.
[2020-11-25 06:18:28,339 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1723 to 1651.
[2020-11-25 06:18:28,339 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1651 states.
[2020-11-25 06:18:28,341 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1651 states to 1651 states and 1781 transitions.
[2020-11-25 06:18:28,341 INFO  L751         BuchiCegarLoop]: Abstraction has 1651 states and 1781 transitions.
[2020-11-25 06:18:28,341 INFO  L631         BuchiCegarLoop]: Abstraction has 1651 states and 1781 transitions.
[2020-11-25 06:18:28,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:18:28,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1651 states and 1781 transitions.
[2020-11-25 06:18:28,344 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:18:28,344 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:28,344 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:28,345 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:28,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND FALSE  !(!(_to_s167 != null))
[L1188]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s167] >= _value_s167))
[L1192]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s167])
[L1193]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND TRUE   choice == 12
[L2088]              gas := gas - 21000;
[L2089]  COND FALSE  !(gas >= 0)
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:28,347 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,348 INFO  L82        PathProgramCache]: Analyzing trace with hash 1339168668, now seen corresponding path program 1 times
[2020-11-25 06:18:28,348 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,365 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,411 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,411 INFO  L82        PathProgramCache]: Analyzing trace with hash -299506839, now seen corresponding path program 1 times
[2020-11-25 06:18:28,412 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:18:28,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:18:28,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:18:28,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:18:28,419 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 06:18:28,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:18:28,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:18:28,420 INFO  L87              Difference]: Start difference. First operand 1651 states and 1781 transitions. cyclomatic complexity: 134 Second operand 4 states.
[2020-11-25 06:18:28,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:18:28,556 INFO  L93              Difference]: Finished difference Result 1776 states and 1913 transitions.
[2020-11-25 06:18:28,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:18:28,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1776 states and 1913 transitions.
[2020-11-25 06:18:28,561 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 06:18:28,566 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1776 states to 1776 states and 1913 transitions.
[2020-11-25 06:18:28,566 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 830
[2020-11-25 06:18:28,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 830
[2020-11-25 06:18:28,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1776 states and 1913 transitions.
[2020-11-25 06:18:28,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:18:28,567 INFO  L728         BuchiCegarLoop]: Abstraction has 1776 states and 1913 transitions.
[2020-11-25 06:18:28,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1776 states and 1913 transitions.
[2020-11-25 06:18:28,579 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1776 to 1651.
[2020-11-25 06:18:28,579 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1651 states.
[2020-11-25 06:18:28,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1651 states to 1651 states and 1757 transitions.
[2020-11-25 06:18:28,580 INFO  L751         BuchiCegarLoop]: Abstraction has 1651 states and 1757 transitions.
[2020-11-25 06:18:28,580 INFO  L631         BuchiCegarLoop]: Abstraction has 1651 states and 1757 transitions.
[2020-11-25 06:18:28,580 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:18:28,581 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1651 states and 1757 transitions.
[2020-11-25 06:18:28,584 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:18:28,584 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:18:28,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:18:28,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:18:28,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L2176]              assume null == 0;
[L2177]  CALL        call this := FreshRefGenerator__success();
[L1075]              havoc newRef;
[L1076]              assume Alloc[newRef] == false;
[L1077]              Alloc[newRef] := true;
[L1078]              assume newRef != null;
[L2177]  RET         call this := FreshRefGenerator__success();
[L2178]              assume now >= 0;
[L2179]              assume DType[this] == TokenERC20;
[L2180]              assume msgvalue_MSG == 0;
[L2181]              gas := gas - 53000;
[L2182]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L2183]              assume !revert && gas >= 0;
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND TRUE   choice == 6
[L2124]              gas := gas - 21000;
[L2125]  COND TRUE   gas >= 0
[L2126]              assume _value_s186 >= 0 && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              assume msgvalue_MSG == 0;
[L2128]  CALL        call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND FALSE  !(!(_to_s167 != null))
[L1188]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s167] >= _value_s167))
[L1192]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s167])
[L1193]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L2186]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L2186]  CALL        call CorralChoice_TokenERC20(this);
[L2043]              havoc msgsender_MSG;
[L2044]              havoc msgvalue_MSG;
[L2045]              havoc choice;
[L2046]              havoc __ret_0_name;
[L2047]              havoc __ret_0_symbol;
[L2048]              havoc __ret_0_decimals;
[L2049]              havoc __ret_0_totalSupply;
[L2050]              havoc arg386_s0;
[L2051]              havoc __ret_0_balanceOf;
[L2052]              havoc arg387_s0;
[L2053]              havoc arg388_s0;
[L2054]              havoc __ret_0_allowance;
[L2055]              havoc initialSupply_s89;
[L2056]              havoc tokenName_s89;
[L2057]              havoc tokenSymbol_s89;
[L2058]              havoc _to_s186;
[L2059]              havoc _value_s186;
[L2060]              havoc success_s186;
[L2061]              havoc _from_s226;
[L2062]              havoc _to_s226;
[L2063]              havoc _value_s226;
[L2064]              havoc success_s226;
[L2065]              havoc _spender_s254;
[L2066]              havoc _value_s254;
[L2067]              havoc success_s254;
[L2068]              havoc _spender_s292;
[L2069]              havoc _value_s292;
[L2070]              havoc _extraData_s292;
[L2071]              havoc success_s292;
[L2072]              havoc _value_s328;
[L2073]              havoc success_s328;
[L2074]              havoc _from_s383;
[L2075]              havoc _value_s383;
[L2076]              havoc success_s383;
[L2077]              havoc tmpNow;
[L2078]              havoc gas;
[L2079]              assume gas > 4000000 && gas <= 8000000;
[L2080]              tmpNow := now;
[L2081]              havoc now;
[L2082]              assume now > tmpNow;
[L2083]              assume msgsender_MSG != null;
[L2084]              assume DType[msgsender_MSG] != tokenRecipient;
[L2085]              assume DType[msgsender_MSG] != TokenERC20;
[L2086]              Alloc[msgsender_MSG] := true;
[L2087]  COND FALSE  !(choice == 12)
[L2093]  COND FALSE  !(choice == 11)
[L2099]  COND FALSE  !(choice == 10)
[L2105]  COND FALSE  !(choice == 9)
[L2111]  COND FALSE  !(choice == 8)
[L2117]  COND FALSE  !(choice == 7)
[L2123]  COND FALSE  !(choice == 6)
[L2130]  COND FALSE  !(choice == 5)
[L2137]  COND FALSE  !(choice == 4)
[L2144]  COND FALSE  !(choice == 3)
[L2151]  COND FALSE  !(choice == 2)
[L2158]  COND FALSE  !(choice == 1)
[L2186]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:18:28,586 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 1339168668, now seen corresponding path program 2 times
[2020-11-25 06:18:28,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,614 INFO  L82        PathProgramCache]: Analyzing trace with hash 551149705, now seen corresponding path program 1 times
[2020-11-25 06:18:28,615 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,616 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,618 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:18:28,622 INFO  L82        PathProgramCache]: Analyzing trace with hash 538754766, now seen corresponding path program 1 times
[2020-11-25 06:18:28,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:18:28,634 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:28,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2503 to 5003
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 06:18:29,572 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification that was a NOOP. DAG size: 173
[2020-11-25 06:18:29,911 WARN  L188               SmtUtils]: Spent 337.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 202
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 06:18:30,112 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 254
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 06:18:30,750 WARN  L188               SmtUtils]: Spent 546.00 ms on a formula simplification. DAG size of input: 379 DAG size of output: 371
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 06:18:30,951 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 243
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 06:18:31,205 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 244
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 06:18:31,315 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 06:18:31,321 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:18:31 BasicIcfg
[2020-11-25 06:18:31,321 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:18:31,322 INFO  L168              Benchmark]: Toolchain (without parser) took 8901.35 ms. Allocated memory was 1.0 GB in the beginning and 1.7 GB in the end (delta: 666.4 MB). Free memory was 940.6 MB in the beginning and 946.5 MB in the end (delta: -5.9 MB). Peak memory consumption was 850.3 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,322 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,322 INFO  L168              Benchmark]: Boogie Preprocessor took 84.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,323 INFO  L168              Benchmark]: UtopiaSpecLang took 56.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,323 INFO  L168              Benchmark]: Boogie Printer took 10.74 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,323 INFO  L168              Benchmark]: RCFGBuilder took 614.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,323 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.72 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,324 INFO  L168              Benchmark]: BÃ¼chi Program Product took 987.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 861.8 MB in the beginning and 883.0 MB in the end (delta: -21.1 MB). Peak memory consumption was 146.5 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,324 INFO  L168              Benchmark]: BlockEncodingV2 took 71.34 ms. Allocated memory is still 1.1 GB. Free memory was 883.0 MB in the beginning and 844.7 MB in the end (delta: 38.3 MB). Peak memory consumption was 38.3 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,324 INFO  L168              Benchmark]: BuchiAutomizer took 7035.29 ms. Allocated memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: 606.6 MB). Free memory was 844.7 MB in the beginning and 946.5 MB in the end (delta: -101.8 MB). Peak memory consumption was 694.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:18:31,327 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1898 locations, 3179 edges
  - StatisticsResult: Encoded RCFG
    1878 locations, 3130 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 84.35 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.74 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 614.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.72 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 861.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 987.40 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 861.8 MB in the beginning and 883.0 MB in the end (delta: -21.1 MB). Peak memory consumption was 146.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 71.34 ms. Allocated memory is still 1.1 GB. Free memory was 883.0 MB in the beginning and 844.7 MB in the end (delta: 38.3 MB). Peak memory consumption was 38.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7035.29 ms. Allocated memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: 606.6 MB). Free memory was 844.7 MB in the beginning and 946.5 MB in the end (delta: -101.8 MB). Peak memory consumption was 694.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    816 locations, 988 edges
  - StatisticsResult: BuchiProgram size
    1898 locations, 3179 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 1651 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.9s and 8 iterations.  TraceHistogramMax:1. Analysis of lassos took 3.8s. Construction of modules took 1.8s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 7 MinimizatonAttempts, 650 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1651 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11626 SDtfs, 6893 SDslu, 32586 SDs, 0 SdLazy, 16332 SolverSat, 1125 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.8s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(231584178474632390847141970017375815706539969331281128078915168015826259279871) = (new TokenERC20)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279876, initialSupply : 231584178474632390847141970017375815706539969331281128078915168015826259279881, tokenName : 231584178474632390847141970017375815706539969331281128078915168015826259279875, tokenSymbol : 231584178474632390847141970017375815706539969331281128078915168015826259279879});
[L139]               havoc __exception;
[L140]               revert := false;
[L141]   COND FALSE  !(__exception)
[L162]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1173]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1141]              assume msgsender_MSG != null;
[L1142]              Balance[this] := 0;
[L1143]              name_TokenERC20[this] := -506417957;
[L1144]              symbol_TokenERC20[this] := -506417957;
[L1145]              decimals_TokenERC20[this] := 18;
[L1146]              totalSupply_TokenERC20[this] := 0;
[L1147]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1148]              sum_balanceOf0[this] := 0;
[L1149]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1150]              sum_allowance1[this] := 0;
[L1152]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1153]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s89, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1154]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L1155]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L1156]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L1157]              name_TokenERC20[this] := tokenName_s89;
[L1158]              symbol_TokenERC20[this] := tokenSymbol_s89;
[L1173]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L1174]  COND FALSE  !(revert)
[L162]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
[L163]               assume !revert && gas >= 0;
[L2182]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s89, tokenName_s89, tokenSymbol_s89);
TokenERC20(231584178474632390847141970017375815706539969331281128078915168015826259279871).transfer~address~uint256.gas(3979001)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279876, _to : 231584178474632390847141970017375815706539969331281128078915168015826259279876, _value : 2});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s186 && _value_s186 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s186 >= 0) && _value_s186 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s186] >= 0) && balanceOf_TokenERC20[this][_to_s186] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L195]               havoc __exception;
[L196]               revert := false;
[L197]   COND TRUE   __exception
[L198]               __tmp__Balance := Balance;
[L199]               __tmp__DType := DType;
[L200]               __tmp__Alloc := Alloc;
[L201]               __tmp__balance_ADDR := balance_ADDR;
[L202]               __tmp__M_Ref_int := M_Ref_int;
[L203]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L204]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L205]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L206]               __tmp__sum_allowance1 := sum_allowance1;
[L207]               __tmp__Length := Length;
[L208]               __tmp__now := now;
[L209]               __tmp__name_TokenERC20 := name_TokenERC20;
[L210]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L211]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L212]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L213]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L214]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L215]   CALL        call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L1235]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1183]              __var_2 := null;
[L1184]  COND FALSE  !(!(_to_s167 != null))
[L1188]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s167] >= _value_s167))
[L1192]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s167] + _value_s167) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s167])
[L1193]              revert := true;
[L1235]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s186, _value_s186);
[L1236]  COND TRUE   revert
[L215]   RET         call success_s186 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);
[L216]               assume revert || gas < 0;
[L2128]  RET         call success_s186 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s186, _value_s186);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
