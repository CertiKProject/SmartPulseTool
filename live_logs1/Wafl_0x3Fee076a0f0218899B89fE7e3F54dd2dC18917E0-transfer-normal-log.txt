This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:42:42,244 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:42:42,245 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:42:42,256 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:42:42,256 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:42:42,257 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:42:42,258 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:42:42,259 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:42:42,261 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:42:42,261 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:42:42,262 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:42:42,262 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:42:42,263 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:42:42,263 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:42:42,264 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:42:42,265 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:42:42,266 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:42:42,267 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:42:42,268 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:42:42,269 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:42:42,270 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:42:42,271 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:42:42,273 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:42:42,273 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:42:42,273 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:42:42,274 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:42:42,274 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:42:42,274 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:42:42,275 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:42:42,275 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:42:42,276 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:42:42,276 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:42:42,277 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:42:42,277 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:42:42,278 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:42:42,278 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:42:42,279 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:42:42,279 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:42:42,279 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:42:42,280 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:42:42,280 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:42:42,280 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:42:42,288 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:42:42,288 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:42:42,289 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:42:42,289 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:42:42,290 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:42:42,290 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:42:42,290 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:42:42,291 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:42:42,291 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:42:42,292 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:42:42,292 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:42:42,292 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:42:42,315 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:42:42,329 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:42:42,332 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:42:42,333 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:42:42,333 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:42:42,334 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl
[2020-11-25 08:42:42,334 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl'
[2020-11-25 08:42:42,456 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:42:42,457 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:42:42,457 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:42:42,457 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:42:42,457 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:42:42,474 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,476 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,517 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,518 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,548 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,570 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,586 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,604 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:42:42,605 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:42:42,605 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:42:42,606 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:42:42,609 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/1) ...
[2020-11-25 08:42:42,627 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:42:42,631 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:42:42,637 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:42:42,648 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s1040 ) && msg.sender!=to_s1040 ) && value_s1040<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][to_s1040] + value_s1040 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1040>=0 ) && value_s1040<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1040]>=0 ) && _balances_ERC20[this][to_s1040]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:42:42,652 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - value_s1040 ) ) && _balances_ERC20[this][to_s1040]==( ( old(_balances_ERC20[this][to_s1040]) ) + value_s1040 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 08:42:42,663 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:42:42,664 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:42:42,685 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:42:42 PropertyContainer
[2020-11-25 08:42:42,686 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:42:42,686 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:42:42,686 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:42:42,686 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:42:42,687 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/2) ...
[2020-11-25 08:42:42,687 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:42:42,687 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:42:42,712 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:42:42" (2/2) ...
[2020-11-25 08:42:42,713 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:42:42,713 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:42:42,713 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:42:42,713 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:42:42,714 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/2) ...
[2020-11-25 08:42:42,772 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:42:42,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,773 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:42:42,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:42:42,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:42:42,774 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:42:42,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:42:42,774 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:42:42,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:42:42,775 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:42:42,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:42:42,775 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:42:42,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:42:42,775 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:42:42,775 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:42:42,775 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:42:42,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:42:42,776 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:42:42,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:42:42,777 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:42:42,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:42:42,777 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:42:42,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:42:42,777 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:42:42,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:42:42,777 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:42:42,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:42:42,777 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:42:42,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:42:42,778 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:42:42,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:42:42,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:42:42,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:42:42,780 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:42:42,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:42:42,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:42:42,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:42:42,781 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:42:42,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:42:42,782 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:42:42,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:42:42,782 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:42:42,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:42:42,782 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:42:42,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:42:42,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:42:42,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,783 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:42:42,784 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:42:42,784 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:42:42,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:42:42,784 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:42:42,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:42:42,784 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:42:42,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:42:42,784 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:42:42,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:42:42,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:42:42,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:42:42,785 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:42:42,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:42:42,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:42:42,787 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:42:42,788 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:42:42,789 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:42:42,790 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:42:42,791 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:42:42,792 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,793 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:42:42,794 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:42:42,795 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:42:42,796 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:42:42,797 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:42:42,798 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:42:42,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:42:42,800 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:42:42,801 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:42:42,802 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:42:42,802 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:42:42,802 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:42:42,802 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:42:42,802 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:42:42,803 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:42:42,804 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:42:42,805 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,806 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:42:42,807 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:42:42,808 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:42:42,809 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:42:42,810 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,811 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:42:42,812 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:42:42,813 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:42:42,814 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:42:42,815 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:42:42,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:42:42,817 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:42:42,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:42:43,859 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:42:43,873 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:42:43,873 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:42:43,873 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:42:44,175 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:42:44,175 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:42:44,178 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:42:44 BoogieIcfgContainer
[2020-11-25 08:42:44,179 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:42:42" (2/2) ...
[2020-11-25 08:42:44,179 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:42:44,179 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@28ea86d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:42:44, skipping insertion in model container
[2020-11-25 08:42:44,179 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:42:44,179 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:42:44,179 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:42:44,181 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:42:44,181 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/3) ...
[2020-11-25 08:42:44,181 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@78927e16 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:42:44, skipping insertion in model container
[2020-11-25 08:42:44,181 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:42:42" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:42:44,215 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:42:44 NWAContainer
[2020-11-25 08:42:44,215 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:42:44,215 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:42:44,215 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:42:44,216 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:42:44,217 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:42:44" (3/4) ...
[2020-11-25 08:42:44,217 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@58370028 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:42:44, skipping insertion in model container
[2020-11-25 08:42:44,217 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:42:44" (4/4) ...
[2020-11-25 08:42:44,223 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:42:44,234 INFO  L110   BuchiProductObserver]: Initial RCFG 4157 locations, 6112 edges
[2020-11-25 08:42:44,234 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:42:44,250 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:42:47,794 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:42:47,808 INFO  L110   BuchiProductObserver]: BuchiProgram size 10764 locations, 20074 edges
[2020-11-25 08:42:47,809 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:42:47 BoogieIcfgContainer
[2020-11-25 08:42:47,809 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:42:47,809 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:42:47,809 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:42:47,811 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:42:47,811 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:42:47" (1/1) ...
[2020-11-25 08:42:48,007 INFO  L313           BlockEncoder]: Initial Icfg 10764 locations, 20074 edges
[2020-11-25 08:42:48,008 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:42:48,008 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:42:48,008 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:42:48,009 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:42:48,029 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 29 locations because of local infeasibility
[2020-11-25 08:42:48,047 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:42:48,069 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:42:48,076 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:42:48,082 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:42:48,083 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:42:48,087 INFO  L313           BlockEncoder]: Encoded RCFG 10570 locations, 19536 edges
[2020-11-25 08:42:48,088 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:42:48 BasicIcfg
[2020-11-25 08:42:48,088 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:42:48,088 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:42:48,088 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:42:48,090 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:42:48,090 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,090 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:42:42" (1/6) ...
[2020-11-25 08:42:48,092 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@366f2ca3 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:42:48, skipping insertion in model container
[2020-11-25 08:42:48,092 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,092 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:42:42" (2/6) ...
[2020-11-25 08:42:48,092 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@366f2ca3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:42:48, skipping insertion in model container
[2020-11-25 08:42:48,092 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,092 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:42:44" (3/6) ...
[2020-11-25 08:42:48,092 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@366f2ca3 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:42:48, skipping insertion in model container
[2020-11-25 08:42:48,092 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,092 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:42:44" (4/6) ...
[2020-11-25 08:42:48,093 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@366f2ca3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:42:48, skipping insertion in model container
[2020-11-25 08:42:48,093 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,093 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:42:47" (5/6) ...
[2020-11-25 08:42:48,093 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@366f2ca3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:42:48, skipping insertion in model container
[2020-11-25 08:42:48,093 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:42:48,093 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:42:48" (6/6) ...
[2020-11-25 08:42:48,094 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-normal.bpl_BEv2
[2020-11-25 08:42:48,120 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:42:48,121 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:42:48,121 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:42:48,121 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:42:48,121 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:42:48,121 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:42:48,121 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:42:48,121 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:42:48,121 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:42:48,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10570 states.
[2020-11-25 08:42:48,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:48,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:48,289 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:48,299 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:48,299 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:48,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:42:48,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10570 states.
[2020-11-25 08:42:48,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:48,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:48,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:48,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:48,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:48,443 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:48,443 INFO  L82        PathProgramCache]: Analyzing trace with hash 861170450, now seen corresponding path program 1 times
[2020-11-25 08:42:48,449 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:48,472 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:48,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:42:48,517 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:48,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:42:48,931 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:48,945 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:42:48,946 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:42:48,947 INFO  L87              Difference]: Start difference. First operand 10570 states. Second operand 3 states.
[2020-11-25 08:42:49,379 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:49,379 INFO  L93              Difference]: Finished difference Result 6108 states and 7520 transitions.
[2020-11-25 08:42:49,380 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:42:49,381 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6108 states and 7520 transitions.
[2020-11-25 08:42:49,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:49,452 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6108 states to 6108 states and 7520 transitions.
[2020-11-25 08:42:49,453 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:42:49,456 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1407
[2020-11-25 08:42:49,457 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6108 states and 7520 transitions.
[2020-11-25 08:42:49,474 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:49,474 INFO  L728         BuchiCegarLoop]: Abstraction has 6108 states and 7520 transitions.
[2020-11-25 08:42:49,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6108 states and 7520 transitions.
[2020-11-25 08:42:49,572 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6108 to 6108.
[2020-11-25 08:42:49,572 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6108 states.
[2020-11-25 08:42:49,583 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6108 states to 6108 states and 7520 transitions.
[2020-11-25 08:42:49,583 INFO  L751         BuchiCegarLoop]: Abstraction has 6108 states and 7520 transitions.
[2020-11-25 08:42:49,583 INFO  L631         BuchiCegarLoop]: Abstraction has 6108 states and 7520 transitions.
[2020-11-25 08:42:49,584 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:42:49,584 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6108 states and 7520 transitions.
[2020-11-25 08:42:49,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:49,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:49,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:49,597 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:49,597 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND FALSE  !(!!_paused_Pausable[this])
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND FALSE  !(!!_paused_Pausable[this])
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:49,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:49,602 INFO  L82        PathProgramCache]: Analyzing trace with hash 927570158, now seen corresponding path program 1 times
[2020-11-25 08:42:49,604 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:49,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:49,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:42:49,639 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:49,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:42:49,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:49,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:42:49,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:42:49,641 INFO  L87              Difference]: Start difference. First operand 6108 states and 7520 transitions. cyclomatic complexity: 1414 Second operand 3 states.
[2020-11-25 08:42:49,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:49,897 INFO  L93              Difference]: Finished difference Result 8316 states and 10247 transitions.
[2020-11-25 08:42:49,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:42:49,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8316 states and 10247 transitions.
[2020-11-25 08:42:49,921 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:42:49,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8316 states to 8316 states and 10247 transitions.
[2020-11-25 08:42:49,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2070
[2020-11-25 08:42:49,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2070
[2020-11-25 08:42:49,956 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8316 states and 10247 transitions.
[2020-11-25 08:42:49,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:49,966 INFO  L728         BuchiCegarLoop]: Abstraction has 8316 states and 10247 transitions.
[2020-11-25 08:42:49,973 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8316 states and 10247 transitions.
[2020-11-25 08:42:50,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8316 to 7330.
[2020-11-25 08:42:50,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7330 states.
[2020-11-25 08:42:50,065 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7330 states to 7330 states and 9053 transitions.
[2020-11-25 08:42:50,065 INFO  L751         BuchiCegarLoop]: Abstraction has 7330 states and 9053 transitions.
[2020-11-25 08:42:50,065 INFO  L631         BuchiCegarLoop]: Abstraction has 7330 states and 9053 transitions.
[2020-11-25 08:42:50,065 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:42:50,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7330 states and 9053 transitions.
[2020-11-25 08:42:50,076 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:50,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:50,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:50,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:50,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND TRUE   !(account_s834 != null)
[L5905]               revert := true;
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND TRUE   revert
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND TRUE   revert
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND TRUE   revert
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND TRUE   revert
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND TRUE   !!_paused_Pausable[this]
[L9505]               revert := true;
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND TRUE   !!_paused_Pausable[this]
[L9505]               revert := true;
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:50,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:50,083 INFO  L82        PathProgramCache]: Analyzing trace with hash -1565440596, now seen corresponding path program 1 times
[2020-11-25 08:42:50,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:50,094 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:50,152 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-25 08:42:50,152 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:50,152 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:42:50,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:50,153 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:42:50,153 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:42:50,153 INFO  L87              Difference]: Start difference. First operand 7330 states and 9053 transitions. cyclomatic complexity: 1725 Second operand 10 states.
[2020-11-25 08:42:50,302 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:50,302 INFO  L93              Difference]: Finished difference Result 7390 states and 9148 transitions.
[2020-11-25 08:42:50,302 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:42:50,302 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7390 states and 9148 transitions.
[2020-11-25 08:42:50,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:50,350 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7390 states to 7390 states and 9148 transitions.
[2020-11-25 08:42:50,350 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1807
[2020-11-25 08:42:50,351 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1807
[2020-11-25 08:42:50,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7390 states and 9148 transitions.
[2020-11-25 08:42:50,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:50,360 INFO  L728         BuchiCegarLoop]: Abstraction has 7390 states and 9148 transitions.
[2020-11-25 08:42:50,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7390 states and 9148 transitions.
[2020-11-25 08:42:50,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7390 to 7374.
[2020-11-25 08:42:50,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7374 states.
[2020-11-25 08:42:50,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7374 states to 7374 states and 9122 transitions.
[2020-11-25 08:42:50,448 INFO  L751         BuchiCegarLoop]: Abstraction has 7374 states and 9122 transitions.
[2020-11-25 08:42:50,448 INFO  L631         BuchiCegarLoop]: Abstraction has 7374 states and 9122 transitions.
[2020-11-25 08:42:50,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:42:50,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7374 states and 9122 transitions.
[2020-11-25 08:42:50,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:50,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:50,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:50,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:50,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND TRUE   !!__var_20
[L5854]               revert := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND TRUE   revert
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND TRUE   revert
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND TRUE   revert
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND TRUE   !!_paused_Pausable[this]
[L9505]               revert := true;
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND FALSE  !(__exception)
[L2189]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6381]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND TRUE   !!_paused_Pausable[this]
[L9505]               revert := true;
[L6381]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6382]   COND TRUE   revert
[L2189]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2190]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1040) && _balances_ERC20[this][to_s1040] == old(_balances_ERC20[this][to_s1040]) + value_s1040) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:50,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:50,466 INFO  L82        PathProgramCache]: Analyzing trace with hash 498345753, now seen corresponding path program 1 times
[2020-11-25 08:42:50,467 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:50,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:50,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 08:42:50,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:50,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:42:50,520 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:50,520 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:42:50,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:42:50,520 INFO  L87              Difference]: Start difference. First operand 7374 states and 9122 transitions. cyclomatic complexity: 1750 Second operand 3 states.
[2020-11-25 08:42:50,718 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:50,718 INFO  L93              Difference]: Finished difference Result 8336 states and 9754 transitions.
[2020-11-25 08:42:50,719 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:42:50,719 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8336 states and 9754 transitions.
[2020-11-25 08:42:50,746 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:42:50,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8336 states to 7470 states and 8687 transitions.
[2020-11-25 08:42:50,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1802
[2020-11-25 08:42:50,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1895
[2020-11-25 08:42:50,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7470 states and 8687 transitions.
[2020-11-25 08:42:50,785 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:50,785 INFO  L728         BuchiCegarLoop]: Abstraction has 7470 states and 8687 transitions.
[2020-11-25 08:42:50,791 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7470 states and 8687 transitions.
[2020-11-25 08:42:50,857 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7470 to 6632.
[2020-11-25 08:42:50,857 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6632 states.
[2020-11-25 08:42:50,867 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6632 states to 6632 states and 7641 transitions.
[2020-11-25 08:42:50,867 INFO  L751         BuchiCegarLoop]: Abstraction has 6632 states and 7641 transitions.
[2020-11-25 08:42:50,867 INFO  L631         BuchiCegarLoop]: Abstraction has 6632 states and 7641 transitions.
[2020-11-25 08:42:50,867 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:42:50,867 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6632 states and 7641 transitions.
[2020-11-25 08:42:50,894 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:50,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:50,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:50,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:50,903 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:50,911 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:50,911 INFO  L82        PathProgramCache]: Analyzing trace with hash -180417726, now seen corresponding path program 1 times
[2020-11-25 08:42:50,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:50,944 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:51,142 INFO  L134       CoverageAnalysis]: Checked inductivity of 1006 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 996 trivial. 0 not checked.
[2020-11-25 08:42:51,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:51,143 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:42:51,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:51,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:42:51,144 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:42:51,144 INFO  L87              Difference]: Start difference. First operand 6632 states and 7641 transitions. cyclomatic complexity: 1011 Second operand 7 states.
[2020-11-25 08:42:51,335 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:51,336 INFO  L93              Difference]: Finished difference Result 6655 states and 7667 transitions.
[2020-11-25 08:42:51,336 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:42:51,336 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6655 states and 7667 transitions.
[2020-11-25 08:42:51,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:51,367 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6655 states to 6638 states and 7647 transitions.
[2020-11-25 08:42:51,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:42:51,368 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:42:51,368 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6638 states and 7647 transitions.
[2020-11-25 08:42:51,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:51,374 INFO  L728         BuchiCegarLoop]: Abstraction has 6638 states and 7647 transitions.
[2020-11-25 08:42:51,380 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6638 states and 7647 transitions.
[2020-11-25 08:42:51,424 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6638 to 6638.
[2020-11-25 08:42:51,425 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6638 states.
[2020-11-25 08:42:51,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6638 states to 6638 states and 7647 transitions.
[2020-11-25 08:42:51,433 INFO  L751         BuchiCegarLoop]: Abstraction has 6638 states and 7647 transitions.
[2020-11-25 08:42:51,433 INFO  L631         BuchiCegarLoop]: Abstraction has 6638 states and 7647 transitions.
[2020-11-25 08:42:51,433 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:42:51,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6638 states and 7647 transitions.
[2020-11-25 08:42:51,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:51,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:51,442 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:51,444 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:51,444 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:51,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:51,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -13415673, now seen corresponding path program 1 times
[2020-11-25 08:42:51,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:51,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:51,674 INFO  L134       CoverageAnalysis]: Checked inductivity of 1019 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 983 trivial. 0 not checked.
[2020-11-25 08:42:51,674 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:51,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:42:51,675 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:51,675 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:42:51,675 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:42:51,675 INFO  L87              Difference]: Start difference. First operand 6638 states and 7647 transitions. cyclomatic complexity: 1011 Second operand 7 states.
[2020-11-25 08:42:51,853 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:51,853 INFO  L93              Difference]: Finished difference Result 6673 states and 7690 transitions.
[2020-11-25 08:42:51,853 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:42:51,854 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6673 states and 7690 transitions.
[2020-11-25 08:42:51,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:51,882 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6673 states to 6644 states and 7654 transitions.
[2020-11-25 08:42:51,882 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:42:51,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:42:51,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6644 states and 7654 transitions.
[2020-11-25 08:42:51,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:51,887 INFO  L728         BuchiCegarLoop]: Abstraction has 6644 states and 7654 transitions.
[2020-11-25 08:42:51,893 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6644 states and 7654 transitions.
[2020-11-25 08:42:51,931 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6644 to 6644.
[2020-11-25 08:42:51,932 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6644 states.
[2020-11-25 08:42:51,940 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6644 states to 6644 states and 7654 transitions.
[2020-11-25 08:42:51,940 INFO  L751         BuchiCegarLoop]: Abstraction has 6644 states and 7654 transitions.
[2020-11-25 08:42:51,940 INFO  L631         BuchiCegarLoop]: Abstraction has 6644 states and 7654 transitions.
[2020-11-25 08:42:51,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:42:51,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6644 states and 7654 transitions.
[2020-11-25 08:42:51,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:51,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:51,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:51,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:51,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:51,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:51,957 INFO  L82        PathProgramCache]: Analyzing trace with hash 277466196, now seen corresponding path program 1 times
[2020-11-25 08:42:51,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:51,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:52,212 INFO  L134       CoverageAnalysis]: Checked inductivity of 995 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 960 trivial. 0 not checked.
[2020-11-25 08:42:52,213 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:52,213 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:42:52,213 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:52,213 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:42:52,213 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:42:52,214 INFO  L87              Difference]: Start difference. First operand 6644 states and 7654 transitions. cyclomatic complexity: 1012 Second operand 8 states.
[2020-11-25 08:42:52,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:52,405 INFO  L93              Difference]: Finished difference Result 6677 states and 7694 transitions.
[2020-11-25 08:42:52,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:42:52,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6677 states and 7694 transitions.
[2020-11-25 08:42:52,417 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:52,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6677 states to 6651 states and 7662 transitions.
[2020-11-25 08:42:52,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:42:52,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:42:52,431 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6651 states and 7662 transitions.
[2020-11-25 08:42:52,434 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:52,434 INFO  L728         BuchiCegarLoop]: Abstraction has 6651 states and 7662 transitions.
[2020-11-25 08:42:52,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6651 states and 7662 transitions.
[2020-11-25 08:42:52,475 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6651 to 6651.
[2020-11-25 08:42:52,475 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6651 states.
[2020-11-25 08:42:52,482 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6651 states to 6651 states and 7662 transitions.
[2020-11-25 08:42:52,482 INFO  L751         BuchiCegarLoop]: Abstraction has 6651 states and 7662 transitions.
[2020-11-25 08:42:52,482 INFO  L631         BuchiCegarLoop]: Abstraction has 6651 states and 7662 transitions.
[2020-11-25 08:42:52,482 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:42:52,482 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6651 states and 7662 transitions.
[2020-11-25 08:42:52,490 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:52,490 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:52,490 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:52,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:52,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:52,498 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:52,498 INFO  L82        PathProgramCache]: Analyzing trace with hash -1958972521, now seen corresponding path program 1 times
[2020-11-25 08:42:52,499 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:52,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:52,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 993 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 975 trivial. 0 not checked.
[2020-11-25 08:42:52,710 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:52,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:42:52,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:52,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:42:52,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:42:52,711 INFO  L87              Difference]: Start difference. First operand 6651 states and 7662 transitions. cyclomatic complexity: 1013 Second operand 8 states.
[2020-11-25 08:42:52,909 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:52,909 INFO  L93              Difference]: Finished difference Result 6684 states and 7702 transitions.
[2020-11-25 08:42:52,910 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:42:52,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6684 states and 7702 transitions.
[2020-11-25 08:42:52,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:52,957 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6684 states to 6651 states and 7661 transitions.
[2020-11-25 08:42:52,957 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:42:52,958 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:42:52,958 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6651 states and 7661 transitions.
[2020-11-25 08:42:52,962 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:52,962 INFO  L728         BuchiCegarLoop]: Abstraction has 6651 states and 7661 transitions.
[2020-11-25 08:42:52,968 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6651 states and 7661 transitions.
[2020-11-25 08:42:53,015 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6651 to 6651.
[2020-11-25 08:42:53,015 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6651 states.
[2020-11-25 08:42:53,025 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6651 states to 6651 states and 7661 transitions.
[2020-11-25 08:42:53,025 INFO  L751         BuchiCegarLoop]: Abstraction has 6651 states and 7661 transitions.
[2020-11-25 08:42:53,025 INFO  L631         BuchiCegarLoop]: Abstraction has 6651 states and 7661 transitions.
[2020-11-25 08:42:53,025 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:42:53,026 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6651 states and 7661 transitions.
[2020-11-25 08:42:53,036 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:53,036 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:53,036 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:53,039 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:53,039 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:53,047 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:53,047 INFO  L82        PathProgramCache]: Analyzing trace with hash -1915896871, now seen corresponding path program 1 times
[2020-11-25 08:42:53,048 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:53,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:53,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 08:42:53,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:53,276 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:42:53,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:53,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:42:53,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:42:53,277 INFO  L87              Difference]: Start difference. First operand 6651 states and 7661 transitions. cyclomatic complexity: 1012 Second operand 8 states.
[2020-11-25 08:42:53,468 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:53,468 INFO  L93              Difference]: Finished difference Result 6672 states and 7684 transitions.
[2020-11-25 08:42:53,468 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:42:53,468 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6672 states and 7684 transitions.
[2020-11-25 08:42:53,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:53,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6672 states to 6635 states and 7641 transitions.
[2020-11-25 08:42:53,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 08:42:53,497 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 08:42:53,497 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6635 states and 7641 transitions.
[2020-11-25 08:42:53,500 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:53,500 INFO  L728         BuchiCegarLoop]: Abstraction has 6635 states and 7641 transitions.
[2020-11-25 08:42:53,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6635 states and 7641 transitions.
[2020-11-25 08:42:53,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6635 to 6635.
[2020-11-25 08:42:53,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6635 states.
[2020-11-25 08:42:53,548 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6635 states to 6635 states and 7641 transitions.
[2020-11-25 08:42:53,549 INFO  L751         BuchiCegarLoop]: Abstraction has 6635 states and 7641 transitions.
[2020-11-25 08:42:53,549 INFO  L631         BuchiCegarLoop]: Abstraction has 6635 states and 7641 transitions.
[2020-11-25 08:42:53,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:42:53,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6635 states and 7641 transitions.
[2020-11-25 08:42:53,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:42:53,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:53,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:53,560 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:53,560 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5931]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5931]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5932]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5931]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5931]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5932]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5931]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5931]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5932]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5931]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5931]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5932]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND TRUE   __tmp__DType[this] == Wafl
[L6616]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6616]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6617]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND TRUE   __tmp__DType[this] == Wafl
[L6616]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6616]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6617]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:53,566 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:53,566 INFO  L82        PathProgramCache]: Analyzing trace with hash -2082838333, now seen corresponding path program 1 times
[2020-11-25 08:42:53,567 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:53,582 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:53,812 INFO  L134       CoverageAnalysis]: Checked inductivity of 968 backedges. 9 proven. 25 refuted. 0 times theorem prover too weak. 934 trivial. 0 not checked.
[2020-11-25 08:42:53,812 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:53,812 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 08:42:53,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:53,813 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:42:53,813 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:42:53,813 INFO  L87              Difference]: Start difference. First operand 6635 states and 7641 transitions. cyclomatic complexity: 1008 Second operand 9 states.
[2020-11-25 08:42:55,820 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:55,820 INFO  L93              Difference]: Finished difference Result 9300 states and 10835 transitions.
[2020-11-25 08:42:55,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:42:55,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9300 states and 10835 transitions.
[2020-11-25 08:42:55,840 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:55,858 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9300 states to 9258 states and 10782 transitions.
[2020-11-25 08:42:55,858 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2369
[2020-11-25 08:42:55,859 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2369
[2020-11-25 08:42:55,860 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9258 states and 10782 transitions.
[2020-11-25 08:42:55,864 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:55,864 INFO  L728         BuchiCegarLoop]: Abstraction has 9258 states and 10782 transitions.
[2020-11-25 08:42:55,870 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9258 states and 10782 transitions.
[2020-11-25 08:42:55,913 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9258 to 9150.
[2020-11-25 08:42:55,913 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9150 states.
[2020-11-25 08:42:55,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9150 states to 9150 states and 10674 transitions.
[2020-11-25 08:42:55,923 INFO  L751         BuchiCegarLoop]: Abstraction has 9150 states and 10674 transitions.
[2020-11-25 08:42:55,923 INFO  L631         BuchiCegarLoop]: Abstraction has 9150 states and 10674 transitions.
[2020-11-25 08:42:55,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:42:55,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9150 states and 10674 transitions.
[2020-11-25 08:42:55,934 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:55,934 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:55,934 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:55,936 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:55,936 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:55,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:55,941 INFO  L82        PathProgramCache]: Analyzing trace with hash 915930990, now seen corresponding path program 1 times
[2020-11-25 08:42:55,942 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:55,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:56,155 INFO  L134       CoverageAnalysis]: Checked inductivity of 993 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 968 trivial. 0 not checked.
[2020-11-25 08:42:56,155 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:56,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:42:56,156 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:56,156 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:42:56,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:42:56,156 INFO  L87              Difference]: Start difference. First operand 9150 states and 10674 transitions. cyclomatic complexity: 1528 Second operand 9 states.
[2020-11-25 08:42:56,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:56,392 INFO  L93              Difference]: Finished difference Result 9193 states and 10723 transitions.
[2020-11-25 08:42:56,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:42:56,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9193 states and 10723 transitions.
[2020-11-25 08:42:56,409 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:56,427 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9193 states to 9146 states and 10668 transitions.
[2020-11-25 08:42:56,427 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2347
[2020-11-25 08:42:56,428 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2347
[2020-11-25 08:42:56,428 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9146 states and 10668 transitions.
[2020-11-25 08:42:56,433 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:56,433 INFO  L728         BuchiCegarLoop]: Abstraction has 9146 states and 10668 transitions.
[2020-11-25 08:42:56,438 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9146 states and 10668 transitions.
[2020-11-25 08:42:56,480 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9146 to 9146.
[2020-11-25 08:42:56,480 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9146 states.
[2020-11-25 08:42:56,490 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9146 states to 9146 states and 10668 transitions.
[2020-11-25 08:42:56,490 INFO  L751         BuchiCegarLoop]: Abstraction has 9146 states and 10668 transitions.
[2020-11-25 08:42:56,490 INFO  L631         BuchiCegarLoop]: Abstraction has 9146 states and 10668 transitions.
[2020-11-25 08:42:56,490 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:42:56,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9146 states and 10668 transitions.
[2020-11-25 08:42:56,500 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:56,500 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:56,500 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:56,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:56,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6621]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6621]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6622]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6621]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6621]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6622]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:56,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:56,507 INFO  L82        PathProgramCache]: Analyzing trace with hash -1824385669, now seen corresponding path program 1 times
[2020-11-25 08:42:56,507 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:56,518 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:56,763 INFO  L134       CoverageAnalysis]: Checked inductivity of 981 backedges. 9 proven. 34 refuted. 0 times theorem prover too weak. 938 trivial. 0 not checked.
[2020-11-25 08:42:56,764 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:42:56,764 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:42:56,765 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:56,765 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:42:56,765 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:42:56,765 INFO  L87              Difference]: Start difference. First operand 9146 states and 10668 transitions. cyclomatic complexity: 1526 Second operand 10 states.
[2020-11-25 08:42:58,716 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:58,716 INFO  L93              Difference]: Finished difference Result 9298 states and 10831 transitions.
[2020-11-25 08:42:58,716 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 08:42:58,717 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9298 states and 10831 transitions.
[2020-11-25 08:42:58,737 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:58,754 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9298 states to 9269 states and 10793 transitions.
[2020-11-25 08:42:58,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2369
[2020-11-25 08:42:58,755 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2369
[2020-11-25 08:42:58,755 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9269 states and 10793 transitions.
[2020-11-25 08:42:58,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:58,760 INFO  L728         BuchiCegarLoop]: Abstraction has 9269 states and 10793 transitions.
[2020-11-25 08:42:58,765 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9269 states and 10793 transitions.
[2020-11-25 08:42:58,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9269 to 9146.
[2020-11-25 08:42:58,803 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9146 states.
[2020-11-25 08:42:58,812 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9146 states to 9146 states and 10668 transitions.
[2020-11-25 08:42:58,812 INFO  L751         BuchiCegarLoop]: Abstraction has 9146 states and 10668 transitions.
[2020-11-25 08:42:58,812 INFO  L631         BuchiCegarLoop]: Abstraction has 9146 states and 10668 transitions.
[2020-11-25 08:42:58,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:42:58,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9146 states and 10668 transitions.
[2020-11-25 08:42:58,822 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:58,822 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:58,822 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:58,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:58,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:58,828 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:58,828 INFO  L82        PathProgramCache]: Analyzing trace with hash 169685226, now seen corresponding path program 1 times
[2020-11-25 08:42:58,829 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:58,842 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:59,011 INFO  L134       CoverageAnalysis]: Checked inductivity of 993 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 968 trivial. 0 not checked.
[2020-11-25 08:42:59,012 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:59,012 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:42:59,012 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:59,012 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:42:59,012 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:42:59,013 INFO  L87              Difference]: Start difference. First operand 9146 states and 10668 transitions. cyclomatic complexity: 1526 Second operand 9 states.
[2020-11-25 08:42:59,266 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:42:59,266 INFO  L93              Difference]: Finished difference Result 9176 states and 10703 transitions.
[2020-11-25 08:42:59,266 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:42:59,266 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9176 states and 10703 transitions.
[2020-11-25 08:42:59,284 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:59,301 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9176 states to 9122 states and 10639 transitions.
[2020-11-25 08:42:59,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2347
[2020-11-25 08:42:59,302 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2347
[2020-11-25 08:42:59,303 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9122 states and 10639 transitions.
[2020-11-25 08:42:59,307 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:42:59,307 INFO  L728         BuchiCegarLoop]: Abstraction has 9122 states and 10639 transitions.
[2020-11-25 08:42:59,312 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9122 states and 10639 transitions.
[2020-11-25 08:42:59,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9122 to 9122.
[2020-11-25 08:42:59,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9122 states.
[2020-11-25 08:42:59,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9122 states to 9122 states and 10639 transitions.
[2020-11-25 08:42:59,396 INFO  L751         BuchiCegarLoop]: Abstraction has 9122 states and 10639 transitions.
[2020-11-25 08:42:59,396 INFO  L631         BuchiCegarLoop]: Abstraction has 9122 states and 10639 transitions.
[2020-11-25 08:42:59,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:42:59,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9122 states and 10639 transitions.
[2020-11-25 08:42:59,405 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:42:59,405 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:42:59,405 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:42:59,406 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:42:59,407 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:42:59,425 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:42:59,425 INFO  L82        PathProgramCache]: Analyzing trace with hash -1286006574, now seen corresponding path program 1 times
[2020-11-25 08:42:59,426 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:42:59,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:42:59,630 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 08:42:59,630 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:42:59,630 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 08:42:59,630 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:42:59,630 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 08:42:59,631 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 08:42:59,631 INFO  L87              Difference]: Start difference. First operand 9122 states and 10639 transitions. cyclomatic complexity: 1521 Second operand 14 states.
[2020-11-25 08:43:07,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:07,531 INFO  L93              Difference]: Finished difference Result 13094 states and 15218 transitions.
[2020-11-25 08:43:07,531 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 08:43:07,531 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13094 states and 15218 transitions.
[2020-11-25 08:43:07,558 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-11-25 08:43:07,587 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13094 states to 13050 states and 15166 transitions.
[2020-11-25 08:43:07,587 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3290
[2020-11-25 08:43:07,588 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3290
[2020-11-25 08:43:07,588 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13050 states and 15166 transitions.
[2020-11-25 08:43:07,596 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:07,596 INFO  L728         BuchiCegarLoop]: Abstraction has 13050 states and 15166 transitions.
[2020-11-25 08:43:07,601 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13050 states and 15166 transitions.
[2020-11-25 08:43:07,676 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13050 to 11767.
[2020-11-25 08:43:07,676 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11767 states.
[2020-11-25 08:43:07,697 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11767 states to 11767 states and 13861 transitions.
[2020-11-25 08:43:07,697 INFO  L751         BuchiCegarLoop]: Abstraction has 11767 states and 13861 transitions.
[2020-11-25 08:43:07,697 INFO  L631         BuchiCegarLoop]: Abstraction has 11767 states and 13861 transitions.
[2020-11-25 08:43:07,698 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:43:07,698 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11767 states and 13861 transitions.
[2020-11-25 08:43:07,714 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 08:43:07,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:07,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:07,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:07,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:07,720 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:07,721 INFO  L82        PathProgramCache]: Analyzing trace with hash 1642977719, now seen corresponding path program 1 times
[2020-11-25 08:43:07,721 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:07,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:07,902 INFO  L134       CoverageAnalysis]: Checked inductivity of 964 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:43:07,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:07,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:43:07,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:07,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:43:07,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:43:07,903 INFO  L87              Difference]: Start difference. First operand 11767 states and 13861 transitions. cyclomatic complexity: 2102 Second operand 4 states.
[2020-11-25 08:43:08,366 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:08,366 INFO  L93              Difference]: Finished difference Result 14593 states and 17851 transitions.
[2020-11-25 08:43:08,366 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:43:08,366 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14593 states and 17851 transitions.
[2020-11-25 08:43:08,407 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 48
[2020-11-25 08:43:08,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14593 states to 14161 states and 17390 transitions.
[2020-11-25 08:43:08,449 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3509
[2020-11-25 08:43:08,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3509
[2020-11-25 08:43:08,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14161 states and 17390 transitions.
[2020-11-25 08:43:08,460 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:08,460 INFO  L728         BuchiCegarLoop]: Abstraction has 14161 states and 17390 transitions.
[2020-11-25 08:43:08,466 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14161 states and 17390 transitions.
[2020-11-25 08:43:08,567 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14161 to 12495.
[2020-11-25 08:43:08,567 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12495 states.
[2020-11-25 08:43:08,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12495 states to 12495 states and 14998 transitions.
[2020-11-25 08:43:08,586 INFO  L751         BuchiCegarLoop]: Abstraction has 12495 states and 14998 transitions.
[2020-11-25 08:43:08,586 INFO  L631         BuchiCegarLoop]: Abstraction has 12495 states and 14998 transitions.
[2020-11-25 08:43:08,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 08:43:08,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12495 states and 14998 transitions.
[2020-11-25 08:43:08,604 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 08:43:08,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:08,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:08,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:08,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:08,610 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:08,610 INFO  L82        PathProgramCache]: Analyzing trace with hash -1003839374, now seen corresponding path program 1 times
[2020-11-25 08:43:08,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:08,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:08,852 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:43:08,853 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:08,853 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:43:08,853 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:43:08,853 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:43:08,853 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:43:08,853 INFO  L87              Difference]: Start difference. First operand 12495 states and 14998 transitions. cyclomatic complexity: 2511 Second operand 7 states.
[2020-11-25 08:43:08,952 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:08,952 INFO  L93              Difference]: Finished difference Result 12543 states and 15064 transitions.
[2020-11-25 08:43:08,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:43:08,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12543 states and 15064 transitions.
[2020-11-25 08:43:08,978 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 08:43:09,006 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12543 states to 12499 states and 15010 transitions.
[2020-11-25 08:43:09,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3304
[2020-11-25 08:43:09,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3304
[2020-11-25 08:43:09,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12499 states and 15010 transitions.
[2020-11-25 08:43:09,014 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:09,014 INFO  L728         BuchiCegarLoop]: Abstraction has 12499 states and 15010 transitions.
[2020-11-25 08:43:09,019 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12499 states and 15010 transitions.
[2020-11-25 08:43:09,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12499 to 12499.
[2020-11-25 08:43:09,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12499 states.
[2020-11-25 08:43:09,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12499 states to 12499 states and 15010 transitions.
[2020-11-25 08:43:09,102 INFO  L751         BuchiCegarLoop]: Abstraction has 12499 states and 15010 transitions.
[2020-11-25 08:43:09,102 INFO  L631         BuchiCegarLoop]: Abstraction has 12499 states and 15010 transitions.
[2020-11-25 08:43:09,102 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 08:43:09,102 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12499 states and 15010 transitions.
[2020-11-25 08:43:09,116 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 08:43:09,116 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:09,116 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:09,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:09,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND FALSE  !(!(sender_s544 != null))
[L5391]               __var_8 := null;
[L5392]   COND TRUE   !(recipient_s544 != null)
[L5393]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:09,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:09,121 INFO  L82        PathProgramCache]: Analyzing trace with hash -958907256, now seen corresponding path program 1 times
[2020-11-25 08:43:09,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:09,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:09,213 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:09,384 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:09,385 INFO  L82        PathProgramCache]: Analyzing trace with hash -994039801, now seen corresponding path program 1 times
[2020-11-25 08:43:09,385 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:09,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:43:09,396 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:43:09,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:43:09,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:43:09,397 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 08:43:09,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:43:09,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:43:09,397 INFO  L87              Difference]: Start difference. First operand 12499 states and 15010 transitions. cyclomatic complexity: 2519 Second operand 4 states.
[2020-11-25 08:43:10,134 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:43:10,135 INFO  L93              Difference]: Finished difference Result 13206 states and 15618 transitions.
[2020-11-25 08:43:10,135 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:43:10,135 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13206 states and 15618 transitions.
[2020-11-25 08:43:10,177 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 48
[2020-11-25 08:43:10,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13206 states to 13206 states and 15618 transitions.
[2020-11-25 08:43:10,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3332
[2020-11-25 08:43:10,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3332
[2020-11-25 08:43:10,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13206 states and 15618 transitions.
[2020-11-25 08:43:10,229 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:43:10,229 INFO  L728         BuchiCegarLoop]: Abstraction has 13206 states and 15618 transitions.
[2020-11-25 08:43:10,236 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13206 states and 15618 transitions.
[2020-11-25 08:43:10,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13206 to 6501.
[2020-11-25 08:43:10,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6501 states.
[2020-11-25 08:43:10,305 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6501 states to 6501 states and 7432 transitions.
[2020-11-25 08:43:10,306 INFO  L751         BuchiCegarLoop]: Abstraction has 6501 states and 7432 transitions.
[2020-11-25 08:43:10,306 INFO  L631         BuchiCegarLoop]: Abstraction has 6501 states and 7432 transitions.
[2020-11-25 08:43:10,306 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 08:43:10,306 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6501 states and 7432 transitions.
[2020-11-25 08:43:10,312 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:43:10,312 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:43:10,312 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:43:10,314 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:43:10,314 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transfer_ERC20Pausable0 := false;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND TRUE   choice == 21
[L11071]              gas := gas - 21000;
[L11072]  COND TRUE   gas >= 0
[L11073]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11074]              assume msgvalue_MSG == 0;
[L11075]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND FALSE  !(!(sender_s544 != null))
[L5391]               __var_8 := null;
[L5392]   COND TRUE   !(recipient_s544 != null)
[L5393]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND TRUE   gas >= 0
[L11037]              assume msgvalue_MSG == 0;
[L11038]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L232]                havoc __exception;
[L233]                revert := false;
[L234]    COND FALSE  !(__exception)
[L262]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4732]               __ret_0_ := _owner_Ownable[this];
[L262]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L263]                assume !revert && gas >= 0;
[L11038]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:43:10,318 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:10,318 INFO  L82        PathProgramCache]: Analyzing trace with hash -958907256, now seen corresponding path program 2 times
[2020-11-25 08:43:10,319 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:10,347 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:10,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:10,468 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:10,468 INFO  L82        PathProgramCache]: Analyzing trace with hash 1055186901, now seen corresponding path program 1 times
[2020-11-25 08:43:10,469 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:10,472 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:10,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:10,481 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:43:10,481 INFO  L82        PathProgramCache]: Analyzing trace with hash 1489560540, now seen corresponding path program 1 times
[2020-11-25 08:43:10,482 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:43:10,517 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:10,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
[2020-11-25 08:43:10,950 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 317
Garbage collection #1: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8053 to 16103
Garbage collection #1: 101 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:43:11,119 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:43:11,841 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 134
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:43:14,445 WARN  L188               SmtUtils]: Spent 1.93 s on a formula simplification. DAG size of input: 540 DAG size of output: 502
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 08:43:14,626 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 244
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:43:14,878 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 08:43:15,146 WARN  L188               SmtUtils]: Spent 210.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:43:15,341 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:43:15,513 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 153
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 08:43:15,816 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification that was a NOOP. DAG size: 223
[2020-11-25 08:43:16,271 WARN  L188               SmtUtils]: Spent 452.00 ms on a formula simplification. DAG size of input: 307 DAG size of output: 284
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 08:43:16,410 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 176
[2020-11-25 08:43:16,551 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification that was a NOOP. DAG size: 362
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 08:43:16,704 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 295
[2020-11-25 08:43:17,904 WARN  L188               SmtUtils]: Spent 1.20 s on a formula simplification. DAG size of input: 601 DAG size of output: 587
Garbage collection #1: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #2: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #3: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 08:43:18,243 WARN  L188               SmtUtils]: Spent 322.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 298
[2020-11-25 08:43:18,527 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification that was a NOOP. DAG size: 418
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 08:43:18,687 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification that was a NOOP. DAG size: 298
[2020-11-25 08:43:19,188 WARN  L188               SmtUtils]: Spent 499.00 ms on a formula simplification. DAG size of input: 420 DAG size of output: 419
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 08:43:19,436 WARN  L188               SmtUtils]: Spent 243.00 ms on a formula simplification that was a NOOP. DAG size: 415
[2020-11-25 08:43:19,468 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:19,499 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:43:19,512 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:43:19 BasicIcfg
[2020-11-25 08:43:19,513 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:43:19,513 INFO  L168              Benchmark]: Toolchain (without parser) took 37056.96 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 919.1 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,514 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,514 INFO  L168              Benchmark]: Boogie Preprocessor took 147.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,514 INFO  L168              Benchmark]: UtopiaSpecLang took 80.92 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,515 INFO  L168              Benchmark]: Boogie Printer took 26.81 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,515 INFO  L168              Benchmark]: RCFGBuilder took 1466.08 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 881.1 MB in the beginning and 757.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 188.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,516 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.79 ms. Allocated memory is still 1.1 GB. Free memory was 757.6 MB in the beginning and 754.1 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,516 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3593.76 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 436.2 MB). Free memory was 754.1 MB in the beginning and 863.9 MB in the end (delta: -109.7 MB). Peak memory consumption was 337.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,517 INFO  L168              Benchmark]: BlockEncodingV2 took 278.90 ms. Allocated memory is still 1.5 GB. Free memory was 863.9 MB in the beginning and 709.4 MB in the end (delta: 154.5 MB). Peak memory consumption was 154.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,517 INFO  L168              Benchmark]: BuchiAutomizer took 31424.38 ms. Allocated memory was 1.5 GB in the beginning and 3.9 GB in the end (delta: 2.3 GB). Free memory was 709.4 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 08:43:19,520 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10764 locations, 20074 edges
  - StatisticsResult: Encoded RCFG
    10570 locations, 19536 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 147.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 80.92 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.81 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1466.08 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 881.1 MB in the beginning and 757.6 MB in the end (delta: 123.5 MB). Peak memory consumption was 188.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.79 ms. Allocated memory is still 1.1 GB. Free memory was 757.6 MB in the beginning and 754.1 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3593.76 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 436.2 MB). Free memory was 754.1 MB in the beginning and 863.9 MB in the end (delta: -109.7 MB). Peak memory consumption was 337.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 278.90 ms. Allocated memory is still 1.5 GB. Free memory was 863.9 MB in the beginning and 709.4 MB in the end (delta: 154.5 MB). Peak memory consumption was 154.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 31424.38 ms. Allocated memory was 1.5 GB in the beginning and 3.9 GB in the end (delta: 2.3 GB). Free memory was 709.4 MB in the beginning and 2.2 GB in the end (delta: -1.5 GB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4157 locations, 6112 edges
  - StatisticsResult: BuchiProgram size
    10764 locations, 20074 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.17 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 6501 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 31.3s and 18 iterations.  TraceHistogramMax:9. Analysis of lassos took 12.8s. Construction of modules took 11.1s. BÃ¼chi inclusion checks took 4.4s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 1.2s AutomataMinimizationTime, 17 MinimizatonAttempts, 11725 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.8s Buchi closure took 0.0s. Biggest automaton had 12499 states and ocurred in iteration 16.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 127339 SDtfs, 57061 SDslu, 498397 SDs, 0 SdLazy, 139680 SolverSat, 8392 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 11.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115787428790991736226411098954254884178879543113989747471779898303288945549158) = (new Wafl)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549161});
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549158).transfer~address~uint256.gas(3979002)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549161, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((p1 != msgsender_MSG && p1 != to_s1040) && msgsender_MSG != to_s1040) && value_s1040 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1040] + value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transfer_ERC20Pausable0 := true;
[L3]                  call_transfer_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2159]               havoc __exception;
[L2160]               revert := false;
[L2161]   COND TRUE   __exception
[L2162]               __tmp__Balance := Balance;
[L2163]               __tmp__DType := DType;
[L2164]               __tmp__Alloc := Alloc;
[L2165]               __tmp__balance_ADDR := balance_ADDR;
[L2166]               __tmp__M_Ref_int := M_Ref_int;
[L2167]               __tmp__sum__balances0 := sum__balances0;
[L2168]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2169]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2170]               __tmp__sum__allowances1 := sum__allowances1;
[L2171]               __tmp__M_Ref_bool := M_Ref_bool;
[L2172]               __tmp__sum := sum;
[L2173]               __tmp__Length := Length;
[L2174]               __tmp__now := now;
[L2175]               __tmp___owner_Ownable := _owner_Ownable;
[L2176]               __tmp___balances_ERC20 := _balances_ERC20;
[L2177]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2178]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2179]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2180]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2181]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2182]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2183]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2184]               __tmp___paused_Pausable := _paused_Pausable;
[L2185]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2186]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6356]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6356]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6357]   COND FALSE  !(revert)
[L6360]   COND TRUE   __tmp__DType[this] == Wafl
[L6361]   CALL        call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4944]   COND TRUE   __tmp__DType[this] == Wafl
[L4945]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5386]               __var_7 := null;
[L5387]   COND FALSE  !(!(sender_s544 != null))
[L5391]               __var_8 := null;
[L5392]   COND TRUE   !(recipient_s544 != null)
[L5393]               revert := true;
[L4945]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4946]   COND TRUE   revert
[L6361]   RET         call __var_26 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6362]   COND TRUE   revert
[L2186]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2187]               assume revert || gas < 0;
[L11075]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);

Loop:
Ownable(115787428790991736226411098954254884178879543113989747471779898303288945549158).owner.gas(3979001)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549153});
[L232]                havoc __exception;
[L233]                revert := false;
[L234]    COND FALSE  !(__exception)
[L262]    CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4732]               __ret_0_ := _owner_Ownable[this];
[L262]    RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L263]                assume !revert && gas >= 0;
[L11038]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
