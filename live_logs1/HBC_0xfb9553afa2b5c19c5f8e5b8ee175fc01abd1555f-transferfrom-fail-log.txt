This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:40:51,462 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:40:51,464 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:40:51,474 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:40:51,475 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:40:51,475 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:40:51,476 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:40:51,478 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:40:51,479 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:40:51,480 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:40:51,481 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:40:51,481 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:40:51,482 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:40:51,482 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:40:51,483 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:40:51,484 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:40:51,484 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:40:51,486 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:40:51,487 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:40:51,489 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:40:51,491 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:40:51,493 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:40:51,497 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:40:51,497 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:40:51,497 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:40:51,499 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:40:51,499 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:40:51,500 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:40:51,500 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:40:51,501 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:40:51,501 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:40:51,502 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:40:51,502 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:40:51,503 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:40:51,503 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:40:51,504 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:40:51,504 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:40:51,504 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:40:51,504 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:40:51,505 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:40:51,506 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:40:51,506 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:40:51,514 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:40:51,515 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:40:51,516 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:40:51,516 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:40:51,516 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:40:51,516 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:40:51,516 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:40:51,516 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:40:51,516 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:40:51,516 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:40:51,517 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:40:51,517 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:40:51,518 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:40:51,518 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:40:51,518 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:40:51,518 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:40:51,518 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:40:51,544 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:40:51,562 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:40:51,566 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:40:51,568 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:40:51,569 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:40:51,569 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl
[2020-11-25 17:40:51,569 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl'
[2020-11-25 17:40:51,652 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:40:51,653 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:40:51,654 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:40:51,654 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:40:51,654 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:40:51,670 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,672 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,713 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,714 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,736 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,746 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,753 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,762 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:40:51,763 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:40:51,763 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:40:51,765 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:40:51,769 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/1) ...
[2020-11-25 17:40:51,789 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HBC.transferFrom(from, to, value), from != to && (value > balances_HBC[this][from] || value > allowed_HBC[this][from][msg.sender] || balances_HBC[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][from] >= 0 &&  balances_HBC[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HBC[this][from][msg.sender] >= 0 && allowed_HBC[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HBC.transferFrom)))
[2020-11-25 17:40:51,795 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HBC.transferFrom(from, to, value), from != to && (value > balances_HBC[this][from] || value > allowed_HBC[this][from][msg.sender] || balances_HBC[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][from] >= 0 &&  balances_HBC[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HBC[this][from][msg.sender] >= 0 && allowed_HBC[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HBC.transferFrom)))
[2020-11-25 17:40:51,802 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HBC.transferFrom(from, to, value), from != to && (value > balances_HBC[this][from] || value > allowed_HBC[this][from][msg.sender] || balances_HBC[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][from] >= 0 &&  balances_HBC[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HBC[this][from][msg.sender] >= 0 && allowed_HBC[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HBC.transferFrom)))
[2020-11-25 17:40:51,810 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s570!=_to_s570 && ( ( _value_s570>balances_HBC[this][_from_s570] || _value_s570>allowed_HBC[this][_from_s570][msg.sender] ) || ( balances_HBC[this][_to_s570] + _value_s570 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s570>=0 ) && _value_s570<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HBC[this][_to_s570]>=0 ) && balances_HBC[this][_to_s570]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HBC[this][_from_s570]>=0 ) && balances_HBC[this][_from_s570]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_HBC[this][_from_s570][msg.sender]>=0 ) && allowed_HBC[this][_from_s570][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>],IdentifierExpression[_to_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_to_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IdentifierExpression[_value_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_to_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_to_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[_from_s570,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HBC>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:40:51,815 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HBC.transferFrom(from, to, value), from != to && (value > balances_HBC[this][from] || value > allowed_HBC[this][from][msg.sender] || balances_HBC[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][from] >= 0 &&  balances_HBC[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HBC[this][from][msg.sender] >= 0 && allowed_HBC[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HBC.transferFrom)))
[2020-11-25 17:40:51,815 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_HBC0) ==> ( <>AP(fail_transferFrom_HBC0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:40:51,824 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:40:51 PropertyContainer
[2020-11-25 17:40:51,824 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:40:51,824 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:40:51,825 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:40:51,825 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:40:51,826 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/2) ...
[2020-11-25 17:40:51,826 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:40:51,826 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:40:51,841 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:40:51" (2/2) ...
[2020-11-25 17:40:51,841 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:40:51,841 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:40:51,841 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:40:51,841 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:40:51,842 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/2) ...
[2020-11-25 17:40:51,895 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:40:51,895 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:40:51,895 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:40:51,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:40:51,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 17:40:51,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC_NoBaseCtor__success
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC
[2020-11-25 17:40:51,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC
[2020-11-25 17:40:51,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC
[2020-11-25 17:40:51,897 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC
[2020-11-25 17:40:51,898 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC
[2020-11-25 17:40:51,898 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC
[2020-11-25 17:40:51,899 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC
[2020-11-25 17:40:51,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC
[2020-11-25 17:40:51,899 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC
[2020-11-25 17:40:51,899 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC
[2020-11-25 17:40:51,899 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC
[2020-11-25 17:40:51,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC
[2020-11-25 17:40:51,900 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC
[2020-11-25 17:40:51,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC
[2020-11-25 17:40:51,900 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC
[2020-11-25 17:40:51,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC
[2020-11-25 17:40:51,900 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC
[2020-11-25 17:40:51,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC
[2020-11-25 17:40:51,900 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC
[2020-11-25 17:40:51,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC
[2020-11-25 17:40:51,900 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC
[2020-11-25 17:40:51,901 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC
[2020-11-25 17:40:51,901 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC
[2020-11-25 17:40:51,901 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC
[2020-11-25 17:40:51,901 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC
[2020-11-25 17:40:51,901 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC
[2020-11-25 17:40:51,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HBC
[2020-11-25 17:40:51,902 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:40:51,903 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC_NoBaseCtor__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC__success
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC__success
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC__fail
[2020-11-25 17:40:51,904 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC__success
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC__fail
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC__success
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC__fail
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC__success
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC__fail
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC__success
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC__fail
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC__success
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC__fail
[2020-11-25 17:40:51,905 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC__success
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC__fail
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC__success
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC__fail
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC__success
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC__fail
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC__success
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC__fail
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC__success
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC__fail
[2020-11-25 17:40:51,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC__success
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC__fail
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC__success
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC__fail
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC__success
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC__fail
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC__success
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC__fail
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC__success
[2020-11-25 17:40:51,907 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC__fail
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC__success
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC__fail
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC__success
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC__fail
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC__success
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC__fail
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC__success
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC__fail
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC__success
[2020-11-25 17:40:51,908 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC__success
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC__success
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC__success
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:40:51,909 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:40:51,910 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:40:51,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:40:51,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC_NoBaseCtor__fail
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC_NoBaseCtor__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC__fail
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC__fail
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC__fail
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC__success
[2020-11-25 17:40:51,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC__fail
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC__success
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC__fail
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC__success
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC__fail
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC__success
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC__fail
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC__success
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC__fail
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC__success
[2020-11-25 17:40:51,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC__success
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC__success
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC__success
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC__success
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC__success
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC__fail
[2020-11-25 17:40:51,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC__success
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC__fail
[2020-11-25 17:40:51,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC__fail
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC__fail
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC__fail
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC__fail
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC__fail
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC__success
[2020-11-25 17:40:51,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 17:40:51,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 17:40:51,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HBC
[2020-11-25 17:40:51,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:40:51,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:40:51,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:40:52,281 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:40:52,281 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:40:52,574 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:40:52,574 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 17:40:52,576 INFO  L202        PluginConnector]: Adding new model HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:40:52 BoogieIcfgContainer
[2020-11-25 17:40:52,577 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:40:51" (2/2) ...
[2020-11-25 17:40:52,577 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:40:52,577 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@15968a9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:40:52, skipping insertion in model container
[2020-11-25 17:40:52,577 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:40:52,577 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:40:52,577 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:40:52,579 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:40:52,579 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/3) ...
[2020-11-25 17:40:52,579 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@ab32e76 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:40:52, skipping insertion in model container
[2020-11-25 17:40:52,579 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:40:51" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:40:52,622 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:40:52 NWAContainer
[2020-11-25 17:40:52,622 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:40:52,622 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:40:52,623 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:40:52,623 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:40:52,624 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:40:52" (3/4) ...
[2020-11-25 17:40:52,625 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3acbe8e6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:40:52, skipping insertion in model container
[2020-11-25 17:40:52,625 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:40:52" (4/4) ...
[2020-11-25 17:40:52,628 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:40:52,631 INFO  L110   BuchiProductObserver]: Initial RCFG 1755 locations, 2195 edges
[2020-11-25 17:40:52,632 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:40:52,642 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:40:53,976 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:40:53,983 INFO  L110   BuchiProductObserver]: BuchiProgram size 4118 locations, 7052 edges
[2020-11-25 17:40:53,983 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:40:53 BoogieIcfgContainer
[2020-11-25 17:40:53,984 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:40:53,985 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:40:53,985 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:40:53,986 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:40:53,987 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:40:53" (1/1) ...
[2020-11-25 17:40:54,081 INFO  L313           BlockEncoder]: Initial Icfg 4118 locations, 7052 edges
[2020-11-25 17:40:54,081 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:40:54,082 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:40:54,082 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:40:54,083 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:40:54,102 INFO  L70    emoveInfeasibleEdges]: Removed 60 edges and 9 locations because of local infeasibility
[2020-11-25 17:40:54,111 INFO  L70        RemoveSinkStates]: Removed 52 edges and 26 locations by removing sink states
[2020-11-25 17:40:54,127 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:40:54,131 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:40:54,135 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:40:54,135 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:40:54,140 INFO  L313           BlockEncoder]: Encoded RCFG 4053 locations, 6896 edges
[2020-11-25 17:40:54,140 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:40:54 BasicIcfg
[2020-11-25 17:40:54,140 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:40:54,141 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:40:54,141 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:40:54,142 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:40:54,142 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,143 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:40:51" (1/6) ...
[2020-11-25 17:40:54,145 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@364e76df and model type HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:40:54, skipping insertion in model container
[2020-11-25 17:40:54,145 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,145 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:40:51" (2/6) ...
[2020-11-25 17:40:54,145 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@364e76df and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:40:54, skipping insertion in model container
[2020-11-25 17:40:54,145 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,145 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:40:52" (3/6) ...
[2020-11-25 17:40:54,145 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@364e76df and model type HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:40:54, skipping insertion in model container
[2020-11-25 17:40:54,145 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,145 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:40:52" (4/6) ...
[2020-11-25 17:40:54,145 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@364e76df and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:40:54, skipping insertion in model container
[2020-11-25 17:40:54,145 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,145 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:40:53" (5/6) ...
[2020-11-25 17:40:54,146 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@364e76df and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:40:54, skipping insertion in model container
[2020-11-25 17:40:54,146 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:40:54,146 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:40:54" (6/6) ...
[2020-11-25 17:40:54,147 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transferfrom-fail.bpl_BEv2
[2020-11-25 17:40:54,179 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:40:54,179 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:40:54,179 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:40:54,179 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:40:54,179 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:40:54,179 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:40:54,179 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:40:54,179 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:40:54,179 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:40:54,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4053 states.
[2020-11-25 17:40:54,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:54,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:54,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:54,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:54,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:54,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:40:54,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4053 states.
[2020-11-25 17:40:54,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:54,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:54,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:54,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:54,315 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND TRUE   revert
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND TRUE   choice == 24
[L4363]              gas := gas - 21000;
[L4364]  COND FALSE  !(gas >= 0)
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:54,332 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:54,332 INFO  L82        PathProgramCache]: Analyzing trace with hash -1011814445, now seen corresponding path program 1 times
[2020-11-25 17:40:54,337 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:54,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:54,397 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:40:54,399 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:54,399 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:40:54,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:54,637 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:40:54,638 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:40:54,639 INFO  L87              Difference]: Start difference. First operand 4053 states. Second operand 4 states.
[2020-11-25 17:40:55,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:40:55,031 INFO  L93              Difference]: Finished difference Result 3324 states and 3706 transitions.
[2020-11-25 17:40:55,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:40:55,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3324 states and 3706 transitions.
[2020-11-25 17:40:55,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:55,088 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3324 states to 3324 states and 3706 transitions.
[2020-11-25 17:40:55,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 17:40:55,092 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1037
[2020-11-25 17:40:55,093 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3324 states and 3706 transitions.
[2020-11-25 17:40:55,102 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:40:55,102 INFO  L728         BuchiCegarLoop]: Abstraction has 3324 states and 3706 transitions.
[2020-11-25 17:40:55,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3324 states and 3706 transitions.
[2020-11-25 17:40:55,178 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3324 to 3324.
[2020-11-25 17:40:55,179 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3324 states.
[2020-11-25 17:40:55,185 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3324 states to 3324 states and 3706 transitions.
[2020-11-25 17:40:55,186 INFO  L751         BuchiCegarLoop]: Abstraction has 3324 states and 3706 transitions.
[2020-11-25 17:40:55,187 INFO  L631         BuchiCegarLoop]: Abstraction has 3324 states and 3706 transitions.
[2020-11-25 17:40:55,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:40:55,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3324 states and 3706 transitions.
[2020-11-25 17:40:55,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:55,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:55,198 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:55,200 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:55,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND TRUE   revert
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND TRUE   revert
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND TRUE   !!stopped_HBC[this]
[L2743]              revert := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND TRUE   !!stopped_HBC[this]
[L2743]              revert := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:55,204 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:55,204 INFO  L82        PathProgramCache]: Analyzing trace with hash 1034489081, now seen corresponding path program 1 times
[2020-11-25 17:40:55,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:55,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:55,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:40:55,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:55,238 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:40:55,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:55,240 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:40:55,240 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:40:55,240 INFO  L87              Difference]: Start difference. First operand 3324 states and 3706 transitions. cyclomatic complexity: 384 Second operand 4 states.
[2020-11-25 17:40:55,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:40:55,971 INFO  L93              Difference]: Finished difference Result 4540 states and 5147 transitions.
[2020-11-25 17:40:55,971 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:40:55,971 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4540 states and 5147 transitions.
[2020-11-25 17:40:55,988 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:40:56,007 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4540 states to 4304 states and 4859 transitions.
[2020-11-25 17:40:56,007 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1239
[2020-11-25 17:40:56,009 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1249
[2020-11-25 17:40:56,009 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4304 states and 4859 transitions.
[2020-11-25 17:40:56,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:40:56,017 INFO  L728         BuchiCegarLoop]: Abstraction has 4304 states and 4859 transitions.
[2020-11-25 17:40:56,021 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4304 states and 4859 transitions.
[2020-11-25 17:40:56,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4304 to 3571.
[2020-11-25 17:40:56,062 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3571 states.
[2020-11-25 17:40:56,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3571 states to 3571 states and 3908 transitions.
[2020-11-25 17:40:56,066 INFO  L751         BuchiCegarLoop]: Abstraction has 3571 states and 3908 transitions.
[2020-11-25 17:40:56,066 INFO  L631         BuchiCegarLoop]: Abstraction has 3571 states and 3908 transitions.
[2020-11-25 17:40:56,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:40:56,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3571 states and 3908 transitions.
[2020-11-25 17:40:56,073 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:40:56,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:56,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:56,075 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:56,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND TRUE   _value_s570 == 0
[L2765]              assert { :EventEmitted "Transfer_HBC" } true;
[L2766]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND TRUE   _value_s570 == 0
[L2765]              assert { :EventEmitted "Transfer_HBC" } true;
[L2766]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:56,078 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:56,078 INFO  L82        PathProgramCache]: Analyzing trace with hash -474205085, now seen corresponding path program 1 times
[2020-11-25 17:40:56,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:56,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:56,148 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:40:56,148 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:56,148 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:40:56,148 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:56,149 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:40:56,149 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:40:56,149 INFO  L87              Difference]: Start difference. First operand 3571 states and 3908 transitions. cyclomatic complexity: 339 Second operand 4 states.
[2020-11-25 17:40:56,231 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:40:56,231 INFO  L93              Difference]: Finished difference Result 3624 states and 3965 transitions.
[2020-11-25 17:40:56,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:40:56,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3624 states and 3965 transitions.
[2020-11-25 17:40:56,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:40:56,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3624 states to 3624 states and 3965 transitions.
[2020-11-25 17:40:56,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1178
[2020-11-25 17:40:56,255 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-25 17:40:56,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3624 states and 3965 transitions.
[2020-11-25 17:40:56,261 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:40:56,261 INFO  L728         BuchiCegarLoop]: Abstraction has 3624 states and 3965 transitions.
[2020-11-25 17:40:56,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3624 states and 3965 transitions.
[2020-11-25 17:40:56,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3624 to 3589.
[2020-11-25 17:40:56,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3589 states.
[2020-11-25 17:40:56,324 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3589 states to 3589 states and 3929 transitions.
[2020-11-25 17:40:56,324 INFO  L751         BuchiCegarLoop]: Abstraction has 3589 states and 3929 transitions.
[2020-11-25 17:40:56,324 INFO  L631         BuchiCegarLoop]: Abstraction has 3589 states and 3929 transitions.
[2020-11-25 17:40:56,324 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:40:56,324 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3589 states and 3929 transitions.
[2020-11-25 17:40:56,333 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:40:56,333 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:56,333 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:56,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:56,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND FALSE  !(_value_s570 == 0)
[L2769]  COND FALSE  !(!((balances_HBC[this][_from_s570] >= _value_s570 && allowed_HBC[this][_from_s570][msgsender_MSG] >= _value_s570) && _value_s570 >= 0))
[L2773]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2773]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2774]  COND FALSE  !(revert)
[L2777]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_from_s570];
[L2778]              balances_HBC[this][_from_s570] := __var_6;
[L2779]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_from_s570];
[L2780]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2780]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2781]  COND FALSE  !(revert)
[L2784]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] - allowed_HBC[this][_from_s570][msgsender_MSG];
[L2785]              allowed_HBC[this][_from_s570][msgsender_MSG] := __var_7;
[L2786]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] + allowed_HBC[this][_from_s570][msgsender_MSG];
[L2787]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2787]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2788]  COND FALSE  !(revert)
[L2791]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_to_s570];
[L2792]              balances_HBC[this][_to_s570] := __var_8;
[L2793]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_to_s570];
[L2794]              assert { :EventEmitted "Transfer_HBC" } true;
[L2795]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND FALSE  !(_value_s570 == 0)
[L2769]  COND FALSE  !(!((balances_HBC[this][_from_s570] >= _value_s570 && allowed_HBC[this][_from_s570][msgsender_MSG] >= _value_s570) && _value_s570 >= 0))
[L2773]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2773]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2774]  COND FALSE  !(revert)
[L2777]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_from_s570];
[L2778]              balances_HBC[this][_from_s570] := __var_6;
[L2779]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_from_s570];
[L2780]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2780]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2781]  COND FALSE  !(revert)
[L2784]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] - allowed_HBC[this][_from_s570][msgsender_MSG];
[L2785]              allowed_HBC[this][_from_s570][msgsender_MSG] := __var_7;
[L2786]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] + allowed_HBC[this][_from_s570][msgsender_MSG];
[L2787]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2787]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2788]  COND FALSE  !(revert)
[L2791]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_to_s570];
[L2792]              balances_HBC[this][_to_s570] := __var_8;
[L2793]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_to_s570];
[L2794]              assert { :EventEmitted "Transfer_HBC" } true;
[L2795]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:56,341 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:56,341 INFO  L82        PathProgramCache]: Analyzing trace with hash 321560357, now seen corresponding path program 1 times
[2020-11-25 17:40:56,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:56,363 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:56,552 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 17:40:56,552 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:56,552 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 17:40:56,553 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:56,553 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 17:40:56,553 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=172, Unknown=0, NotChecked=0, Total=210
[2020-11-25 17:40:56,553 INFO  L87              Difference]: Start difference. First operand 3589 states and 3929 transitions. cyclomatic complexity: 342 Second operand 15 states.
[2020-11-25 17:40:57,917 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:40:57,917 INFO  L93              Difference]: Finished difference Result 3635 states and 3983 transitions.
[2020-11-25 17:40:57,918 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 17:40:57,918 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3635 states and 3983 transitions.
[2020-11-25 17:40:57,924 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:40:57,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3635 states to 3635 states and 3983 transitions.
[2020-11-25 17:40:57,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1196
[2020-11-25 17:40:57,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1196
[2020-11-25 17:40:57,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3635 states and 3983 transitions.
[2020-11-25 17:40:57,936 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:40:57,936 INFO  L728         BuchiCegarLoop]: Abstraction has 3635 states and 3983 transitions.
[2020-11-25 17:40:57,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3635 states and 3983 transitions.
[2020-11-25 17:40:57,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3635 to 3408.
[2020-11-25 17:40:57,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3408 states.
[2020-11-25 17:40:57,961 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3408 states to 3408 states and 3700 transitions.
[2020-11-25 17:40:57,961 INFO  L751         BuchiCegarLoop]: Abstraction has 3408 states and 3700 transitions.
[2020-11-25 17:40:57,961 INFO  L631         BuchiCegarLoop]: Abstraction has 3408 states and 3700 transitions.
[2020-11-25 17:40:57,961 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:40:57,961 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3408 states and 3700 transitions.
[2020-11-25 17:40:57,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:57,965 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:57,965 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:57,966 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:57,966 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND TRUE   __exception
[L257]               __tmp__Balance := Balance;
[L258]               __tmp__DType := DType;
[L259]               __tmp__Alloc := Alloc;
[L260]               __tmp__balance_ADDR := balance_ADDR;
[L261]               __tmp__M_Ref_int := M_Ref_int;
[L262]               __tmp__sum_balances0 := sum_balances0;
[L263]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L264]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L265]               __tmp__sum_allowed1 := sum_allowed1;
[L266]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L267]               __tmp__Length := Length;
[L268]               __tmp__now := now;
[L269]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L270]               __tmp__name_HBC := name_HBC;
[L271]               __tmp__symbol_HBC := symbol_HBC;
[L272]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L273]               __tmp__decimals_HBC := decimals_HBC;
[L274]               __tmp__stopped_HBC := stopped_HBC;
[L275]               __tmp__owner_HBC := owner_HBC;
[L276]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L277]               __tmp__balances_HBC := balances_HBC;
[L278]               __tmp__allowed_HBC := allowed_HBC;
[L279]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L280]   CALL        call HBC_HBC__fail(this, msgsender_MSG, msgvalue_MSG);
[L2483]  CALL        call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L2416]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2401]              assume msgsender_MSG != null;
[L2402]              __tmp__Balance[this] := 0;
[L2416]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2417]  COND FALSE  !(revert)
[L2483]  RET         call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L2484]  COND FALSE  !(revert)
[L2487]  CALL        call HBC_HBC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2433]              assume msgsender_MSG != null;
[L2434]              __tmp__Balance[this] := 0;
[L2435]              __tmp__TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2436]              __tmp__name_HBC[this] := 1908934807;
[L2437]              __tmp__symbol_HBC[this] := -845215461;
[L2438]              __tmp__totalTokenSupply_HBC[this] := 10000000000 * __tmp__TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2439]              __tmp__decimals_HBC[this] := 18;
[L2440]              __tmp__stopped_HBC[this] := false;
[L2441]              __tmp__owner_HBC[this] := null;
[L2442]              __tmp__totalBurned_HBC[this] := 0;
[L2443]              __tmp__balances_HBC[this] := zeroRefintArr();
[L2444]              __tmp__sum_balances0[this] := 0;
[L2445]              __tmp__allowed_HBC[this] := zeroRefRefintArr();
[L2446]              __tmp__sum_allowed1[this] := 0;
[L2447]              __tmp__forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2449]              __tmp__owner_HBC[this] := msgsender_MSG;
[L2450]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HBC[this][__tmp__owner_HBC[this]];
[L2451]              __tmp__balances_HBC[this][__tmp__owner_HBC[this]] := __tmp__totalTokenSupply_HBC[this];
[L2452]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HBC[this][__tmp__owner_HBC[this]];
[L2487]  RET         call HBC_HBC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2488]  COND FALSE  !(revert)
[L280]   RET         call HBC_HBC__fail(this, msgsender_MSG, msgvalue_MSG);
[L281]               assume revert || gas < 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND FALSE  !(_value_s570 == 0)
[L2769]  COND FALSE  !(!((balances_HBC[this][_from_s570] >= _value_s570 && allowed_HBC[this][_from_s570][msgsender_MSG] >= _value_s570) && _value_s570 >= 0))
[L2773]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2773]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2774]  COND FALSE  !(revert)
[L2777]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_from_s570];
[L2778]              balances_HBC[this][_from_s570] := __var_6;
[L2779]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_from_s570];
[L2780]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2780]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2781]  COND FALSE  !(revert)
[L2784]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] - allowed_HBC[this][_from_s570][msgsender_MSG];
[L2785]              allowed_HBC[this][_from_s570][msgsender_MSG] := __var_7;
[L2786]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] + allowed_HBC[this][_from_s570][msgsender_MSG];
[L2787]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2787]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2788]  COND FALSE  !(revert)
[L2791]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_to_s570];
[L2792]              balances_HBC[this][_to_s570] := __var_8;
[L2793]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_to_s570];
[L2794]              assert { :EventEmitted "Transfer_HBC" } true;
[L2795]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND TRUE   choice == 24
[L4363]              gas := gas - 21000;
[L4364]  COND FALSE  !(gas >= 0)
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:57,969 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:57,969 INFO  L82        PathProgramCache]: Analyzing trace with hash -342135522, now seen corresponding path program 1 times
[2020-11-25 17:40:57,969 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:57,975 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:57,998 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 17:40:57,998 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:57,998 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:40:57,999 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:57,999 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:40:57,999 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:40:57,999 INFO  L87              Difference]: Start difference. First operand 3408 states and 3700 transitions. cyclomatic complexity: 295 Second operand 4 states.
[2020-11-25 17:40:58,258 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:40:58,259 INFO  L93              Difference]: Finished difference Result 4322 states and 4863 transitions.
[2020-11-25 17:40:58,259 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:40:58,259 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4322 states and 4863 transitions.
[2020-11-25 17:40:58,268 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:40:58,278 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4322 states to 4250 states and 4791 transitions.
[2020-11-25 17:40:58,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1336
[2020-11-25 17:40:58,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1336
[2020-11-25 17:40:58,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4250 states and 4791 transitions.
[2020-11-25 17:40:58,282 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:40:58,282 INFO  L728         BuchiCegarLoop]: Abstraction has 4250 states and 4791 transitions.
[2020-11-25 17:40:58,285 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4250 states and 4791 transitions.
[2020-11-25 17:40:58,303 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4250 to 3336.
[2020-11-25 17:40:58,303 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3336 states.
[2020-11-25 17:40:58,306 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3336 states to 3336 states and 3627 transitions.
[2020-11-25 17:40:58,306 INFO  L751         BuchiCegarLoop]: Abstraction has 3336 states and 3627 transitions.
[2020-11-25 17:40:58,306 INFO  L631         BuchiCegarLoop]: Abstraction has 3336 states and 3627 transitions.
[2020-11-25 17:40:58,306 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:40:58,306 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3336 states and 3627 transitions.
[2020-11-25 17:40:58,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:40:58,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:40:58,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:40:58,311 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:40:58,311 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND FALSE  !(choice == 20)
[L4394]  COND TRUE   choice == 19
[L4395]              gas := gas - 21000;
[L4396]  COND TRUE   gas >= 0
[L4397]              assume _tokens_s612 >= 0 && _tokens_s612 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4398]              assume msgvalue_MSG == 0;
[L4399]  CALL        call __ret_0_approve := approve~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L854]   CALL        call __ret_0_ := approve~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L2821]  COND FALSE  !(!!stopped_HBC[this])
[L2825]              __var_9 := null;
[L2826]  COND FALSE  !(!(_spender_s612 != null))
[L2830]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HBC[this][msgsender_MSG][_spender_s612];
[L2831]              allowed_HBC[this][msgsender_MSG][_spender_s612] := _tokens_s612;
[L2832]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HBC[this][msgsender_MSG][_spender_s612];
[L2833]              assert { :EventEmitted "Approval_HBC" } true;
[L2834]              __ret_0_ := true;
[L854]   RET         call __ret_0_ := approve~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L855]               assume !revert && gas >= 0;
[L4399]  RET         call __ret_0_approve := approve~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L4530]  RET         call CorralChoice_HBC(this);
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND FALSE  !(_value_s570 == 0)
[L2769]  COND FALSE  !(!((balances_HBC[this][_from_s570] >= _value_s570 && allowed_HBC[this][_from_s570][msgsender_MSG] >= _value_s570) && _value_s570 >= 0))
[L2773]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2773]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2774]  COND FALSE  !(revert)
[L2777]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_from_s570];
[L2778]              balances_HBC[this][_from_s570] := __var_6;
[L2779]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_from_s570];
[L2780]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2780]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2781]  COND FALSE  !(revert)
[L2784]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] - allowed_HBC[this][_from_s570][msgsender_MSG];
[L2785]              allowed_HBC[this][_from_s570][msgsender_MSG] := __var_7;
[L2786]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] + allowed_HBC[this][_from_s570][msgsender_MSG];
[L2787]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2787]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2788]  COND FALSE  !(revert)
[L2791]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_to_s570];
[L2792]              balances_HBC[this][_to_s570] := __var_8;
[L2793]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_to_s570];
[L2794]              assert { :EventEmitted "Transfer_HBC" } true;
[L2795]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND TRUE   choice == 24
[L4363]              gas := gas - 21000;
[L4364]  COND FALSE  !(gas >= 0)
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:40:58,314 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:40:58,315 INFO  L82        PathProgramCache]: Analyzing trace with hash 703897859, now seen corresponding path program 1 times
[2020-11-25 17:40:58,315 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:40:58,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:40:58,605 INFO  L134       CoverageAnalysis]: Checked inductivity of 63 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-11-25 17:40:58,606 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:40:58,606 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 17:40:58,606 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:40:58,606 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 17:40:58,606 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=402, Unknown=0, NotChecked=0, Total=462
[2020-11-25 17:40:58,606 INFO  L87              Difference]: Start difference. First operand 3336 states and 3627 transitions. cyclomatic complexity: 294 Second operand 22 states.
[2020-11-25 17:41:01,770 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:01,770 INFO  L93              Difference]: Finished difference Result 3434 states and 3737 transitions.
[2020-11-25 17:41:01,770 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 17:41:01,770 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3434 states and 3737 transitions.
[2020-11-25 17:41:01,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:01,781 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3434 states to 3434 states and 3737 transitions.
[2020-11-25 17:41:01,781 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1101
[2020-11-25 17:41:01,782 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1101
[2020-11-25 17:41:01,782 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3434 states and 3737 transitions.
[2020-11-25 17:41:01,784 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:01,784 INFO  L728         BuchiCegarLoop]: Abstraction has 3434 states and 3737 transitions.
[2020-11-25 17:41:01,786 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3434 states and 3737 transitions.
[2020-11-25 17:41:01,800 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3434 to 3361.
[2020-11-25 17:41:01,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3361 states.
[2020-11-25 17:41:01,803 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3361 states to 3361 states and 3660 transitions.
[2020-11-25 17:41:01,803 INFO  L751         BuchiCegarLoop]: Abstraction has 3361 states and 3660 transitions.
[2020-11-25 17:41:01,803 INFO  L631         BuchiCegarLoop]: Abstraction has 3361 states and 3660 transitions.
[2020-11-25 17:41:01,803 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:41:01,803 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3361 states and 3660 transitions.
[2020-11-25 17:41:01,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:01,806 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:01,806 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:01,807 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:01,807 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_HBC0 := false;
[L2]                 call_transferFrom_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND FALSE  !(choice == 20)
[L4394]  COND TRUE   choice == 19
[L4395]              gas := gas - 21000;
[L4396]  COND TRUE   gas >= 0
[L4397]              assume _tokens_s612 >= 0 && _tokens_s612 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4398]              assume msgvalue_MSG == 0;
[L4399]  CALL        call __ret_0_approve := approve~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L854]   CALL        call __ret_0_ := approve~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L2821]  COND FALSE  !(!!stopped_HBC[this])
[L2825]              __var_9 := null;
[L2826]  COND FALSE  !(!(_spender_s612 != null))
[L2830]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HBC[this][msgsender_MSG][_spender_s612];
[L2831]              allowed_HBC[this][msgsender_MSG][_spender_s612] := _tokens_s612;
[L2832]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HBC[this][msgsender_MSG][_spender_s612];
[L2833]              assert { :EventEmitted "Approval_HBC" } true;
[L2834]              __ret_0_ := true;
[L854]   RET         call __ret_0_ := approve~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L855]               assume !revert && gas >= 0;
[L4399]  RET         call __ret_0_approve := approve~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _spender_s612, _tokens_s612);
[L4530]  RET         call CorralChoice_HBC(this);
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND FALSE  !(!!stopped_HBC[this])
[L2931]              __var_12 := null;
[L2932]  COND FALSE  !(!(_address_s750 != null))
[L2936]  COND FALSE  !(!(forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2940]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2944]  COND FALSE  !(_tokens_s750 == 0)
[L2949]  COND FALSE  !(!(balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2953]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2953]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2954]  COND FALSE  !(revert)
[L2957]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][msgsender_MSG];
[L2958]              balances_HBC[this][msgsender_MSG] := __var_13;
[L2959]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][msgsender_MSG];
[L2960]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2960]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2961]  COND FALSE  !(revert)
[L2964]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_address_s750];
[L2965]              balances_HBC[this][_address_s750] := __var_14;
[L2966]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_address_s750];
[L2967]              assert { :EventEmitted "Transfer_HBC" } true;
[L2968]              __ret_0_ := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND TRUE   choice == 20
[L4388]              gas := gas - 21000;
[L4389]  COND TRUE   gas >= 0
[L4390]              assume _value_s570 >= 0 && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4391]              assume msgvalue_MSG == 0;
[L4392]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s570 != _to_s570 && ((_value_s570 > balances_HBC[this][_from_s570] || _value_s570 > allowed_HBC[this][_from_s570][msgsender_MSG]) || balances_HBC[this][_to_s570] + _value_s570 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s570 >= 0) && _value_s570 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_to_s570] >= 0) && balances_HBC[this][_to_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_from_s570] >= 0) && balances_HBC[this][_from_s570] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HBC[this][_from_s570][msgsender_MSG] >= 0) && allowed_HBC[this][_from_s570][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_HBC0 := true;
[L2]                 call_transferFrom_HBC0 := false;
[L2]                 revert := revert_hold;
[L761]               havoc __exception;
[L762]               revert := false;
[L763]   COND FALSE  !(__exception)
[L790]   CALL        call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L2742]  COND FALSE  !(!!stopped_HBC[this])
[L2746]              __var_4 := null;
[L2747]  COND FALSE  !(!(_to_s570 != null))
[L2751]              __var_5 := null;
[L2752]  COND FALSE  !(!(_from_s570 != null))
[L2756]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_from_s570] != _from_s570))
[L2760]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_to_s570] != _to_s570))
[L2764]  COND FALSE  !(_value_s570 == 0)
[L2769]  COND FALSE  !(!((balances_HBC[this][_from_s570] >= _value_s570 && allowed_HBC[this][_from_s570][msgsender_MSG] >= _value_s570) && _value_s570 >= 0))
[L2773]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2773]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][_from_s570], _value_s570, -2084992712);
[L2774]  COND FALSE  !(revert)
[L2777]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_from_s570];
[L2778]              balances_HBC[this][_from_s570] := __var_6;
[L2779]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_from_s570];
[L2780]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2780]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, allowed_HBC[this][_from_s570][msgsender_MSG], _value_s570, 2021534596);
[L2781]  COND FALSE  !(revert)
[L2784]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] - allowed_HBC[this][_from_s570][msgsender_MSG];
[L2785]              allowed_HBC[this][_from_s570][msgsender_MSG] := __var_7;
[L2786]              sum_allowed1[_from_s570] := sum_allowed1[_from_s570] + allowed_HBC[this][_from_s570][msgsender_MSG];
[L2787]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2787]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_to_s570], _value_s570);
[L2788]  COND FALSE  !(revert)
[L2791]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_to_s570];
[L2792]              balances_HBC[this][_to_s570] := __var_8;
[L2793]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_to_s570];
[L2794]              assert { :EventEmitted "Transfer_HBC" } true;
[L2795]              __ret_0_ := true;
[L790]   RET         call __ret_0_ := transferFrom~address~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L791]               assume !revert && gas >= 0;
[L4392]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _from_s570, _to_s570, _value_s570);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND TRUE   choice == 24
[L4363]              gas := gas - 21000;
[L4364]  COND FALSE  !(gas >= 0)
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:41:01,811 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:01,811 INFO  L82        PathProgramCache]: Analyzing trace with hash -1351287482, now seen corresponding path program 1 times
[2020-11-25 17:41:01,812 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:01,845 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:01,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 178 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 178 trivial. 0 not checked.
[2020-11-25 17:41:01,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:01,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 17:41:01,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:01,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 17:41:01,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 17:41:01,978 INFO  L87              Difference]: Start difference. First operand 3361 states and 3660 transitions. cyclomatic complexity: 304 Second operand 13 states.
[2020-11-25 17:41:03,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:03,383 INFO  L93              Difference]: Finished difference Result 1863 states and 2028 transitions.
[2020-11-25 17:41:03,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 17:41:03,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1863 states and 2028 transitions.
[2020-11-25 17:41:03,386 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:41:03,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1863 states to 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 17:41:03,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 17:41:03,386 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:03,386 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:41:03,386 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 17:41:03,386 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:41:03,386 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 17:41:03,389 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:41:03 BasicIcfg
[2020-11-25 17:41:03,389 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:41:03,390 INFO  L168              Benchmark]: Toolchain (without parser) took 11737.14 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 892.9 MB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -265.9 MB). Peak memory consumption was 627.0 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,390 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,390 INFO  L168              Benchmark]: Boogie Preprocessor took 109.06 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,391 INFO  L168              Benchmark]: UtopiaSpecLang took 61.39 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,391 INFO  L168              Benchmark]: Boogie Printer took 16.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,391 INFO  L168              Benchmark]: RCFGBuilder took 735.92 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.9 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,392 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.98 ms. Allocated memory is still 1.0 GB. Free memory was 800.9 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,392 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1361.19 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 797.4 MB in the beginning and 994.1 MB in the end (delta: -196.7 MB). Peak memory consumption was 176.3 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,393 INFO  L168              Benchmark]: BlockEncodingV2 took 155.81 ms. Allocated memory is still 1.2 GB. Free memory was 994.1 MB in the beginning and 927.2 MB in the end (delta: 66.9 MB). Peak memory consumption was 66.9 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,393 INFO  L168              Benchmark]: BuchiAutomizer took 9248.69 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 692.1 MB). Free memory was 927.2 MB in the beginning and 1.2 GB in the end (delta: -273.9 MB). Peak memory consumption was 418.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:41:03,395 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4118 locations, 7052 edges
  - StatisticsResult: Encoded RCFG
    4053 locations, 6896 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.06 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.39 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 735.92 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 800.9 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.98 ms. Allocated memory is still 1.0 GB. Free memory was 800.9 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1361.19 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 797.4 MB in the beginning and 994.1 MB in the end (delta: -196.7 MB). Peak memory consumption was 176.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 155.81 ms. Allocated memory is still 1.2 GB. Free memory was 994.1 MB in the beginning and 927.2 MB in the end (delta: 66.9 MB). Peak memory consumption was 66.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9248.69 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 692.1 MB). Free memory was 927.2 MB in the beginning and 1.2 GB in the end (delta: -273.9 MB). Peak memory consumption was 418.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1755 locations, 2195 edges
  - StatisticsResult: BuchiProgram size
    4118 locations, 7052 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 22 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.2s and 8 iterations.  TraceHistogramMax:3. Analysis of lassos took 0.9s. Construction of modules took 5.6s. BÃ¼chi inclusion checks took 1.9s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1982 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3589 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 23859 SDtfs, 22707 SDslu, 36633 SDs, 0 SdLazy, 77645 SolverSat, 3482 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_H(fail_transferFrom_HBC0)C0) ==> ( <>(fail_transferFrom_HBC0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
