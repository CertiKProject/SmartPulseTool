This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:53:06,410 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:53:06,411 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:53:06,419 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:53:06,419 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:53:06,419 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:53:06,420 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:53:06,421 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:53:06,422 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:53:06,422 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:53:06,423 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:53:06,423 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:53:06,423 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:53:06,424 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:53:06,425 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:53:06,425 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:53:06,425 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:53:06,426 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:53:06,427 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:53:06,428 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:53:06,429 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:53:06,430 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:53:06,432 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:53:06,432 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:53:06,432 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:53:06,433 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:53:06,433 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:53:06,434 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:53:06,434 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:53:06,434 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:53:06,434 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:53:06,435 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:53:06,435 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:53:06,436 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:53:06,437 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:53:06,437 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:53:06,437 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:53:06,437 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:53:06,438 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:53:06,438 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:53:06,438 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:53:06,439 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:53:06,444 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:53:06,444 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:53:06,445 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:53:06,445 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:53:06,445 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:53:06,445 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:53:06,446 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:53:06,446 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:53:06,446 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:53:06,464 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:53:06,477 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:53:06,481 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:53:06,483 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:53:06,484 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:53:06,484 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl
[2020-11-25 01:53:06,484 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl'
[2020-11-25 01:53:06,545 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:53:06,546 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:53:06,546 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:53:06,547 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:53:06,547 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:53:06,558 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,559 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,591 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,591 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,609 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,619 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,626 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,635 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:53:06,636 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:53:06,636 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:53:06,638 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:53:06,641 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/1) ...
[2020-11-25 01:53:06,660 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(MyToken.approve(spender, value), return == true && allowed_MyToken[this][msg.sender][spender] == value &&  _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:06,665 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(MyToken.approve(spender, value), return == true && allowed_MyToken[this][msg.sender][spender] == value &&  _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:06,673 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(MyToken.approve(spender, value), return == true && allowed_MyToken[this][msg.sender][spender] == value &&  _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:06,679 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s415 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s415,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]
[2020-11-25 01:53:06,682 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s415==true && allowed_MyToken[this][msg.sender][spender_s415]==tokens_s415 ) && _totalSupply_MyToken[this]==( old(_totalSupply_MyToken[this]) ) ) && balances_MyToken[this]==( old(balances_MyToken[this]) ) ) && allowed_MyToken[this][p1][p2]==( old(allowed_MyToken[this][p1][p2]) ) ) && symbol_MyToken[this]==( old(symbol_MyToken[this]) ) ) && name_MyToken[this]==( old(name_MyToken[this]) ) ) && decimals_MyToken[this]==( old(decimals_MyToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s415,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_MyToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],[IdentifierExpression[spender_s415,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],IdentifierExpression[tokens_s415,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_MyToken>]]]]]]
[2020-11-25 01:53:06,686 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(MyToken.approve(spender, value), return == true && allowed_MyToken[this][msg.sender][spender] == value &&  _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:06,686 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_MyToken0) ==> ( <>AP(success_approve_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:53:06,694 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:06 PropertyContainer
[2020-11-25 01:53:06,694 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:53:06,695 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:53:06,695 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:53:06,695 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:53:06,696 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/2) ...
[2020-11-25 01:53:06,696 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:53:06,696 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:53:06,709 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:06" (2/2) ...
[2020-11-25 01:53:06,709 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:53:06,709 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:53:06,709 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:53:06,709 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:53:06,710 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/2) ...
[2020-11-25 01:53:06,761 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:53:06,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:06,762 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:06,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 01:53:06,763 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:06,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:53:06,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:53:06,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:53:06,764 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 01:53:06,765 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:06,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 01:53:06,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 01:53:06,766 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 01:53:06,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 01:53:06,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:06,767 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:06,768 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:06,769 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:06,770 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:06,771 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:06,772 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:06,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:06,774 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:53:06,774 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:06,774 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:53:06,774 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:53:06,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:53:06,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:53:06,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:06,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:06,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:06,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:06,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:53:06,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:06,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:06,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:53:06,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:53:06,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:53:06,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 01:53:06,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:53:06,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:53:06,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:53:07,170 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:07,309 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:07,309 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:07,309 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:07,412 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:53:07,412 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 01:53:07,414 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:07 BoogieIcfgContainer
[2020-11-25 01:53:07,414 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:06" (2/2) ...
[2020-11-25 01:53:07,414 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:53:07,414 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5348dc8a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:07, skipping insertion in model container
[2020-11-25 01:53:07,414 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:53:07,415 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:07,415 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:53:07,416 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:53:07,416 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/3) ...
[2020-11-25 01:53:07,417 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@572429c0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:07, skipping insertion in model container
[2020-11-25 01:53:07,417 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:06" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:53:07,453 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:07 NWAContainer
[2020-11-25 01:53:07,453 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:07,453 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:07,453 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:53:07,454 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:53:07,455 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:07" (3/4) ...
[2020-11-25 01:53:07,455 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@10ad6112 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:07, skipping insertion in model container
[2020-11-25 01:53:07,456 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:07" (4/4) ...
[2020-11-25 01:53:07,458 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:53:07,462 INFO  L110   BuchiProductObserver]: Initial RCFG 1506 locations, 1892 edges
[2020-11-25 01:53:07,462 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:53:07,472 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:53:08,781 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:53:08,785 INFO  L110   BuchiProductObserver]: BuchiProgram size 3572 locations, 6130 edges
[2020-11-25 01:53:08,786 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:08 BoogieIcfgContainer
[2020-11-25 01:53:08,786 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:08,786 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:53:08,786 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:53:08,787 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:53:08,788 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:08" (1/1) ...
[2020-11-25 01:53:08,860 INFO  L313           BlockEncoder]: Initial Icfg 3572 locations, 6130 edges
[2020-11-25 01:53:08,861 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:53:08,861 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:08,861 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:53:08,862 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:53:08,872 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 01:53:08,880 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:53:08,890 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:53:08,894 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:53:08,897 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:53:08,898 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:53:08,904 INFO  L313           BlockEncoder]: Encoded RCFG 3516 locations, 5982 edges
[2020-11-25 01:53:08,904 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:08 BasicIcfg
[2020-11-25 01:53:08,904 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:53:08,904 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:53:08,905 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:53:08,907 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:53:08,907 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,907 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:06" (1/6) ...
[2020-11-25 01:53:08,909 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@584647be and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:08, skipping insertion in model container
[2020-11-25 01:53:08,910 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,910 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:06" (2/6) ...
[2020-11-25 01:53:08,910 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@584647be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:08, skipping insertion in model container
[2020-11-25 01:53:08,910 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,910 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:07" (3/6) ...
[2020-11-25 01:53:08,910 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@584647be and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:53:08, skipping insertion in model container
[2020-11-25 01:53:08,910 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,910 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:07" (4/6) ...
[2020-11-25 01:53:08,910 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@584647be and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:08, skipping insertion in model container
[2020-11-25 01:53:08,910 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,911 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:08" (5/6) ...
[2020-11-25 01:53:08,911 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@584647be and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:53:08, skipping insertion in model container
[2020-11-25 01:53:08,911 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:08,911 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:08" (6/6) ...
[2020-11-25 01:53:08,912 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_approve.bpl_BEv2
[2020-11-25 01:53:08,943 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:53:08,944 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:53:08,944 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:53:08,944 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:53:08,944 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:53:08,944 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:53:08,944 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:53:08,944 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:53:08,944 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:53:08,976 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3516 states.
[2020-11-25 01:53:09,022 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:09,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:09,023 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:09,031 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:09,031 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:09,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:53:09,032 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3516 states.
[2020-11-25 01:53:09,048 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:09,048 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:09,048 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:09,050 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:09,050 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_MyToken0 := false;
[L3]                 call_approve_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND TRUE   choice == 19
[L3987]              gas := gas - 21000;
[L3988]  COND FALSE  !(gas >= 0)
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:09,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:09,065 INFO  L82        PathProgramCache]: Analyzing trace with hash 1294218706, now seen corresponding path program 1 times
[2020-11-25 01:53:09,068 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:09,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:09,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:09,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:09,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:09,134 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:09,327 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:09,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:09,330 INFO  L87              Difference]: Start difference. First operand 3516 states. Second operand 4 states.
[2020-11-25 01:53:09,676 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:09,677 INFO  L93              Difference]: Finished difference Result 2376 states and 2579 transitions.
[2020-11-25 01:53:09,677 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:09,678 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2376 states and 2579 transitions.
[2020-11-25 01:53:09,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:09,712 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2376 states to 2376 states and 2579 transitions.
[2020-11-25 01:53:09,713 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:53:09,716 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 883
[2020-11-25 01:53:09,717 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2376 states and 2579 transitions.
[2020-11-25 01:53:09,724 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:09,724 INFO  L728         BuchiCegarLoop]: Abstraction has 2376 states and 2579 transitions.
[2020-11-25 01:53:09,741 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2376 states and 2579 transitions.
[2020-11-25 01:53:09,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2376 to 2376.
[2020-11-25 01:53:09,791 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2376 states.
[2020-11-25 01:53:09,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2376 states to 2376 states and 2579 transitions.
[2020-11-25 01:53:09,797 INFO  L751         BuchiCegarLoop]: Abstraction has 2376 states and 2579 transitions.
[2020-11-25 01:53:09,797 INFO  L631         BuchiCegarLoop]: Abstraction has 2376 states and 2579 transitions.
[2020-11-25 01:53:09,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:53:09,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2376 states and 2579 transitions.
[2020-11-25 01:53:09,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:09,806 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:09,806 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:09,809 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:09,809 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_MyToken0 := false;
[L3]                 call_approve_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND TRUE   revert
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:09,814 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:09,814 INFO  L82        PathProgramCache]: Analyzing trace with hash 835385589, now seen corresponding path program 1 times
[2020-11-25 01:53:09,815 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:09,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:09,852 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:09,853 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:09,853 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:09,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:09,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:09,855 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:09,855 INFO  L87              Difference]: Start difference. First operand 2376 states and 2579 transitions. cyclomatic complexity: 205 Second operand 4 states.
[2020-11-25 01:53:10,318 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:10,318 INFO  L93              Difference]: Finished difference Result 3526 states and 3981 transitions.
[2020-11-25 01:53:10,318 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:10,318 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3526 states and 3981 transitions.
[2020-11-25 01:53:10,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:53:10,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3526 states to 3422 states and 3871 transitions.
[2020-11-25 01:53:10,354 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1213
[2020-11-25 01:53:10,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1218
[2020-11-25 01:53:10,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3422 states and 3871 transitions.
[2020-11-25 01:53:10,361 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:10,361 INFO  L728         BuchiCegarLoop]: Abstraction has 3422 states and 3871 transitions.
[2020-11-25 01:53:10,363 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3422 states and 3871 transitions.
[2020-11-25 01:53:10,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3422 to 2573.
[2020-11-25 01:53:10,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2573 states.
[2020-11-25 01:53:10,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2573 states to 2573 states and 2776 transitions.
[2020-11-25 01:53:10,393 INFO  L751         BuchiCegarLoop]: Abstraction has 2573 states and 2776 transitions.
[2020-11-25 01:53:10,393 INFO  L631         BuchiCegarLoop]: Abstraction has 2573 states and 2776 transitions.
[2020-11-25 01:53:10,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:53:10,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2573 states and 2776 transitions.
[2020-11-25 01:53:10,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:53:10,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:10,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:10,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:10,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_MyToken0 := false;
[L3]                 call_approve_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:10,404 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:10,404 INFO  L82        PathProgramCache]: Analyzing trace with hash -1571627, now seen corresponding path program 1 times
[2020-11-25 01:53:10,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:10,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:10,579 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:10,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:10,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 01:53:10,580 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:10,580 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 01:53:10,580 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 01:53:10,581 INFO  L87              Difference]: Start difference. First operand 2573 states and 2776 transitions. cyclomatic complexity: 205 Second operand 13 states.
[2020-11-25 01:53:11,923 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:11,923 INFO  L93              Difference]: Finished difference Result 2694 states and 2930 transitions.
[2020-11-25 01:53:11,924 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 01:53:11,924 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2694 states and 2930 transitions.
[2020-11-25 01:53:11,931 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 01:53:11,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2694 states to 2694 states and 2930 transitions.
[2020-11-25 01:53:11,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1053
[2020-11-25 01:53:11,943 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1053
[2020-11-25 01:53:11,943 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2694 states and 2930 transitions.
[2020-11-25 01:53:11,945 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:11,945 INFO  L728         BuchiCegarLoop]: Abstraction has 2694 states and 2930 transitions.
[2020-11-25 01:53:11,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2694 states and 2930 transitions.
[2020-11-25 01:53:11,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2694 to 2661.
[2020-11-25 01:53:11,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2661 states.
[2020-11-25 01:53:11,970 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2661 states to 2661 states and 2883 transitions.
[2020-11-25 01:53:11,971 INFO  L751         BuchiCegarLoop]: Abstraction has 2661 states and 2883 transitions.
[2020-11-25 01:53:11,971 INFO  L631         BuchiCegarLoop]: Abstraction has 2661 states and 2883 transitions.
[2020-11-25 01:53:11,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:53:11,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2661 states and 2883 transitions.
[2020-11-25 01:53:11,976 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:53:11,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:11,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:11,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:11,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_MyToken0 := false;
[L3]                 call_approve_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND TRUE   __exception
[L992]               __tmp__Balance := Balance;
[L993]               __tmp__DType := DType;
[L994]               __tmp__Alloc := Alloc;
[L995]               __tmp__balance_ADDR := balance_ADDR;
[L996]               __tmp__M_Ref_int := M_Ref_int;
[L997]               __tmp__sum_balances0 := sum_balances0;
[L998]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L999]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1000]              __tmp__sum_allowed1 := sum_allowed1;
[L1001]              __tmp__Length := Length;
[L1002]              __tmp__now := now;
[L1003]              __tmp__owner_Owned := owner_Owned;
[L1004]              __tmp__newOwner_Owned := newOwner_Owned;
[L1005]              __tmp__symbol_MyToken := symbol_MyToken;
[L1006]              __tmp__name_MyToken := name_MyToken;
[L1007]              __tmp__decimals_MyToken := decimals_MyToken;
[L1008]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1009]              __tmp__balances_MyToken := balances_MyToken;
[L1010]              __tmp__allowed_MyToken := allowed_MyToken;
[L1011]  CALL        call success_s415 := approve~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2327]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2328]              __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2329]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2330]              success_s415 := true;
[L1011]  RET         call success_s415 := approve~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1012]              assume revert || gas < 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND TRUE   __exception
[L992]               __tmp__Balance := Balance;
[L993]               __tmp__DType := DType;
[L994]               __tmp__Alloc := Alloc;
[L995]               __tmp__balance_ADDR := balance_ADDR;
[L996]               __tmp__M_Ref_int := M_Ref_int;
[L997]               __tmp__sum_balances0 := sum_balances0;
[L998]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L999]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1000]              __tmp__sum_allowed1 := sum_allowed1;
[L1001]              __tmp__Length := Length;
[L1002]              __tmp__now := now;
[L1003]              __tmp__owner_Owned := owner_Owned;
[L1004]              __tmp__newOwner_Owned := newOwner_Owned;
[L1005]              __tmp__symbol_MyToken := symbol_MyToken;
[L1006]              __tmp__name_MyToken := name_MyToken;
[L1007]              __tmp__decimals_MyToken := decimals_MyToken;
[L1008]              __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L1009]              __tmp__balances_MyToken := balances_MyToken;
[L1010]              __tmp__allowed_MyToken := allowed_MyToken;
[L1011]  CALL        call success_s415 := approve~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2327]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2328]              __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2329]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2330]              success_s415 := true;
[L1011]  RET         call success_s415 := approve~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1012]              assume revert || gas < 0;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:11,981 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:11,981 INFO  L82        PathProgramCache]: Analyzing trace with hash 1811057442, now seen corresponding path program 1 times
[2020-11-25 01:53:11,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:11,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:12,012 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:12,012 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:12,012 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:53:12,013 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:12,013 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 01:53:12,013 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 01:53:12,013 INFO  L87              Difference]: Start difference. First operand 2661 states and 2883 transitions. cyclomatic complexity: 226 Second operand 5 states.
[2020-11-25 01:53:12,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:12,281 INFO  L93              Difference]: Finished difference Result 3420 states and 3789 transitions.
[2020-11-25 01:53:12,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:53:12,282 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3420 states and 3789 transitions.
[2020-11-25 01:53:12,291 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 01:53:12,300 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3420 states to 2604 states and 2971 transitions.
[2020-11-25 01:53:12,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 811
[2020-11-25 01:53:12,301 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 811
[2020-11-25 01:53:12,301 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2604 states and 2971 transitions.
[2020-11-25 01:53:12,304 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:12,304 INFO  L728         BuchiCegarLoop]: Abstraction has 2604 states and 2971 transitions.
[2020-11-25 01:53:12,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2604 states and 2971 transitions.
[2020-11-25 01:53:12,321 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2604 to 1705.
[2020-11-25 01:53:12,321 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1705 states.
[2020-11-25 01:53:12,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1705 states to 1705 states and 1834 transitions.
[2020-11-25 01:53:12,323 INFO  L751         BuchiCegarLoop]: Abstraction has 1705 states and 1834 transitions.
[2020-11-25 01:53:12,323 INFO  L631         BuchiCegarLoop]: Abstraction has 1705 states and 1834 transitions.
[2020-11-25 01:53:12,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:53:12,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1705 states and 1834 transitions.
[2020-11-25 01:53:12,325 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:12,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:12,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:12,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:12,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_MyToken0 := false;
[L3]                 call_approve_MyToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4124]              assume null == 0;
[L4125]  CALL        call this := FreshRefGenerator__success();
[L1864]              havoc newRef;
[L1865]              assume Alloc[newRef] == false;
[L1866]              Alloc[newRef] := true;
[L1867]              assume newRef != null;
[L4125]  RET         call this := FreshRefGenerator__success();
[L4126]              assume now >= 0;
[L4127]              assume DType[this] == MyToken;
[L4128]              assume msgvalue_MSG == 0;
[L4129]              gas := gas - 53000;
[L4130]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2218]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1985]              assume msgsender_MSG != null;
[L1986]              Balance[this] := 0;
[L2000]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2001]  COND FALSE  !(revert)
[L2218]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2219]  COND FALSE  !(revert)
[L2222]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2052]              assume msgsender_MSG != null;
[L2053]              Balance[this] := 0;
[L2054]              owner_Owned[this] := null;
[L2055]              newOwner_Owned[this] := null;
[L2057]              owner_Owned[this] := msgsender_MSG;
[L2070]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2071]  COND FALSE  !(revert)
[L2222]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2223]  COND FALSE  !(revert)
[L2226]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]              assume msgsender_MSG != null;
[L1882]              Balance[this] := 0;
[L1896]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1897]  COND FALSE  !(revert)
[L2226]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2227]  COND FALSE  !(revert)
[L2230]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2172]              assume msgsender_MSG != null;
[L2173]              Balance[this] := 0;
[L2174]              symbol_MyToken[this] := -1251229519;
[L2175]              name_MyToken[this] := -1251229519;
[L2176]              decimals_MyToken[this] := 0;
[L2177]              _totalSupply_MyToken[this] := 0;
[L2178]              balances_MyToken[this] := zeroRefintArr();
[L2179]              sum_balances0[this] := 0;
[L2180]              allowed_MyToken[this] := zeroRefRefintArr();
[L2181]              sum_allowed1[this] := 0;
[L2183]              name_MyToken[this] := tokenName_s318;
[L2184]              symbol_MyToken[this] := tokenSymbol_s318;
[L2185]              decimals_MyToken[this] := tokenDecimals_s318;
[L2186]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2188]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2189]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2190]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2191]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2230]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2231]  COND FALSE  !(revert)
[L794]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L795]               assume !revert && gas >= 0;
[L4130]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4131]              assume !revert && gas >= 0;
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != spender_s415);
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

Loop:
[L4134]  CALL        call CorralChoice_MyToken(this);
[L3927]              havoc msgsender_MSG;
[L3928]              havoc msgvalue_MSG;
[L3929]              havoc choice;
[L3930]              havoc a_s23;
[L3931]              havoc b_s23;
[L3932]              havoc c_s23;
[L3933]              havoc a_s45;
[L3934]              havoc b_s45;
[L3935]              havoc c_s45;
[L3936]              havoc a_s73;
[L3937]              havoc b_s73;
[L3938]              havoc c_s73;
[L3939]              havoc a_s95;
[L3940]              havoc b_s95;
[L3941]              havoc c_s95;
[L3942]              havoc __ret_0_totalSupply;
[L3943]              havoc tokenOwner_s344;
[L3944]              havoc balance_s344;
[L3945]              havoc tokenOwner_s490;
[L3946]              havoc spender_s490;
[L3947]              havoc remaining_s490;
[L3948]              havoc to_s387;
[L3949]              havoc tokens_s387;
[L3950]              havoc success_s387;
[L3951]              havoc spender_s415;
[L3952]              havoc tokens_s415;
[L3953]              havoc success_s415;
[L3954]              havoc from_s474;
[L3955]              havoc to_s474;
[L3956]              havoc tokens_s474;
[L3957]              havoc success_s474;
[L3958]              havoc __ret_0_owner;
[L3959]              havoc __ret_0_newOwner;
[L3960]              havoc _newOwner_s217;
[L3961]              havoc __ret_0_symbol;
[L3962]              havoc __ret_0_name;
[L3963]              havoc __ret_0_decimals;
[L3964]              havoc __ret_0__totalSupply;
[L3965]              havoc tokenName_s318;
[L3966]              havoc tokenSymbol_s318;
[L3967]              havoc tokenDecimals_s318;
[L3968]              havoc initialSupply_s318;
[L3969]              havoc spender_s533;
[L3970]              havoc tokens_s533;
[L3971]              havoc data_s533;
[L3972]              havoc success_s533;
[L3973]              havoc tmpNow;
[L3974]              havoc gas;
[L3975]              assume gas > 4000000 && gas <= 8000000;
[L3976]              tmpNow := now;
[L3977]              havoc now;
[L3978]              assume now > tmpNow;
[L3979]              assume msgsender_MSG != null;
[L3980]              assume DType[msgsender_MSG] != SafeMath;
[L3981]              assume DType[msgsender_MSG] != ERC20Interface;
[L3982]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3983]              assume DType[msgsender_MSG] != Owned;
[L3984]              assume DType[msgsender_MSG] != MyToken;
[L3985]              Alloc[msgsender_MSG] := true;
[L3986]  COND FALSE  !(choice == 19)
[L3994]  COND FALSE  !(choice == 18)
[L4002]  COND FALSE  !(choice == 17)
[L4010]  COND FALSE  !(choice == 16)
[L4018]  COND FALSE  !(choice == 15)
[L4024]  COND FALSE  !(choice == 14)
[L4030]  COND FALSE  !(choice == 13)
[L4036]  COND FALSE  !(choice == 12)
[L4043]  COND TRUE   choice == 11
[L4044]              gas := gas - 21000;
[L4045]  COND TRUE   gas >= 0
[L4046]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4047]              assume msgvalue_MSG == 0;
[L4048]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s415;
[L3]                 call_approve_MyToken0 := true;
[L3]                 call_approve_MyToken0 := false;
[L3]                 revert := revert_hold;
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2336]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2337]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2338]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2339]              assert { :EventEmitted "Approval_MyToken" } true;
[L2340]              success_s415 := true;
[L1014]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1015]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s415 == true && allowed_MyToken[this][msgsender_MSG][spender_s415] == tokens_s415) && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this][p1][p2] == old(allowed_MyToken[this][p1][p2])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4048]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4134]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:12,330 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:12,330 INFO  L82        PathProgramCache]: Analyzing trace with hash 919728665, now seen corresponding path program 1 times
[2020-11-25 01:53:12,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:12,356 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:12,426 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-25 01:53:12,426 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:12,426 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:53:12,426 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:12,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:53:12,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:53:12,427 INFO  L87              Difference]: Start difference. First operand 1705 states and 1834 transitions. cyclomatic complexity: 132 Second operand 7 states.
[2020-11-25 01:53:12,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:12,689 INFO  L93              Difference]: Finished difference Result 925 states and 989 transitions.
[2020-11-25 01:53:12,690 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:53:12,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 925 states and 989 transitions.
[2020-11-25 01:53:12,691 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:53:12,691 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 925 states to 0 states and 0 transitions.
[2020-11-25 01:53:12,691 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:53:12,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:53:12,692 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:53:12,692 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:12,692 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:12,692 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:12,692 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:53:12,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:53:12,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:53:12,692 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:53:12,692 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:53:12,695 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:53:12 BasicIcfg
[2020-11-25 01:53:12,695 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:53:12,695 INFO  L168              Benchmark]: Toolchain (without parser) took 6149.58 ms. Allocated memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: 538.4 MB). Free memory was 935.2 MB in the beginning and 920.0 MB in the end (delta: 15.2 MB). Peak memory consumption was 553.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,696 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,696 INFO  L168              Benchmark]: Boogie Preprocessor took 88.92 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,697 INFO  L168              Benchmark]: UtopiaSpecLang took 58.91 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,697 INFO  L168              Benchmark]: Boogie Printer took 14.26 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,697 INFO  L168              Benchmark]: RCFGBuilder took 705.18 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,697 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.44 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,697 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1332.54 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.5 MB). Free memory was 797.4 MB in the beginning and 1.0 GB in the end (delta: -222.5 MB). Peak memory consumption was 176.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,698 INFO  L168              Benchmark]: BlockEncodingV2 took 118.19 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 964.6 MB in the end (delta: 55.3 MB). Peak memory consumption was 55.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,698 INFO  L168              Benchmark]: BuchiAutomizer took 3790.56 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 343.9 MB). Free memory was 956.3 MB in the beginning and 920.0 MB in the end (delta: 36.2 MB). Peak memory consumption was 380.2 MB. Max. memory is 15.3 GB.
[2020-11-25 01:53:12,701 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3572 locations, 6130 edges
  - StatisticsResult: Encoded RCFG
    3516 locations, 5982 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 88.92 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.91 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.26 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 705.18 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.44 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1332.54 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.5 MB). Free memory was 797.4 MB in the beginning and 1.0 GB in the end (delta: -222.5 MB). Peak memory consumption was 176.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 118.19 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 964.6 MB in the end (delta: 55.3 MB). Peak memory consumption was 55.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3790.56 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 343.9 MB). Free memory was 956.3 MB in the beginning and 920.0 MB in the end (delta: 36.2 MB). Peak memory consumption was 380.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1506 locations, 1892 edges
  - StatisticsResult: BuchiProgram size
    3572 locations, 6130 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 13 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.7s and 6 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.4s. Construction of modules took 2.0s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1781 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2661 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12252 SDtfs, 13336 SDslu, 16963 SDs, 0 SdLazy, 20973 SolverSat, 2389 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_MyToken0) ==> ( <>(success_approve_MyToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
