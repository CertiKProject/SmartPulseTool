This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:32:26,061 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:32:26,062 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:32:26,073 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:32:26,073 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:32:26,074 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:32:26,075 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:32:26,077 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:32:26,078 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:32:26,079 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:32:26,079 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:32:26,080 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:32:26,080 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:32:26,081 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:32:26,082 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:32:26,083 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:32:26,083 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:32:26,085 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:32:26,086 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:32:26,087 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:32:26,088 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:32:26,089 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:32:26,091 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:32:26,091 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:32:26,091 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:32:26,092 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:32:26,092 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:32:26,093 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:32:26,093 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:32:26,093 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:32:26,094 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:32:26,094 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:32:26,095 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:32:26,096 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:32:26,096 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:32:26,096 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:32:26,097 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:32:26,097 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:32:26,097 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:32:26,098 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:32:26,098 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:32:26,098 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:32:26,106 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:32:26,106 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:32:26,107 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:32:26,107 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:32:26,107 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:32:26,107 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:32:26,107 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:32:26,108 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:32:26,108 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:32:26,108 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:32:26,109 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:32:26,110 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:32:26,110 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:32:26,110 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:32:26,133 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:32:26,145 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:32:26,148 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:32:26,149 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:32:26,149 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:32:26,150 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl
[2020-11-25 01:32:26,150 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl'
[2020-11-25 01:32:26,221 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:32:26,222 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:32:26,223 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:32:26,223 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:32:26,223 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:32:26,239 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,240 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,268 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,269 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,286 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,294 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,300 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,308 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:32:26,309 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:32:26,309 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:32:26,310 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:32:26,314 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/1) ...
[2020-11-25 01:32:26,330 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:32:26,335 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:32:26,342 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:32:26,349 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s429==to_s429 && ( value_s429>_balances_ERC20[this][from_s429] || value_s429>_allowed_ERC20[this][from_s429][msg.sender] ) ) && value_s429>=0 ) && value_s429<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s429]>=0 ) && _balances_ERC20[this][to_s429]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s429]>=0 ) && _balances_ERC20[this][from_s429]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s429][msg.sender]>=0 ) && _allowed_ERC20[this][from_s429][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s429,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:32:26,353 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:32:26,354 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:32:26,361 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:32:26 PropertyContainer
[2020-11-25 01:32:26,361 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:32:26,361 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:32:26,362 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:32:26,362 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:32:26,362 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/2) ...
[2020-11-25 01:32:26,363 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:32:26,363 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:32:26,374 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:32:26" (2/2) ...
[2020-11-25 01:32:26,374 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:32:26,374 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:32:26,374 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:32:26,375 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:32:26,375 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/2) ...
[2020-11-25 01:32:26,425 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:32:26,426 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:32:26,426 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:32:26,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:32:26,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 01:32:26,427 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 01:32:26,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:32:26,428 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:32:26,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:32:26,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT
[2020-11-25 01:32:26,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT
[2020-11-25 01:32:26,429 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT
[2020-11-25 01:32:26,429 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT
[2020-11-25 01:32:26,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT
[2020-11-25 01:32:26,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT
[2020-11-25 01:32:26,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT
[2020-11-25 01:32:26,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:32:26,430 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:32:26,430 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BT
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:32:26,431 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:32:26,432 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:32:26,433 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__success
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__success
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__success
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__fail
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__success
[2020-11-25 01:32:26,434 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__fail
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__success
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__fail
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:32:26,435 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:32:26,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:32:26,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:32:26,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:32:26,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__success
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__success
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__success
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__fail
[2020-11-25 01:32:26,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__fail
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:32:26,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BT
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:32:26,442 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:32:26,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:32:26,740 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:32:26,740 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:32:27,070 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:32:27,070 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 01:32:27,072 INFO  L202        PluginConnector]: Adding new model BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:32:27 BoogieIcfgContainer
[2020-11-25 01:32:27,072 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:32:26" (2/2) ...
[2020-11-25 01:32:27,073 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:32:27,073 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@392db0b3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:32:27, skipping insertion in model container
[2020-11-25 01:32:27,073 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:32:27,074 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:32:27,074 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:32:27,075 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:32:27,076 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/3) ...
[2020-11-25 01:32:27,076 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4cc7d019 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:32:27, skipping insertion in model container
[2020-11-25 01:32:27,076 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:32:26" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:32:27,114 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:32:27 NWAContainer
[2020-11-25 01:32:27,114 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:32:27,115 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:32:27,115 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:32:27,115 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:32:27,116 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:32:27" (3/4) ...
[2020-11-25 01:32:27,117 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1cd0a3bb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:32:27, skipping insertion in model container
[2020-11-25 01:32:27,117 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:32:27" (4/4) ...
[2020-11-25 01:32:27,120 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:32:27,124 INFO  L110   BuchiProductObserver]: Initial RCFG 1239 locations, 1624 edges
[2020-11-25 01:32:27,124 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:32:27,134 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:32:28,310 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:32:28,314 INFO  L110   BuchiProductObserver]: BuchiProgram size 3020 locations, 5295 edges
[2020-11-25 01:32:28,314 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:32:28 BoogieIcfgContainer
[2020-11-25 01:32:28,314 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:32:28,314 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:32:28,314 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:32:28,316 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:32:28,316 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:32:28" (1/1) ...
[2020-11-25 01:32:28,379 INFO  L313           BlockEncoder]: Initial Icfg 3020 locations, 5295 edges
[2020-11-25 01:32:28,379 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:32:28,380 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:32:28,380 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:32:28,380 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:32:28,390 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 11 locations because of local infeasibility
[2020-11-25 01:32:28,397 INFO  L70        RemoveSinkStates]: Removed 66 edges and 37 locations by removing sink states
[2020-11-25 01:32:28,407 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:32:28,411 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:32:28,414 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:32:28,415 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:32:28,420 INFO  L313           BlockEncoder]: Encoded RCFG 2950 locations, 5122 edges
[2020-11-25 01:32:28,420 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:32:28 BasicIcfg
[2020-11-25 01:32:28,420 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:32:28,420 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:32:28,421 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:32:28,422 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:32:28,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:32:26" (1/6) ...
[2020-11-25 01:32:28,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d3ef912 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:32:28, skipping insertion in model container
[2020-11-25 01:32:28,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:32:26" (2/6) ...
[2020-11-25 01:32:28,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d3ef912 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:32:28, skipping insertion in model container
[2020-11-25 01:32:28,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:32:27" (3/6) ...
[2020-11-25 01:32:28,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d3ef912 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:32:28, skipping insertion in model container
[2020-11-25 01:32:28,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:32:27" (4/6) ...
[2020-11-25 01:32:28,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d3ef912 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:32:28, skipping insertion in model container
[2020-11-25 01:32:28,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:32:28" (5/6) ...
[2020-11-25 01:32:28,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d3ef912 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:32:28, skipping insertion in model container
[2020-11-25 01:32:28,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:32:28,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:32:28" (6/6) ...
[2020-11-25 01:32:28,426 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transferfrom-self-fail.bpl_BEv2
[2020-11-25 01:32:28,460 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:32:28,460 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:32:28,460 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:32:28,460 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:32:28,460 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:32:28,460 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:32:28,460 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:32:28,461 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:32:28,461 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:32:28,494 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2950 states.
[2020-11-25 01:32:28,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:32:28,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:28,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:28,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:28,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:28,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:32:28,551 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2950 states.
[2020-11-25 01:32:28,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:32:28,564 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:28,564 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:28,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:28,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND TRUE   choice == 14
[L3365]              gas := gas - 21000;
[L3366]  COND FALSE  !(gas >= 0)
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:28,579 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:28,579 INFO  L82        PathProgramCache]: Analyzing trace with hash -2140451318, now seen corresponding path program 1 times
[2020-11-25 01:32:28,583 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:28,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:28,647 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:32:28,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:32:28,649 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:32:28,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:28,780 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:32:28,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:32:28,783 INFO  L87              Difference]: Start difference. First operand 2950 states. Second operand 4 states.
[2020-11-25 01:32:29,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:29,040 INFO  L93              Difference]: Finished difference Result 2053 states and 2311 transitions.
[2020-11-25 01:32:29,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:32:29,042 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2053 states and 2311 transitions.
[2020-11-25 01:32:29,053 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:32:29,068 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2053 states to 2053 states and 2311 transitions.
[2020-11-25 01:32:29,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 01:32:29,070 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 571
[2020-11-25 01:32:29,071 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2053 states and 2311 transitions.
[2020-11-25 01:32:29,076 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:29,076 INFO  L728         BuchiCegarLoop]: Abstraction has 2053 states and 2311 transitions.
[2020-11-25 01:32:29,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2053 states and 2311 transitions.
[2020-11-25 01:32:29,128 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2053 to 2053.
[2020-11-25 01:32:29,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2053 states.
[2020-11-25 01:32:29,134 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2053 states to 2053 states and 2311 transitions.
[2020-11-25 01:32:29,135 INFO  L751         BuchiCegarLoop]: Abstraction has 2053 states and 2311 transitions.
[2020-11-25 01:32:29,135 INFO  L631         BuchiCegarLoop]: Abstraction has 2053 states and 2311 transitions.
[2020-11-25 01:32:29,135 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:32:29,135 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2053 states and 2311 transitions.
[2020-11-25 01:32:29,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:32:29,142 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:29,142 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:29,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:29,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:29,148 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:29,148 INFO  L82        PathProgramCache]: Analyzing trace with hash 842509921, now seen corresponding path program 1 times
[2020-11-25 01:32:29,149 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:29,160 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:29,178 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:32:29,178 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:32:29,178 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:32:29,180 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:29,180 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:32:29,180 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:32:29,180 INFO  L87              Difference]: Start difference. First operand 2053 states and 2311 transitions. cyclomatic complexity: 260 Second operand 3 states.
[2020-11-25 01:32:29,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:29,242 INFO  L93              Difference]: Finished difference Result 2712 states and 3104 transitions.
[2020-11-25 01:32:29,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:32:29,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2712 states and 3104 transitions.
[2020-11-25 01:32:29,258 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2712 states to 2712 states and 3104 transitions.
[2020-11-25 01:32:29,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 756
[2020-11-25 01:32:29,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 756
[2020-11-25 01:32:29,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2712 states and 3104 transitions.
[2020-11-25 01:32:29,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:29,279 INFO  L728         BuchiCegarLoop]: Abstraction has 2712 states and 3104 transitions.
[2020-11-25 01:32:29,282 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2712 states and 3104 transitions.
[2020-11-25 01:32:29,312 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2712 to 2349.
[2020-11-25 01:32:29,312 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2349 states.
[2020-11-25 01:32:29,315 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2349 states to 2349 states and 2668 transitions.
[2020-11-25 01:32:29,316 INFO  L751         BuchiCegarLoop]: Abstraction has 2349 states and 2668 transitions.
[2020-11-25 01:32:29,316 INFO  L631         BuchiCegarLoop]: Abstraction has 2349 states and 2668 transitions.
[2020-11-25 01:32:29,316 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:32:29,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2349 states and 2668 transitions.
[2020-11-25 01:32:29,321 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,321 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:29,321 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:29,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:29,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND TRUE   !(account_s571 != null)
[L2078]              revert := true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND TRUE   revert
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:29,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:29,325 INFO  L82        PathProgramCache]: Analyzing trace with hash -1684108075, now seen corresponding path program 1 times
[2020-11-25 01:32:29,326 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:29,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:29,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 01:32:29,367 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:32:29,367 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:32:29,367 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:29,367 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:32:29,367 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:32:29,368 INFO  L87              Difference]: Start difference. First operand 2349 states and 2668 transitions. cyclomatic complexity: 321 Second operand 7 states.
[2020-11-25 01:32:29,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:29,405 INFO  L93              Difference]: Finished difference Result 2357 states and 2675 transitions.
[2020-11-25 01:32:29,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:32:29,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2357 states and 2675 transitions.
[2020-11-25 01:32:29,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2357 states to 2348 states and 2666 transitions.
[2020-11-25 01:32:29,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 01:32:29,421 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 01:32:29,421 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2348 states and 2666 transitions.
[2020-11-25 01:32:29,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:29,423 INFO  L728         BuchiCegarLoop]: Abstraction has 2348 states and 2666 transitions.
[2020-11-25 01:32:29,427 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2348 states and 2666 transitions.
[2020-11-25 01:32:29,446 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2348 to 2348.
[2020-11-25 01:32:29,446 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2348 states.
[2020-11-25 01:32:29,449 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2348 states to 2348 states and 2666 transitions.
[2020-11-25 01:32:29,449 INFO  L751         BuchiCegarLoop]: Abstraction has 2348 states and 2666 transitions.
[2020-11-25 01:32:29,449 INFO  L631         BuchiCegarLoop]: Abstraction has 2348 states and 2666 transitions.
[2020-11-25 01:32:29,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:32:29,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2348 states and 2666 transitions.
[2020-11-25 01:32:29,454 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,454 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:29,454 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:29,456 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:29,456 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND TRUE   !(c_s173 >= a_s173)
[L1667]              revert := true;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND TRUE   revert
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND TRUE   revert
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND TRUE   !(value_s429 <= _balances_ERC20[this][from_s429])
[L1927]              revert := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:29,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:29,459 INFO  L82        PathProgramCache]: Analyzing trace with hash -240422462, now seen corresponding path program 1 times
[2020-11-25 01:32:29,459 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:29,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:29,495 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 01:32:29,495 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:32:29,495 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:32:29,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:29,496 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:32:29,496 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:32:29,496 INFO  L87              Difference]: Start difference. First operand 2348 states and 2666 transitions. cyclomatic complexity: 320 Second operand 3 states.
[2020-11-25 01:32:29,533 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:29,533 INFO  L93              Difference]: Finished difference Result 2714 states and 3029 transitions.
[2020-11-25 01:32:29,534 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:32:29,534 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2714 states and 3029 transitions.
[2020-11-25 01:32:29,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,555 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2714 states to 2523 states and 2803 transitions.
[2020-11-25 01:32:29,555 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 695
[2020-11-25 01:32:29,555 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 01:32:29,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2523 states and 2803 transitions.
[2020-11-25 01:32:29,558 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:29,558 INFO  L728         BuchiCegarLoop]: Abstraction has 2523 states and 2803 transitions.
[2020-11-25 01:32:29,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2523 states and 2803 transitions.
[2020-11-25 01:32:29,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2523 to 2229.
[2020-11-25 01:32:29,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2229 states.
[2020-11-25 01:32:29,584 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2229 states to 2229 states and 2436 transitions.
[2020-11-25 01:32:29,584 INFO  L751         BuchiCegarLoop]: Abstraction has 2229 states and 2436 transitions.
[2020-11-25 01:32:29,584 INFO  L631         BuchiCegarLoop]: Abstraction has 2229 states and 2436 transitions.
[2020-11-25 01:32:29,584 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:32:29,584 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2229 states and 2436 transitions.
[2020-11-25 01:32:29,588 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:29,588 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:29,588 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:29,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:29,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND FALSE  !(!(value_s429 <= _balances_ERC20[this][from_s429]))
[L1930]  COND FALSE  !(!(value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1934]              __var_5 := null;
[L1935]  COND FALSE  !(!(to_s429 != null))
[L1939]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1939]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1940]  COND FALSE  !(revert)
[L1943]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s429];
[L1944]              _balances_ERC20[this][from_s429] := __var_6;
[L1945]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s429];
[L1946]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1946]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1947]  COND FALSE  !(revert)
[L1950]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s429];
[L1951]              _balances_ERC20[this][to_s429] := __var_7;
[L1952]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s429];
[L1953]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1953]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1954]  COND FALSE  !(revert)
[L1957]              sum__allowed1[from_s429] := sum__allowed1[from_s429] - _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1958]              _allowed_ERC20[this][from_s429][msgsender_MSG] := __var_8;
[L1959]              sum__allowed1[from_s429] := sum__allowed1[from_s429] + _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1960]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1961]              __ret_0_ := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND FALSE  !(!(value_s429 <= _balances_ERC20[this][from_s429]))
[L1930]  COND FALSE  !(!(value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1934]              __var_5 := null;
[L1935]  COND FALSE  !(!(to_s429 != null))
[L1939]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1939]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1940]  COND FALSE  !(revert)
[L1943]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s429];
[L1944]              _balances_ERC20[this][from_s429] := __var_6;
[L1945]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s429];
[L1946]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1946]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1947]  COND FALSE  !(revert)
[L1950]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s429];
[L1951]              _balances_ERC20[this][to_s429] := __var_7;
[L1952]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s429];
[L1953]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1953]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1954]  COND FALSE  !(revert)
[L1957]              sum__allowed1[from_s429] := sum__allowed1[from_s429] - _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1958]              _allowed_ERC20[this][from_s429][msgsender_MSG] := __var_8;
[L1959]              sum__allowed1[from_s429] := sum__allowed1[from_s429] + _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1960]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1961]              __ret_0_ := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:29,594 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:29,594 INFO  L82        PathProgramCache]: Analyzing trace with hash -553375599, now seen corresponding path program 1 times
[2020-11-25 01:32:29,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:29,619 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:29,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 20 trivial. 0 not checked.
[2020-11-25 01:32:29,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:32:29,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 01:32:29,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:29,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 01:32:29,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 01:32:29,767 INFO  L87              Difference]: Start difference. First operand 2229 states and 2436 transitions. cyclomatic complexity: 209 Second operand 13 states.
[2020-11-25 01:32:30,814 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:30,814 INFO  L93              Difference]: Finished difference Result 2320 states and 2539 transitions.
[2020-11-25 01:32:30,816 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 01:32:30,816 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2320 states and 2539 transitions.
[2020-11-25 01:32:30,826 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:32:30,838 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2320 states to 2320 states and 2539 transitions.
[2020-11-25 01:32:30,838 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 677
[2020-11-25 01:32:30,839 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 677
[2020-11-25 01:32:30,839 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2320 states and 2539 transitions.
[2020-11-25 01:32:30,840 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:30,840 INFO  L728         BuchiCegarLoop]: Abstraction has 2320 states and 2539 transitions.
[2020-11-25 01:32:30,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2320 states and 2539 transitions.
[2020-11-25 01:32:30,862 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2320 to 2143.
[2020-11-25 01:32:30,862 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2143 states.
[2020-11-25 01:32:30,864 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2143 states to 2143 states and 2325 transitions.
[2020-11-25 01:32:30,864 INFO  L751         BuchiCegarLoop]: Abstraction has 2143 states and 2325 transitions.
[2020-11-25 01:32:30,864 INFO  L631         BuchiCegarLoop]: Abstraction has 2143 states and 2325 transitions.
[2020-11-25 01:32:30,864 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:32:30,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2143 states and 2325 transitions.
[2020-11-25 01:32:30,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:32:30,867 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:32:30,867 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:32:30,869 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:32:30,869 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND TRUE   choice == 10
[L3390]              gas := gas - 21000;
[L3391]  COND TRUE   gas >= 0
[L3392]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3393]              assume msgvalue_MSG == 0;
[L3394]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s343, value_s343);
[L469]               havoc __exception;
[L470]               revert := false;
[L471]   COND FALSE  !(__exception)
[L493]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s343, value_s343);
[L1863]              __var_4 := null;
[L1864]  COND FALSE  !(!(spender_s343 != null))
[L1868]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s343];
[L1869]              _allowed_ERC20[this][msgsender_MSG][spender_s343] := value_s343;
[L1870]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s343];
[L1871]              assert { :EventEmitted "Approval_ERC20" } true;
[L1872]              __ret_0_ := true;
[L493]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s343, value_s343);
[L494]               assume !revert && gas >= 0;
[L3394]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s343, value_s343);
[L3473]  RET         call CorralChoice_BT(this);
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND FALSE  !(!(value_s429 <= _balances_ERC20[this][from_s429]))
[L1930]  COND FALSE  !(!(value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1934]              __var_5 := null;
[L1935]  COND FALSE  !(!(to_s429 != null))
[L1939]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1939]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1940]  COND FALSE  !(revert)
[L1943]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s429];
[L1944]              _balances_ERC20[this][from_s429] := __var_6;
[L1945]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s429];
[L1946]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1946]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1947]  COND FALSE  !(revert)
[L1950]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s429];
[L1951]              _balances_ERC20[this][to_s429] := __var_7;
[L1952]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s429];
[L1953]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1953]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1954]  COND FALSE  !(revert)
[L1957]              sum__allowed1[from_s429] := sum__allowed1[from_s429] - _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1958]              _allowed_ERC20[this][from_s429][msgsender_MSG] := __var_8;
[L1959]              sum__allowed1[from_s429] := sum__allowed1[from_s429] + _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1960]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1961]              __ret_0_ := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND FALSE  !(choice == 11)
[L3389]  COND FALSE  !(choice == 10)
[L3396]  COND TRUE   choice == 9
[L3397]              gas := gas - 21000;
[L3398]  COND TRUE   gas >= 0
[L3399]              assume value_s429 >= 0 && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3400]              assume msgvalue_MSG == 0;
[L3401]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s429 == to_s429 && (value_s429 > _balances_ERC20[this][from_s429] || value_s429 > _allowed_ERC20[this][from_s429][msgsender_MSG])) && value_s429 >= 0) && value_s429 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s429] >= 0) && _balances_ERC20[this][to_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s429] >= 0) && _balances_ERC20[this][from_s429] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s429][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s429][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L525]               havoc __exception;
[L526]               revert := false;
[L527]   COND FALSE  !(__exception)
[L549]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L1926]  COND FALSE  !(!(value_s429 <= _balances_ERC20[this][from_s429]))
[L1930]  COND FALSE  !(!(value_s429 <= _allowed_ERC20[this][from_s429][msgsender_MSG]))
[L1934]              __var_5 := null;
[L1935]  COND FALSE  !(!(to_s429 != null))
[L1939]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1939]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s429], value_s429);
[L1940]  COND FALSE  !(revert)
[L1943]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s429];
[L1944]              _balances_ERC20[this][from_s429] := __var_6;
[L1945]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s429];
[L1946]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1946]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s429], value_s429);
[L1947]  COND FALSE  !(revert)
[L1950]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s429];
[L1951]              _balances_ERC20[this][to_s429] := __var_7;
[L1952]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s429];
[L1953]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1953]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s429][msgsender_MSG], value_s429);
[L1954]  COND FALSE  !(revert)
[L1957]              sum__allowed1[from_s429] := sum__allowed1[from_s429] - _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1958]              _allowed_ERC20[this][from_s429][msgsender_MSG] := __var_8;
[L1959]              sum__allowed1[from_s429] := sum__allowed1[from_s429] + _allowed_ERC20[this][from_s429][msgsender_MSG];
[L1960]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1961]              __ret_0_ := true;
[L549]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L550]               assume !revert && gas >= 0;
[L3401]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s429, to_s429, value_s429);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:32:30,873 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:32:30,873 INFO  L82        PathProgramCache]: Analyzing trace with hash 29786583, now seen corresponding path program 1 times
[2020-11-25 01:32:30,874 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:32:30,887 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:32:30,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 01:32:30,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:32:30,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:32:30,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:32:30,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:32:30,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=53, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:32:30,969 INFO  L87              Difference]: Start difference. First operand 2143 states and 2325 transitions. cyclomatic complexity: 185 Second operand 9 states.
[2020-11-25 01:32:31,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:32:31,389 INFO  L93              Difference]: Finished difference Result 1295 states and 1400 transitions.
[2020-11-25 01:32:31,390 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:32:31,390 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1295 states and 1400 transitions.
[2020-11-25 01:32:31,393 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:32:31,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1295 states to 0 states and 0 transitions.
[2020-11-25 01:32:31,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:32:31,393 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:32:31,394 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:32:31,394 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:32:31,394 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:32:31,394 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:32:31,394 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:32:31,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:32:31,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:32:31,394 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:32:31,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:32:31,398 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:32:31 BasicIcfg
[2020-11-25 01:32:31,398 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:32:31,399 INFO  L168              Benchmark]: Toolchain (without parser) took 5176.99 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 514.3 MB). Free memory was 940.6 MB in the beginning and 920.6 MB in the end (delta: 20.0 MB). Peak memory consumption was 534.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,400 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,400 INFO  L168              Benchmark]: Boogie Preprocessor took 85.52 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,400 INFO  L168              Benchmark]: UtopiaSpecLang took 52.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,401 INFO  L168              Benchmark]: Boogie Printer took 12.71 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,401 INFO  L168              Benchmark]: RCFGBuilder took 698.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,401 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.77 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,401 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1199.49 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 190.8 MB). Free memory was 824.2 MB in the beginning and 1.2 GB in the end (delta: -328.4 MB). Peak memory consumption was 193.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,402 INFO  L168              Benchmark]: BlockEncodingV2 took 105.93 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 55.5 MB). Peak memory consumption was 55.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,402 INFO  L168              Benchmark]: BuchiAutomizer took 2977.97 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 323.5 MB). Free memory was 1.1 GB in the beginning and 920.6 MB in the end (delta: 176.5 MB). Peak memory consumption was 500.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:32:31,404 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3020 locations, 5295 edges
  - StatisticsResult: Encoded RCFG
    2950 locations, 5122 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 85.52 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 52.67 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.71 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 698.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 833.2 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.77 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 824.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1199.49 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 190.8 MB). Free memory was 824.2 MB in the beginning and 1.2 GB in the end (delta: -328.4 MB). Peak memory consumption was 193.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 105.93 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 55.5 MB). Peak memory consumption was 55.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2977.97 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 323.5 MB). Free memory was 1.1 GB in the beginning and 920.6 MB in the end (delta: 176.5 MB). Peak memory consumption was 500.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1239 locations, 1624 edges
  - StatisticsResult: BuchiProgram size
    3020 locations, 5295 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 13 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.9s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.4s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 834 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2349 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12998 SDtfs, 7959 SDslu, 25850 SDs, 0 SdLazy, 20721 SolverSat, 1656 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
