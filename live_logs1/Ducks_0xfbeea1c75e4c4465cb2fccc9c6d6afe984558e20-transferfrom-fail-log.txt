This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:59:59,289 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:59:59,290 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:59:59,301 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:59:59,301 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:59:59,302 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:59:59,303 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:59:59,304 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:59:59,306 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:59:59,306 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:59:59,307 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:59:59,307 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:59:59,308 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:59:59,308 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:59:59,309 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:59:59,310 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:59:59,310 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:59:59,311 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:59:59,313 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:59:59,314 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:59:59,315 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:59:59,315 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:59:59,317 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:59:59,317 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:59:59,317 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:59:59,318 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:59:59,318 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:59:59,319 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:59:59,319 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:59:59,319 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:59:59,319 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:59:59,320 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:59:59,320 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:59:59,321 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:59:59,322 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:59:59,322 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:59:59,322 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:59:59,322 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:59:59,322 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:59:59,323 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:59:59,324 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:59:59,324 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:59:59,332 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:59:59,332 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:59:59,333 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:59:59,333 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:59:59,333 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:59:59,333 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:59:59,333 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:59:59,333 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:59:59,333 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:59:59,333 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:59:59,334 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:59:59,334 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:59:59,335 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:59:59,335 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:59:59,335 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:59:59,335 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:59:59,335 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:59:59,335 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:59:59,357 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:59:59,371 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:59:59,374 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:59:59,376 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:59:59,376 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:59:59,377 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl
[2020-11-25 14:59:59,377 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl'
[2020-11-25 14:59:59,446 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:59:59,448 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:59:59,448 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:59:59,448 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:59:59,448 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:59:59,465 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,466 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,491 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,492 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,508 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,515 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,520 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,528 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:59:59,529 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:59:59,529 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:59:59,531 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:59:59,534 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/1) ...
[2020-11-25 14:59:59,549 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transferFrom(from, to, value), from != to && (value > balances_Ducks[this][from] || value > allowed_Ducks[this][from][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transferFrom)))
[2020-11-25 14:59:59,555 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transferFrom(from, to, value), from != to && (value > balances_Ducks[this][from] || value > allowed_Ducks[this][from][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transferFrom)))
[2020-11-25 14:59:59,562 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transferFrom(from, to, value), from != to && (value > balances_Ducks[this][from] || value > allowed_Ducks[this][from][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transferFrom)))
[2020-11-25 14:59:59,569 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s393!=to_s393 && ( ( tokens_s393>balances_Ducks[this][from_s393] || tokens_s393>allowed_Ducks[this][from_s393][msg.sender] ) || ( balances_Ducks[this][to_s393] + tokens_s393 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s393]>=0 ) && balances_Ducks[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][from_s393]>=0 ) && balances_Ducks[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Ducks[this][from_s393][msg.sender]>=0 ) && allowed_Ducks[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPGT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:59:59,573 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transferFrom(from, to, value), from != to && (value > balances_Ducks[this][from] || value > allowed_Ducks[this][from][msg.sender] || balances_Ducks[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(Ducks.transferFrom)))
[2020-11-25 14:59:59,573 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Ducks0) ==> ( <>AP(fail_transferFrom_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:59:59,579 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:59:59 PropertyContainer
[2020-11-25 14:59:59,579 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:59:59,579 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:59:59,579 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:59:59,580 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:59:59,580 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/2) ...
[2020-11-25 14:59:59,581 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:59:59,581 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:59:59,591 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:59:59" (2/2) ...
[2020-11-25 14:59:59,591 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:59:59,592 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:59:59,592 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:59:59,592 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:59:59,592 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/2) ...
[2020-11-25 14:59:59,644 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:59:59,644 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:59:59,644 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:59:59,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:59:59,645 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:59:59,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:59:59,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:59:59,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:59:59,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:59:59,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:59:59,647 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:59:59,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:59:59,647 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:59:59,647 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:59:59,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:59:59,648 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:59:59,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:59:59,648 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:59:59,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:59:59,649 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:59:59,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:59:59,649 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:59:59,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:59:59,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:59:59,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:59:59,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:59:59,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:59:59,650 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:59:59,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:59:59,650 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:59:59,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:59:59,651 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:59:59,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:59:59,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:59:59,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:59:59,652 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:59:59,652 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:59:59,652 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:59:59,652 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:59:59,652 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:59:59,653 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:59:59,654 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:59:59,654 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:59:59,654 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:59:59,654 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:59:59,654 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:59:59,655 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,655 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,655 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,655 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,655 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,656 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,656 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,656 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,656 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:59:59,656 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:59:59,657 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:59:59,657 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:59:59,657 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:59:59,657 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:59:59,657 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:59:59,658 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:59:59,658 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:59:59,658 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:59:59,658 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:59:59,658 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:59:59,659 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:59:59,659 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:59:59,659 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:59:59,659 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:59:59,659 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:59:59,660 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:59:59,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:59:59,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:59:59,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:59:59,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:59:59,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:59:59,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:59:59,664 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:59:59,665 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:59:59,665 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:59:59,665 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:59:59,841 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:59:59,842 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:00:00,192 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:00:00,192 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 15:00:00,194 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:00 BoogieIcfgContainer
[2020-11-25 15:00:00,194 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:59:59" (2/2) ...
[2020-11-25 15:00:00,194 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:00:00,194 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6b503cee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:00, skipping insertion in model container
[2020-11-25 15:00:00,195 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:00:00,195 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:00:00,195 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:00:00,196 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:00:00,197 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/3) ...
[2020-11-25 15:00:00,197 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2522969 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:00, skipping insertion in model container
[2020-11-25 15:00:00,197 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:59:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:00:00,232 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:00 NWAContainer
[2020-11-25 15:00:00,232 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:00:00,232 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:00:00,233 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:00:00,233 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:00:00,234 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:00" (3/4) ...
[2020-11-25 15:00:00,235 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3b64d814 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:00, skipping insertion in model container
[2020-11-25 15:00:00,235 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:00" (4/4) ...
[2020-11-25 15:00:00,238 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:00:00,240 INFO  L110   BuchiProductObserver]: Initial RCFG 1048 locations, 1320 edges
[2020-11-25 15:00:00,240 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:00:00,250 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:00:01,328 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:00:01,331 INFO  L110   BuchiProductObserver]: BuchiProgram size 2486 locations, 4272 edges
[2020-11-25 15:00:01,332 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:01 BoogieIcfgContainer
[2020-11-25 15:00:01,332 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:00:01,332 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:00:01,332 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:00:01,334 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:00:01,334 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:01" (1/1) ...
[2020-11-25 15:00:01,398 INFO  L313           BlockEncoder]: Initial Icfg 2486 locations, 4272 edges
[2020-11-25 15:00:01,399 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:00:01,399 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:00:01,400 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:00:01,400 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:00:01,409 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 15:00:01,415 INFO  L70        RemoveSinkStates]: Removed 70 edges and 40 locations by removing sink states
[2020-11-25 15:00:01,425 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:00:01,429 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:00:01,431 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:00:01,432 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:00:01,435 INFO  L313           BlockEncoder]: Encoded RCFG 2423 locations, 4116 edges
[2020-11-25 15:00:01,435 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:00:01 BasicIcfg
[2020-11-25 15:00:01,435 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:00:01,436 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:00:01,436 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:00:01,438 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:00:01,438 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,438 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:59:59" (1/6) ...
[2020-11-25 15:00:01,440 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@19d5433e and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:01, skipping insertion in model container
[2020-11-25 15:00:01,440 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,440 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:59:59" (2/6) ...
[2020-11-25 15:00:01,440 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@19d5433e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:01, skipping insertion in model container
[2020-11-25 15:00:01,440 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,440 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:00:00" (3/6) ...
[2020-11-25 15:00:01,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@19d5433e and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:00:01, skipping insertion in model container
[2020-11-25 15:00:01,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:00:00" (4/6) ...
[2020-11-25 15:00:01,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@19d5433e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:00:01, skipping insertion in model container
[2020-11-25 15:00:01,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:00:01" (5/6) ...
[2020-11-25 15:00:01,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@19d5433e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:00:01, skipping insertion in model container
[2020-11-25 15:00:01,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:00:01,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:00:01" (6/6) ...
[2020-11-25 15:00:01,442 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-fail.bpl_BEv2
[2020-11-25 15:00:01,479 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:00:01,479 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:00:01,479 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:00:01,479 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:00:01,479 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:00:01,479 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:00:01,479 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:00:01,479 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:00:01,479 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:00:01,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2423 states.
[2020-11-25 15:00:01,545 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:01,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:01,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:01,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:01,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:01,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:00:01,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2423 states.
[2020-11-25 15:00:01,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:01,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:01,571 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:01,573 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:01,573 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:01,589 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:01,589 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460540416, now seen corresponding path program 1 times
[2020-11-25 15:00:01,594 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:01,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:01,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:00:01,674 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:01,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:01,678 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:01,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:01,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:01,804 INFO  L87              Difference]: Start difference. First operand 2423 states. Second operand 4 states.
[2020-11-25 15:00:02,020 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:02,020 INFO  L93              Difference]: Finished difference Result 1669 states and 1818 transitions.
[2020-11-25 15:00:02,020 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:02,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1669 states and 1818 transitions.
[2020-11-25 15:00:02,029 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:02,041 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1669 states to 1669 states and 1818 transitions.
[2020-11-25 15:00:02,042 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 15:00:02,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 15:00:02,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1669 states and 1818 transitions.
[2020-11-25 15:00:02,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:02,049 INFO  L728         BuchiCegarLoop]: Abstraction has 1669 states and 1818 transitions.
[2020-11-25 15:00:02,062 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1669 states and 1818 transitions.
[2020-11-25 15:00:02,098 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1669 to 1669.
[2020-11-25 15:00:02,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1669 states.
[2020-11-25 15:00:02,103 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1669 states to 1669 states and 1818 transitions.
[2020-11-25 15:00:02,104 INFO  L751         BuchiCegarLoop]: Abstraction has 1669 states and 1818 transitions.
[2020-11-25 15:00:02,104 INFO  L631         BuchiCegarLoop]: Abstraction has 1669 states and 1818 transitions.
[2020-11-25 15:00:02,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:00:02,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1669 states and 1818 transitions.
[2020-11-25 15:00:02,112 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:02,112 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:02,112 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:02,114 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:02,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND TRUE   revert
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND TRUE   revert
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND TRUE   !(b_s112 <= a_s112)
[L1349]              revert := true;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND TRUE   revert
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:02,119 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:02,119 INFO  L82        PathProgramCache]: Analyzing trace with hash -1909347266, now seen corresponding path program 1 times
[2020-11-25 15:00:02,120 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:02,130 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:02,153 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:00:02,154 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:02,154 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:02,155 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:02,155 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:02,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:02,156 INFO  L87              Difference]: Start difference. First operand 1669 states and 1818 transitions. cyclomatic complexity: 151 Second operand 4 states.
[2020-11-25 15:00:02,454 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:02,454 INFO  L93              Difference]: Finished difference Result 2181 states and 2410 transitions.
[2020-11-25 15:00:02,455 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:02,455 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2181 states and 2410 transitions.
[2020-11-25 15:00:02,464 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:00:02,472 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2181 states to 2105 states and 2328 transitions.
[2020-11-25 15:00:02,472 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 765
[2020-11-25 15:00:02,473 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 765
[2020-11-25 15:00:02,473 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2105 states and 2328 transitions.
[2020-11-25 15:00:02,475 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:02,475 INFO  L728         BuchiCegarLoop]: Abstraction has 2105 states and 2328 transitions.
[2020-11-25 15:00:02,477 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2105 states and 2328 transitions.
[2020-11-25 15:00:02,494 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2105 to 1811.
[2020-11-25 15:00:02,494 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1811 states.
[2020-11-25 15:00:02,496 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1811 states to 1811 states and 1963 transitions.
[2020-11-25 15:00:02,496 INFO  L751         BuchiCegarLoop]: Abstraction has 1811 states and 1963 transitions.
[2020-11-25 15:00:02,497 INFO  L631         BuchiCegarLoop]: Abstraction has 1811 states and 1963 transitions.
[2020-11-25 15:00:02,497 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:00:02,497 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1811 states and 1963 transitions.
[2020-11-25 15:00:02,500 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:00:02,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:02,501 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:02,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:02,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:02,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:02,507 INFO  L82        PathProgramCache]: Analyzing trace with hash 745458339, now seen corresponding path program 1 times
[2020-11-25 15:00:02,507 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:02,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:02,614 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 15:00:02,614 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:02,614 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 15:00:02,614 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:02,614 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:00:02,615 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:00:02,615 INFO  L87              Difference]: Start difference. First operand 1811 states and 1963 transitions. cyclomatic complexity: 154 Second operand 13 states.
[2020-11-25 15:00:03,708 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:03,708 INFO  L93              Difference]: Finished difference Result 1883 states and 2047 transitions.
[2020-11-25 15:00:03,708 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 15:00:03,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1883 states and 2047 transitions.
[2020-11-25 15:00:03,714 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:00:03,721 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1883 states to 1883 states and 2047 transitions.
[2020-11-25 15:00:03,721 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 710
[2020-11-25 15:00:03,721 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 710
[2020-11-25 15:00:03,721 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1883 states and 2047 transitions.
[2020-11-25 15:00:03,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:03,723 INFO  L728         BuchiCegarLoop]: Abstraction has 1883 states and 2047 transitions.
[2020-11-25 15:00:03,725 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1883 states and 2047 transitions.
[2020-11-25 15:00:03,739 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1883 to 1725.
[2020-11-25 15:00:03,740 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1725 states.
[2020-11-25 15:00:03,742 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1725 states to 1725 states and 1852 transitions.
[2020-11-25 15:00:03,742 INFO  L751         BuchiCegarLoop]: Abstraction has 1725 states and 1852 transitions.
[2020-11-25 15:00:03,742 INFO  L631         BuchiCegarLoop]: Abstraction has 1725 states and 1852 transitions.
[2020-11-25 15:00:03,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:00:03,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1725 states and 1852 transitions.
[2020-11-25 15:00:03,745 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:03,746 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:03,746 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:03,747 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:03,748 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND TRUE   __exception
[L401]               __tmp__Balance := Balance;
[L402]               __tmp__DType := DType;
[L403]               __tmp__Alloc := Alloc;
[L404]               __tmp__balance_ADDR := balance_ADDR;
[L405]               __tmp__M_Ref_int := M_Ref_int;
[L406]               __tmp__sum_balances0 := sum_balances0;
[L407]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L408]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L409]               __tmp__sum_allowed1 := sum_allowed1;
[L410]               __tmp__Length := Length;
[L411]               __tmp__now := now;
[L412]               __tmp__name_Ducks := name_Ducks;
[L413]               __tmp__symbol_Ducks := symbol_Ducks;
[L414]               __tmp__decimals_Ducks := decimals_Ducks;
[L415]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L416]               __tmp__balances_Ducks := balances_Ducks;
[L417]               __tmp__allowed_Ducks := allowed_Ducks;
[L418]   CALL        call Ducks_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L1440]  CALL        call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1273]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1258]              assume msgsender_MSG != null;
[L1259]              __tmp__Balance[this] := 0;
[L1273]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1274]  COND FALSE  !(revert)
[L1440]  RET         call ERC20Interface_ERC20Interface__fail(this, msgsender_MSG, msgvalue_MSG);
[L1441]  COND FALSE  !(revert)
[L1444]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1305]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1290]              assume msgsender_MSG != null;
[L1291]              __tmp__Balance[this] := 0;
[L1305]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1306]  COND FALSE  !(revert)
[L1444]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1445]  COND FALSE  !(revert)
[L1448]  CALL        call Ducks_Ducks_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1394]              assume msgsender_MSG != null;
[L1395]              __tmp__Balance[this] := 0;
[L1396]              __tmp__name_Ducks[this] := 560717954;
[L1397]              __tmp__symbol_Ducks[this] := 560717954;
[L1398]              __tmp__decimals_Ducks[this] := 0;
[L1399]              __tmp___totalSupply_Ducks[this] := 0;
[L1400]              __tmp__balances_Ducks[this] := zeroRefintArr();
[L1401]              __tmp__sum_balances0[this] := 0;
[L1402]              __tmp__allowed_Ducks[this] := zeroRefRefintArr();
[L1403]              __tmp__sum_allowed1[this] := 0;
[L1405]              __tmp__name_Ducks[this] := 1576131613;
[L1406]              __tmp__symbol_Ducks[this] := -1943651461;
[L1407]              __tmp__decimals_Ducks[this] := 18;
[L1408]              __tmp___totalSupply_Ducks[this] := 1500000000000000000000000;
[L1409]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][msgsender_MSG];
[L1410]              __tmp__balances_Ducks[this][msgsender_MSG] := __tmp___totalSupply_Ducks[this];
[L1411]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][msgsender_MSG];
[L1448]  RET         call Ducks_Ducks_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1449]  COND FALSE  !(revert)
[L418]   RET         call Ducks_Ducks__fail(this, msgsender_MSG, msgvalue_MSG);
[L419]               assume revert || gas < 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:03,750 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:03,750 INFO  L82        PathProgramCache]: Analyzing trace with hash -1291736199, now seen corresponding path program 1 times
[2020-11-25 15:00:03,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:03,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:03,779 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 15:00:03,780 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:03,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:00:03,780 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:03,780 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:00:03,780 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:00:03,780 INFO  L87              Difference]: Start difference. First operand 1725 states and 1852 transitions. cyclomatic complexity: 130 Second operand 4 states.
[2020-11-25 15:00:03,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:03,931 INFO  L93              Difference]: Finished difference Result 2306 states and 2587 transitions.
[2020-11-25 15:00:03,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:00:03,932 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2306 states and 2587 transitions.
[2020-11-25 15:00:03,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:00:03,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2306 states to 2228 states and 2509 transitions.
[2020-11-25 15:00:03,948 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 816
[2020-11-25 15:00:03,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 816
[2020-11-25 15:00:03,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2228 states and 2509 transitions.
[2020-11-25 15:00:03,951 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:03,951 INFO  L728         BuchiCegarLoop]: Abstraction has 2228 states and 2509 transitions.
[2020-11-25 15:00:03,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2228 states and 2509 transitions.
[2020-11-25 15:00:03,967 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2228 to 1647.
[2020-11-25 15:00:03,967 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1647 states.
[2020-11-25 15:00:03,969 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1647 states to 1647 states and 1773 transitions.
[2020-11-25 15:00:03,969 INFO  L751         BuchiCegarLoop]: Abstraction has 1647 states and 1773 transitions.
[2020-11-25 15:00:03,969 INFO  L631         BuchiCegarLoop]: Abstraction has 1647 states and 1773 transitions.
[2020-11-25 15:00:03,969 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:00:03,969 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1647 states and 1773 transitions.
[2020-11-25 15:00:03,972 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:03,972 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:03,972 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:03,974 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:03,974 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND TRUE   choice == 10
[L2776]              gas := gas - 21000;
[L2777]  COND TRUE   gas >= 0
[L2778]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2779]              assume msgvalue_MSG == 0;
[L2780]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L600]               havoc __exception;
[L601]               revert := false;
[L602]   COND FALSE  !(__exception)
[L623]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1521]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1522]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1523]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1524]              assert { :EventEmitted "Approval_Ducks" } true;
[L1525]              success_s291 := true;
[L623]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L624]               assume !revert && gas >= 0;
[L2780]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:03,977 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:03,977 INFO  L82        PathProgramCache]: Analyzing trace with hash -1054165016, now seen corresponding path program 1 times
[2020-11-25 15:00:03,977 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:03,991 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:04,246 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 15:00:04,247 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:04,247 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 15:00:04,247 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:04,247 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 15:00:04,247 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=331, Unknown=0, NotChecked=0, Total=380
[2020-11-25 15:00:04,248 INFO  L87              Difference]: Start difference. First operand 1647 states and 1773 transitions. cyclomatic complexity: 129 Second operand 20 states.
[2020-11-25 15:00:06,330 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:06,330 INFO  L93              Difference]: Finished difference Result 1695 states and 1832 transitions.
[2020-11-25 15:00:06,330 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 15:00:06,330 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1695 states and 1832 transitions.
[2020-11-25 15:00:06,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:06,339 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1695 states to 1695 states and 1832 transitions.
[2020-11-25 15:00:06,339 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 15:00:06,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 15:00:06,340 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1695 states and 1832 transitions.
[2020-11-25 15:00:06,341 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:06,341 INFO  L728         BuchiCegarLoop]: Abstraction has 1695 states and 1832 transitions.
[2020-11-25 15:00:06,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1695 states and 1832 transitions.
[2020-11-25 15:00:06,355 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1695 to 1658.
[2020-11-25 15:00:06,355 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1658 states.
[2020-11-25 15:00:06,356 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1658 states to 1658 states and 1794 transitions.
[2020-11-25 15:00:06,357 INFO  L751         BuchiCegarLoop]: Abstraction has 1658 states and 1794 transitions.
[2020-11-25 15:00:06,357 INFO  L631         BuchiCegarLoop]: Abstraction has 1658 states and 1794 transitions.
[2020-11-25 15:00:06,357 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:00:06,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1658 states and 1794 transitions.
[2020-11-25 15:00:06,359 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:00:06,359 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:00:06,359 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:00:06,360 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:00:06,360 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_Ducks0 := false;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]     CALL        call main();
[L2853]              assume null == 0;
[L2854]  CALL        call this := FreshRefGenerator__success();
[L1249]              havoc newRef;
[L1250]              assume Alloc[newRef] == false;
[L1251]              Alloc[newRef] := true;
[L1252]              assume newRef != null;
[L2854]  RET         call this := FreshRefGenerator__success();
[L2855]              assume now >= 0;
[L2856]              assume DType[this] == Ducks;
[L2857]              assume msgvalue_MSG == 0;
[L2858]              gas := gas - 53000;
[L2859]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L398]               havoc __exception;
[L399]               revert := false;
[L400]   COND FALSE  !(__exception)
[L421]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1456]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1281]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1266]              assume msgsender_MSG != null;
[L1267]              Balance[this] := 0;
[L1281]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  COND FALSE  !(revert)
[L1456]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  COND FALSE  !(revert)
[L1460]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1313]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1298]              assume msgsender_MSG != null;
[L1299]              Balance[this] := 0;
[L1313]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  COND FALSE  !(revert)
[L1460]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1461]  COND FALSE  !(revert)
[L1464]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1417]              assume msgsender_MSG != null;
[L1418]              Balance[this] := 0;
[L1419]              name_Ducks[this] := 560717954;
[L1420]              symbol_Ducks[this] := 560717954;
[L1421]              decimals_Ducks[this] := 0;
[L1422]              _totalSupply_Ducks[this] := 0;
[L1423]              balances_Ducks[this] := zeroRefintArr();
[L1424]              sum_balances0[this] := 0;
[L1425]              allowed_Ducks[this] := zeroRefRefintArr();
[L1426]              sum_allowed1[this] := 0;
[L1428]              name_Ducks[this] := 1576131613;
[L1429]              symbol_Ducks[this] := -1943651461;
[L1430]              decimals_Ducks[this] := 18;
[L1431]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1432]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1433]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1434]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1435]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1464]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1465]  COND FALSE  !(revert)
[L421]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L422]               assume !revert && gas >= 0;
[L2859]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2860]              assume !revert && gas >= 0;
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND FALSE  !(choice == 14)
[L2756]  COND FALSE  !(choice == 13)
[L2762]  COND FALSE  !(choice == 12)
[L2768]  COND FALSE  !(choice == 11)
[L2775]  COND FALSE  !(choice == 10)
[L2782]  COND TRUE   choice == 9
[L2783]              gas := gas - 21000;
[L2784]  COND TRUE   gas >= 0
[L2785]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2786]              assume msgvalue_MSG == 0;
[L2787]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s393 != to_s393 && ((tokens_s393 > balances_Ducks[this][from_s393] || tokens_s393 > allowed_Ducks[this][from_s393][msgsender_MSG]) || balances_Ducks[this][to_s393] + tokens_s393 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_Ducks0 := true;
[L2]                 call_transferFrom_Ducks0 := false;
[L2]                 revert := revert_hold;
[L706]               havoc __exception;
[L707]               revert := false;
[L708]   COND FALSE  !(__exception)
[L729]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1637]  COND TRUE   DType[this] == Ducks
[L1638]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1638]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1639]  COND FALSE  !(revert)
[L1645]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1646]              balances_Ducks[this][from_s393] := __var_4;
[L1647]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1648]  COND TRUE   DType[this] == Ducks
[L1649]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1348]  COND FALSE  !(!(b_s112 <= a_s112))
[L1352]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1649]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1650]  COND FALSE  !(revert)
[L1656]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1657]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1658]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1659]  COND TRUE   DType[this] == Ducks
[L1660]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1330]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1331]  COND FALSE  !(!(c_s90 >= a_s90))
[L1660]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1661]  COND FALSE  !(revert)
[L1667]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1668]              balances_Ducks[this][to_s393] := __var_6;
[L1669]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1670]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1671]              success_s393 := true;
[L729]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L730]               assume !revert && gas >= 0;
[L2787]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2863]  RET         call CorralChoice_Ducks(this);

Loop:
[L2863]  CALL        call CorralChoice_Ducks(this);
[L2704]              havoc msgsender_MSG;
[L2705]              havoc msgvalue_MSG;
[L2706]              havoc choice;
[L2707]              havoc __ret_0_totalSupply;
[L2708]              havoc tokenOwner_s247;
[L2709]              havoc balance_s247;
[L2710]              havoc tokenOwner_s263;
[L2711]              havoc spender_s263;
[L2712]              havoc remaining_s263;
[L2713]              havoc to_s334;
[L2714]              havoc tokens_s334;
[L2715]              havoc success_s334;
[L2716]              havoc spender_s291;
[L2717]              havoc tokens_s291;
[L2718]              havoc success_s291;
[L2719]              havoc from_s393;
[L2720]              havoc to_s393;
[L2721]              havoc tokens_s393;
[L2722]              havoc success_s393;
[L2723]              havoc a_s90;
[L2724]              havoc b_s90;
[L2725]              havoc c_s90;
[L2726]              havoc a_s112;
[L2727]              havoc b_s112;
[L2728]              havoc c_s112;
[L2729]              havoc a_s140;
[L2730]              havoc b_s140;
[L2731]              havoc c_s140;
[L2732]              havoc a_s162;
[L2733]              havoc b_s162;
[L2734]              havoc c_s162;
[L2735]              havoc __ret_0_name;
[L2736]              havoc __ret_0_symbol;
[L2737]              havoc __ret_0_decimals;
[L2738]              havoc __ret_0__totalSupply;
[L2739]              havoc tmpNow;
[L2740]              havoc gas;
[L2741]              assume gas > 4000000 && gas <= 8000000;
[L2742]              tmpNow := now;
[L2743]              havoc now;
[L2744]              assume now > tmpNow;
[L2745]              assume msgsender_MSG != null;
[L2746]              assume DType[msgsender_MSG] != ERC20Interface;
[L2747]              assume DType[msgsender_MSG] != SafeMath;
[L2748]              assume DType[msgsender_MSG] != Ducks;
[L2749]              Alloc[msgsender_MSG] := true;
[L2750]  COND TRUE   choice == 14
[L2751]              gas := gas - 21000;
[L2752]  COND FALSE  !(gas >= 0)
[L2863]  RET         call CorralChoice_Ducks(this);

[2020-11-25 15:00:06,363 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:00:06,364 INFO  L82        PathProgramCache]: Analyzing trace with hash 2145786767, now seen corresponding path program 1 times
[2020-11-25 15:00:06,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:00:06,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:00:06,520 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 15:00:06,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:00:06,520 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 15:00:06,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:00:06,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:00:06,521 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:00:06,521 INFO  L87              Difference]: Start difference. First operand 1658 states and 1794 transitions. cyclomatic complexity: 141 Second operand 13 states.
[2020-11-25 15:00:07,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:00:07,275 INFO  L93              Difference]: Finished difference Result 976 states and 1054 transitions.
[2020-11-25 15:00:07,275 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 15:00:07,275 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 976 states and 1054 transitions.
[2020-11-25 15:00:07,277 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:00:07,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 976 states to 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:00:07,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:00:07,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:00:07,277 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:00:07,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:00:07,277 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:00:07,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:00:07,280 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:00:07 BasicIcfg
[2020-11-25 15:00:07,280 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:00:07,281 INFO  L168              Benchmark]: Toolchain (without parser) took 7833.98 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 838.3 MB). Free memory was 940.6 MB in the beginning and 1.3 GB in the end (delta: -379.7 MB). Peak memory consumption was 458.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,282 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,282 INFO  L168              Benchmark]: Boogie Preprocessor took 80.45 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,282 INFO  L168              Benchmark]: UtopiaSpecLang took 50.54 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,282 INFO  L168              Benchmark]: Boogie Printer took 12.01 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,282 INFO  L168              Benchmark]: RCFGBuilder took 602.95 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,283 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.27 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,283 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1099.46 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 845.7 MB in the beginning and 771.1 MB in the end (delta: 74.6 MB). Peak memory consumption was 138.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,283 INFO  L168              Benchmark]: BlockEncodingV2 took 103.05 ms. Allocated memory is still 1.1 GB. Free memory was 771.1 MB in the beginning and 723.7 MB in the end (delta: 47.4 MB). Peak memory consumption was 47.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,284 INFO  L168              Benchmark]: BuchiAutomizer took 5844.92 ms. Allocated memory was 1.1 GB in the beginning and 1.9 GB in the end (delta: 774.9 MB). Free memory was 723.7 MB in the beginning and 1.3 GB in the end (delta: -596.6 MB). Peak memory consumption was 178.3 MB. Max. memory is 15.3 GB.
[2020-11-25 15:00:07,286 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2486 locations, 4272 edges
  - StatisticsResult: Encoded RCFG
    2423 locations, 4116 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 80.45 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 50.54 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.01 ms. Allocated memory is still 1.0 GB. Free memory is still 924.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 602.95 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 849.2 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.27 ms. Allocated memory is still 1.0 GB. Free memory was 849.2 MB in the beginning and 845.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1099.46 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 845.7 MB in the beginning and 771.1 MB in the end (delta: 74.6 MB). Peak memory consumption was 138.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 103.05 ms. Allocated memory is still 1.1 GB. Free memory was 771.1 MB in the beginning and 723.7 MB in the end (delta: 47.4 MB). Peak memory consumption was 47.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5844.92 ms. Allocated memory was 1.1 GB in the beginning and 1.9 GB in the end (delta: 774.9 MB). Free memory was 723.7 MB in the beginning and 1.3 GB in the end (delta: -596.6 MB). Peak memory consumption was 178.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1048 locations, 1320 edges
  - StatisticsResult: BuchiProgram size
    2486 locations, 4272 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 20 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.8s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.7s. Construction of modules took 3.5s. BÃ¼chi inclusion checks took 1.1s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1070 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1811 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 10131 SDtfs, 11110 SDslu, 20412 SDs, 0 SdLazy, 38758 SolverSat, 1612 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Ducks0) ==> ( <>(fail_transferFrom_Ducks0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
