This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:44:48,891 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:44:48,892 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:44:48,903 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:44:48,904 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:44:48,905 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:44:48,906 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:44:48,908 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:44:48,909 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:44:48,910 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:44:48,911 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:44:48,911 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:44:48,912 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:44:48,912 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:44:48,913 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:44:48,914 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:44:48,915 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:44:48,916 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:44:48,918 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:44:48,919 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:44:48,920 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:44:48,921 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:44:48,923 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:44:48,923 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:44:48,923 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:44:48,924 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:44:48,924 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:44:48,925 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:44:48,925 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:44:48,925 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:44:48,926 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:44:48,926 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:44:48,927 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:44:48,928 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:44:48,928 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:44:48,929 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:44:48,929 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:44:48,929 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:44:48,929 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:44:48,930 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:44:48,931 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:44:48,931 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:44:48,940 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:44:48,940 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:44:48,941 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:44:48,941 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:44:48,942 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:44:48,942 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:44:48,942 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:44:48,942 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:44:48,942 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:44:48,943 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:44:48,943 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:44:48,943 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:44:48,943 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:44:48,943 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:44:48,943 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:44:48,944 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:44:48,945 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:44:48,945 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:44:48,945 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:44:48,945 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:44:48,945 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:44:48,968 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:44:48,979 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:44:48,981 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:44:48,983 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:44:48,983 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:44:48,984 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl
[2020-11-25 09:44:48,984 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl'
[2020-11-25 09:44:49,071 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:44:49,072 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:44:49,072 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:44:49,072 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:44:49,072 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:44:49,089 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,091 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,131 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,132 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,158 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,169 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,177 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,187 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:44:49,188 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:44:49,188 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:44:49,190 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:44:49,194 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/1) ...
[2020-11-25 09:44:49,214 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 09:44:49,220 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 09:44:49,227 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 09:44:49,233 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s140 && ( amount_s140>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s140] + amount_s140 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:44:49,240 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 09:44:49,240 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:44:49,250 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:44:49 PropertyContainer
[2020-11-25 09:44:49,250 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:44:49,251 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:44:49,251 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:44:49,251 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:44:49,252 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/2) ...
[2020-11-25 09:44:49,252 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:44:49,252 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:44:49,268 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:44:49" (2/2) ...
[2020-11-25 09:44:49,268 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:44:49,268 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:44:49,269 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:44:49,269 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:44:49,269 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/2) ...
[2020-11-25 09:44:49,322 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:44:49,322 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:44:49,322 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 09:44:49,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:44:49,323 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 09:44:49,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 09:44:49,324 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 09:44:49,324 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:44:49,324 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:44:49,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:44:49,324 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 09:44:49,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 09:44:49,324 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:44:49,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 09:44:49,325 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:44:49,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 09:44:49,325 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:44:49,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 09:44:49,325 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:44:49,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 09:44:49,325 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:44:49,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:44:49,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:44:49,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:44:49,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 09:44:49,327 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:44:49,327 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:44:49,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV_NoBaseCtor__success
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV
[2020-11-25 09:44:49,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV
[2020-11-25 09:44:49,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV
[2020-11-25 09:44:49,328 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV
[2020-11-25 09:44:49,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV
[2020-11-25 09:44:49,329 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV
[2020-11-25 09:44:49,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV
[2020-11-25 09:44:49,329 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV
[2020-11-25 09:44:49,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV
[2020-11-25 09:44:49,329 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV
[2020-11-25 09:44:49,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV
[2020-11-25 09:44:49,329 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV
[2020-11-25 09:44:49,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV
[2020-11-25 09:44:49,329 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV
[2020-11-25 09:44:49,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:44:49,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YFV
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:44:49,331 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 09:44:49,332 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,333 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:44:49,334 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:44:49,335 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV_NoBaseCtor__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV__success
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV__fail
[2020-11-25 09:44:49,336 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV__success
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV__fail
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV__success
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV__fail
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV__success
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV__fail
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV__success
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV__fail
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV__success
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV__fail
[2020-11-25 09:44:49,337 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV__success
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV__fail
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV__success
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV__fail
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:44:49,338 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:44:49,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:44:49,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:44:49,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:44:49,338 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:44:49,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 09:44:49,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:44:49,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:44:49,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:44:49,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV_NoBaseCtor__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV_NoBaseCtor__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV__fail
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV__success
[2020-11-25 09:44:49,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV__fail
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV__success
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV__fail
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV__success
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:44:49,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YFV
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:44:49,346 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:44:49,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:44:49,535 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:44:49,535 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:44:50,044 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:44:50,044 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:44:50,046 INFO  L202        PluginConnector]: Adding new model YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:44:50 BoogieIcfgContainer
[2020-11-25 09:44:50,046 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:44:49" (2/2) ...
[2020-11-25 09:44:50,046 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:44:50,047 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7df8fd0c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:44:50, skipping insertion in model container
[2020-11-25 09:44:50,047 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:44:50,047 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:44:50,047 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:44:50,049 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:44:50,049 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/3) ...
[2020-11-25 09:44:50,049 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@27813bbe and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:44:50, skipping insertion in model container
[2020-11-25 09:44:50,050 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:44:49" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:44:50,086 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:44:50 NWAContainer
[2020-11-25 09:44:50,086 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:44:50,087 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:44:50,087 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:44:50,088 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:44:50,088 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:44:50" (3/4) ...
[2020-11-25 09:44:50,089 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@196f89a6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:44:50, skipping insertion in model container
[2020-11-25 09:44:50,089 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:44:50" (4/4) ...
[2020-11-25 09:44:50,092 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:44:50,097 INFO  L110   BuchiProductObserver]: Initial RCFG 1848 locations, 2527 edges
[2020-11-25 09:44:50,097 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:44:50,108 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:44:51,377 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:44:51,383 INFO  L110   BuchiProductObserver]: BuchiProgram size 4586 locations, 8207 edges
[2020-11-25 09:44:51,384 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:44:51 BoogieIcfgContainer
[2020-11-25 09:44:51,384 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:44:51,384 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:44:51,384 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:44:51,385 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:44:51,386 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:44:51" (1/1) ...
[2020-11-25 09:44:51,476 INFO  L313           BlockEncoder]: Initial Icfg 4586 locations, 8207 edges
[2020-11-25 09:44:51,477 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:44:51,477 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:44:51,477 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:44:51,478 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:44:51,494 INFO  L70    emoveInfeasibleEdges]: Removed 153 edges and 16 locations because of local infeasibility
[2020-11-25 09:44:51,505 INFO  L70        RemoveSinkStates]: Removed 192 edges and 112 locations by removing sink states
[2020-11-25 09:44:51,520 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:44:51,526 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:44:51,531 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:44:51,532 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:44:51,539 INFO  L313           BlockEncoder]: Encoded RCFG 4438 locations, 7833 edges
[2020-11-25 09:44:51,540 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:44:51 BasicIcfg
[2020-11-25 09:44:51,540 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:44:51,540 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:44:51,540 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:44:51,542 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:44:51,543 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,543 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:44:49" (1/6) ...
[2020-11-25 09:44:51,545 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5ce17fec and model type YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:44:51, skipping insertion in model container
[2020-11-25 09:44:51,545 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,545 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:44:49" (2/6) ...
[2020-11-25 09:44:51,545 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5ce17fec and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:44:51, skipping insertion in model container
[2020-11-25 09:44:51,545 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,545 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:44:50" (3/6) ...
[2020-11-25 09:44:51,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5ce17fec and model type YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:44:51, skipping insertion in model container
[2020-11-25 09:44:51,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:44:50" (4/6) ...
[2020-11-25 09:44:51,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5ce17fec and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:44:51, skipping insertion in model container
[2020-11-25 09:44:51,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:44:51" (5/6) ...
[2020-11-25 09:44:51,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5ce17fec and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:44:51, skipping insertion in model container
[2020-11-25 09:44:51,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:44:51,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:44:51" (6/6) ...
[2020-11-25 09:44:51,548 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-fail.bpl_BEv2
[2020-11-25 09:44:51,588 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:44:51,588 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:44:51,588 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:44:51,588 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:44:51,588 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:44:51,588 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:44:51,588 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:44:51,589 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:44:51,589 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:44:51,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4438 states.
[2020-11-25 09:44:51,696 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:51,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:51,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:51,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:51,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:51,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:44:51,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4438 states.
[2020-11-25 09:44:51,736 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:51,736 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:51,736 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:51,738 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:51,739 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND TRUE   revert
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:51,756 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:51,757 INFO  L82        PathProgramCache]: Analyzing trace with hash 1822445618, now seen corresponding path program 1 times
[2020-11-25 09:44:51,761 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:51,785 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:51,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:44:51,827 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:51,827 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:44:52,081 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:52,090 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:44:52,090 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:44:52,092 INFO  L87              Difference]: Start difference. First operand 4438 states. Second operand 3 states.
[2020-11-25 09:44:52,318 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:52,319 INFO  L93              Difference]: Finished difference Result 2951 states and 3444 transitions.
[2020-11-25 09:44:52,319 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:44:52,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2951 states and 3444 transitions.
[2020-11-25 09:44:52,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:52,360 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2951 states to 2951 states and 3444 transitions.
[2020-11-25 09:44:52,361 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 09:44:52,363 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 769
[2020-11-25 09:44:52,363 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2951 states and 3444 transitions.
[2020-11-25 09:44:52,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:52,370 INFO  L728         BuchiCegarLoop]: Abstraction has 2951 states and 3444 transitions.
[2020-11-25 09:44:52,385 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2951 states and 3444 transitions.
[2020-11-25 09:44:52,427 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2951 to 2951.
[2020-11-25 09:44:52,428 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2951 states.
[2020-11-25 09:44:52,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2951 states to 2951 states and 3444 transitions.
[2020-11-25 09:44:52,433 INFO  L751         BuchiCegarLoop]: Abstraction has 2951 states and 3444 transitions.
[2020-11-25 09:44:52,434 INFO  L631         BuchiCegarLoop]: Abstraction has 2951 states and 3444 transitions.
[2020-11-25 09:44:52,434 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:44:52,434 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2951 states and 3444 transitions.
[2020-11-25 09:44:52,441 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:52,441 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:52,441 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:52,442 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:52,442 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND TRUE   revert
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND TRUE   revert
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND TRUE   revert
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:52,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:52,446 INFO  L82        PathProgramCache]: Analyzing trace with hash 2128174601, now seen corresponding path program 1 times
[2020-11-25 09:44:52,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:52,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:52,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:44:52,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:52,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:44:52,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:52,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:44:52,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:44:52,474 INFO  L87              Difference]: Start difference. First operand 2951 states and 3444 transitions. cyclomatic complexity: 495 Second operand 4 states.
[2020-11-25 09:44:52,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:52,932 INFO  L93              Difference]: Finished difference Result 3808 states and 4314 transitions.
[2020-11-25 09:44:52,932 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:44:52,932 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3808 states and 4314 transitions.
[2020-11-25 09:44:52,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:44:52,960 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3808 states to 3588 states and 4056 transitions.
[2020-11-25 09:44:52,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 939
[2020-11-25 09:44:52,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 949
[2020-11-25 09:44:52,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3588 states and 4056 transitions.
[2020-11-25 09:44:52,965 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:52,966 INFO  L728         BuchiCegarLoop]: Abstraction has 3588 states and 4056 transitions.
[2020-11-25 09:44:52,969 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3588 states and 4056 transitions.
[2020-11-25 09:44:52,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3588 to 3208.
[2020-11-25 09:44:52,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3208 states.
[2020-11-25 09:44:53,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3208 states to 3208 states and 3582 transitions.
[2020-11-25 09:44:53,003 INFO  L751         BuchiCegarLoop]: Abstraction has 3208 states and 3582 transitions.
[2020-11-25 09:44:53,003 INFO  L631         BuchiCegarLoop]: Abstraction has 3208 states and 3582 transitions.
[2020-11-25 09:44:53,003 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:44:53,003 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3208 states and 3582 transitions.
[2020-11-25 09:44:53,009 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:44:53,009 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:53,009 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:53,011 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:53,011 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:53,019 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:53,019 INFO  L82        PathProgramCache]: Analyzing trace with hash -244907039, now seen corresponding path program 1 times
[2020-11-25 09:44:53,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:53,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:53,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:44:53,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:53,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:44:53,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:53,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:44:53,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:44:53,249 INFO  L87              Difference]: Start difference. First operand 3208 states and 3582 transitions. cyclomatic complexity: 376 Second operand 17 states.
[2020-11-25 09:44:55,278 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:55,278 INFO  L93              Difference]: Finished difference Result 3293 states and 3679 transitions.
[2020-11-25 09:44:55,278 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:44:55,279 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3293 states and 3679 transitions.
[2020-11-25 09:44:55,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:44:55,297 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3293 states to 3293 states and 3679 transitions.
[2020-11-25 09:44:55,297 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 904
[2020-11-25 09:44:55,297 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 904
[2020-11-25 09:44:55,297 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3293 states and 3679 transitions.
[2020-11-25 09:44:55,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:55,300 INFO  L728         BuchiCegarLoop]: Abstraction has 3293 states and 3679 transitions.
[2020-11-25 09:44:55,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3293 states and 3679 transitions.
[2020-11-25 09:44:55,328 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3293 to 3083.
[2020-11-25 09:44:55,328 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3083 states.
[2020-11-25 09:44:55,332 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3083 states to 3083 states and 3424 transitions.
[2020-11-25 09:44:55,332 INFO  L751         BuchiCegarLoop]: Abstraction has 3083 states and 3424 transitions.
[2020-11-25 09:44:55,332 INFO  L631         BuchiCegarLoop]: Abstraction has 3083 states and 3424 transitions.
[2020-11-25 09:44:55,332 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:44:55,332 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3083 states and 3424 transitions.
[2020-11-25 09:44:55,337 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:55,337 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:55,337 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:55,340 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:55,340 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND TRUE   __exception
[L1101]              __tmp__Balance := Balance;
[L1102]              __tmp__DType := DType;
[L1103]              __tmp__Alloc := Alloc;
[L1104]              __tmp__balance_ADDR := balance_ADDR;
[L1105]              __tmp__M_Ref_int := M_Ref_int;
[L1106]              __tmp__sum__balances0 := sum__balances0;
[L1107]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1108]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1109]              __tmp__sum__allowances1 := sum__allowances1;
[L1110]              __tmp__M_Ref_bool := M_Ref_bool;
[L1111]              __tmp__sum_minters2 := sum_minters2;
[L1112]              __tmp__Length := Length;
[L1113]              __tmp__now := now;
[L1114]              __tmp___balances_ERC20 := _balances_ERC20;
[L1115]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1116]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1117]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1118]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1119]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1120]              __tmp__governance_YFV := governance_YFV;
[L1121]              __tmp__minters_YFV := minters_YFV;
[L1122]  CALL        call YFV_YFV__fail(this, msgsender_MSG, msgvalue_MSG);
[L3218]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2178]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2163]              assume msgsender_MSG != null;
[L2164]              __tmp__Balance[this] := 0;
[L2178]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2179]  COND FALSE  !(revert)
[L3218]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3219]  COND FALSE  !(revert)
[L3222]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2146]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2131]              assume msgsender_MSG != null;
[L2132]              __tmp__Balance[this] := 0;
[L2146]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2147]  COND FALSE  !(revert)
[L3222]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3223]  COND FALSE  !(revert)
[L3226]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2232]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2178]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2163]              assume msgsender_MSG != null;
[L2164]              __tmp__Balance[this] := 0;
[L2178]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2179]  COND FALSE  !(revert)
[L2232]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2233]  COND FALSE  !(revert)
[L2236]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2146]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2131]              assume msgsender_MSG != null;
[L2132]              __tmp__Balance[this] := 0;
[L2146]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2147]  COND FALSE  !(revert)
[L2236]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2237]  COND FALSE  !(revert)
[L2240]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2207]              assume msgsender_MSG != null;
[L2208]              __tmp__Balance[this] := 0;
[L2209]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2210]              __tmp__sum__balances0[this] := 0;
[L2211]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2212]              __tmp__sum__allowances1[this] := 0;
[L2213]              __tmp___totalSupply_ERC20[this] := 0;
[L2240]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2241]  COND FALSE  !(revert)
[L3226]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3227]  COND FALSE  !(revert)
[L3230]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3000]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2146]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2131]              assume msgsender_MSG != null;
[L2132]              __tmp__Balance[this] := 0;
[L2146]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2147]  COND FALSE  !(revert)
[L3000]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3001]  COND FALSE  !(revert)
[L3004]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2973]              assume msgsender_MSG != null;
[L2974]              __tmp__Balance[this] := 0;
[L2975]              __tmp___name_ERC20Detailed[this] := 1252836592;
[L2976]              __tmp___symbol_ERC20Detailed[this] := 1252836592;
[L2977]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2979]              __tmp___name_ERC20Detailed[this] := name_s484;
[L2980]              __tmp___symbol_ERC20Detailed[this] := symbol_s484;
[L2981]              __tmp___decimals_ERC20Detailed[this] := decimals_s484;
[L3004]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3005]  COND FALSE  !(revert)
[L3230]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3231]  COND FALSE  !(revert)
[L3234]  CALL        call YFV_YFV_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3197]              assume msgsender_MSG != null;
[L3198]              __tmp__Balance[this] := 0;
[L3199]              __tmp__governance_YFV[this] := null;
[L3200]              __tmp__minters_YFV[this] := zeroRefboolArr();
[L3202]              __tmp__governance_YFV[this] := msgsender_MSG;
[L3234]  RET         call YFV_YFV_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3235]  COND FALSE  !(revert)
[L1122]  RET         call YFV_YFV__fail(this, msgsender_MSG, msgvalue_MSG);
[L1123]              assume revert || gas < 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:55,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:55,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 1048461076, now seen corresponding path program 1 times
[2020-11-25 09:44:55,344 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:55,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:55,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:44:55,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:55,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:44:55,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:55,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:44:55,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:44:55,420 INFO  L87              Difference]: Start difference. First operand 3083 states and 3424 transitions. cyclomatic complexity: 344 Second operand 4 states.
[2020-11-25 09:44:55,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:55,667 INFO  L93              Difference]: Finished difference Result 3820 states and 4353 transitions.
[2020-11-25 09:44:55,667 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:44:55,667 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3820 states and 4353 transitions.
[2020-11-25 09:44:55,676 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:44:55,687 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3820 states to 3699 states and 4229 transitions.
[2020-11-25 09:44:55,687 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1009
[2020-11-25 09:44:55,688 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1009
[2020-11-25 09:44:55,688 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3699 states and 4229 transitions.
[2020-11-25 09:44:55,691 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:55,691 INFO  L728         BuchiCegarLoop]: Abstraction has 3699 states and 4229 transitions.
[2020-11-25 09:44:55,693 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3699 states and 4229 transitions.
[2020-11-25 09:44:55,714 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3699 to 2962.
[2020-11-25 09:44:55,714 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2962 states.
[2020-11-25 09:44:55,717 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2962 states to 2962 states and 3299 transitions.
[2020-11-25 09:44:55,717 INFO  L751         BuchiCegarLoop]: Abstraction has 2962 states and 3299 transitions.
[2020-11-25 09:44:55,717 INFO  L631         BuchiCegarLoop]: Abstraction has 2962 states and 3299 transitions.
[2020-11-25 09:44:55,717 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:44:55,717 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2962 states and 3299 transitions.
[2020-11-25 09:44:55,721 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:44:55,721 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:55,721 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:55,723 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:55,723 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND TRUE   choice == 5
[L4942]              gas := gas - 21000;
[L4943]  COND TRUE   gas >= 0
[L4944]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4945]              assume msgvalue_MSG == 0;
[L4946]  CALL        call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3282]  COND FALSE  !(!minters_YFV[this][msgsender_MSG])
[L3286]  COND TRUE   DType[this] == YFV
[L3287]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2862]              __var_16 := null;
[L2863]  COND FALSE  !(!(account_s366 != null))
[L2867]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2867]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2868]  COND FALSE  !(revert)
[L2871]              _totalSupply_ERC20[this] := __var_17;
[L2872]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2872]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2873]  COND FALSE  !(revert)
[L2876]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2877]              _balances_ERC20[this][account_s366] := __var_18;
[L2878]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2879]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3287]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3288]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4946]  RET         call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:55,727 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:55,727 INFO  L82        PathProgramCache]: Analyzing trace with hash -1567526009, now seen corresponding path program 1 times
[2020-11-25 09:44:55,727 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:55,739 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:55,813 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 1 proven. 58 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 09:44:55,813 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:44:55,813 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 09:44:55,813 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:55,813 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:44:55,813 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:44:55,814 INFO  L87              Difference]: Start difference. First operand 2962 states and 3299 transitions. cyclomatic complexity: 340 Second operand 10 states.
[2020-11-25 09:44:56,690 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:56,690 INFO  L93              Difference]: Finished difference Result 2991 states and 3341 transitions.
[2020-11-25 09:44:56,690 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:44:56,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2991 states and 3341 transitions.
[2020-11-25 09:44:56,696 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:44:56,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2991 states to 2991 states and 3341 transitions.
[2020-11-25 09:44:56,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 824
[2020-11-25 09:44:56,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 824
[2020-11-25 09:44:56,703 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2991 states and 3341 transitions.
[2020-11-25 09:44:56,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:56,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2991 states and 3341 transitions.
[2020-11-25 09:44:56,708 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2991 states and 3341 transitions.
[2020-11-25 09:44:56,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2991 to 2991.
[2020-11-25 09:44:56,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2991 states.
[2020-11-25 09:44:56,728 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2991 states to 2991 states and 3341 transitions.
[2020-11-25 09:44:56,728 INFO  L751         BuchiCegarLoop]: Abstraction has 2991 states and 3341 transitions.
[2020-11-25 09:44:56,728 INFO  L631         BuchiCegarLoop]: Abstraction has 2991 states and 3341 transitions.
[2020-11-25 09:44:56,728 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:44:56,728 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2991 states and 3341 transitions.
[2020-11-25 09:44:56,732 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:44:56,732 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:56,732 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:56,734 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:56,734 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:56,738 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:56,738 INFO  L82        PathProgramCache]: Analyzing trace with hash -2110210437, now seen corresponding path program 1 times
[2020-11-25 09:44:56,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:56,752 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:57,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-11-25 09:44:57,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:44:57,008 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 09:44:57,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:57,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:44:57,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=64, Invalid=536, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:44:57,009 INFO  L87              Difference]: Start difference. First operand 2991 states and 3341 transitions. cyclomatic complexity: 356 Second operand 25 states.
[2020-11-25 09:44:59,825 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:59,825 INFO  L93              Difference]: Finished difference Result 3035 states and 3400 transitions.
[2020-11-25 09:44:59,826 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 09:44:59,826 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3035 states and 3400 transitions.
[2020-11-25 09:44:59,833 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:44:59,839 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3035 states to 3035 states and 3400 transitions.
[2020-11-25 09:44:59,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 831
[2020-11-25 09:44:59,840 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 831
[2020-11-25 09:44:59,840 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3035 states and 3400 transitions.
[2020-11-25 09:44:59,843 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:59,843 INFO  L728         BuchiCegarLoop]: Abstraction has 3035 states and 3400 transitions.
[2020-11-25 09:44:59,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3035 states and 3400 transitions.
[2020-11-25 09:44:59,868 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3035 to 2997.
[2020-11-25 09:44:59,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2997 states.
[2020-11-25 09:44:59,871 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2997 states to 2997 states and 3359 transitions.
[2020-11-25 09:44:59,872 INFO  L751         BuchiCegarLoop]: Abstraction has 2997 states and 3359 transitions.
[2020-11-25 09:44:59,872 INFO  L631         BuchiCegarLoop]: Abstraction has 2997 states and 3359 transitions.
[2020-11-25 09:44:59,872 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:44:59,872 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2997 states and 3359 transitions.
[2020-11-25 09:44:59,894 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:44:59,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:59,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:59,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:59,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND FALSE  !(DType[this] == YFV)
[L2327]  COND TRUE   DType[this] == ERC20
[L2328]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2328]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(DType[this] == YFV)
[L2340]  COND TRUE   DType[this] == ERC20
[L2341]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2341]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2342]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(DType[this] == YFV)
[L2340]  COND TRUE   DType[this] == ERC20
[L2341]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2341]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2342]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(DType[this] == YFV)
[L2340]  COND TRUE   DType[this] == ERC20
[L2341]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2341]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2342]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:59,909 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:59,909 INFO  L82        PathProgramCache]: Analyzing trace with hash -1968586474, now seen corresponding path program 1 times
[2020-11-25 09:44:59,910 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:59,920 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:59,966 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 09:44:59,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:59,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:44:59,967 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:59,967 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:44:59,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:44:59,967 INFO  L87              Difference]: Start difference. First operand 2997 states and 3359 transitions. cyclomatic complexity: 370 Second operand 3 states.
[2020-11-25 09:44:59,984 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:59,984 INFO  L93              Difference]: Finished difference Result 3005 states and 3369 transitions.
[2020-11-25 09:44:59,984 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:44:59,985 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3005 states and 3369 transitions.
[2020-11-25 09:44:59,989 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:44:59,995 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3005 states to 3005 states and 3369 transitions.
[2020-11-25 09:44:59,995 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 827
[2020-11-25 09:44:59,996 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 827
[2020-11-25 09:44:59,996 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3005 states and 3369 transitions.
[2020-11-25 09:44:59,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:59,998 INFO  L728         BuchiCegarLoop]: Abstraction has 3005 states and 3369 transitions.
[2020-11-25 09:45:00,000 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3005 states and 3369 transitions.
[2020-11-25 09:45:00,015 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3005 to 2999.
[2020-11-25 09:45:00,015 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2999 states.
[2020-11-25 09:45:00,018 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2999 states to 2999 states and 3361 transitions.
[2020-11-25 09:45:00,018 INFO  L751         BuchiCegarLoop]: Abstraction has 2999 states and 3361 transitions.
[2020-11-25 09:45:00,018 INFO  L631         BuchiCegarLoop]: Abstraction has 2999 states and 3361 transitions.
[2020-11-25 09:45:00,018 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:45:00,018 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2999 states and 3361 transitions.
[2020-11-25 09:45:00,021 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:00,021 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:00,021 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:00,022 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:00,022 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND FALSE  !(DType[this] == YFV)
[L2327]  COND TRUE   DType[this] == ERC20
[L2328]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2328]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:00,025 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:00,026 INFO  L82        PathProgramCache]: Analyzing trace with hash -2065401063, now seen corresponding path program 1 times
[2020-11-25 09:45:00,026 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:00,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:00,082 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 09:45:00,082 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:45:00,082 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:45:00,083 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:00,083 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:45:00,083 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:45:00,083 INFO  L87              Difference]: Start difference. First operand 2999 states and 3361 transitions. cyclomatic complexity: 370 Second operand 3 states.
[2020-11-25 09:45:00,100 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:00,100 INFO  L93              Difference]: Finished difference Result 3005 states and 3367 transitions.
[2020-11-25 09:45:00,100 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:45:00,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3005 states and 3367 transitions.
[2020-11-25 09:45:00,105 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:00,111 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3005 states to 3005 states and 3367 transitions.
[2020-11-25 09:45:00,111 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 827
[2020-11-25 09:45:00,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 827
[2020-11-25 09:45:00,112 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3005 states and 3367 transitions.
[2020-11-25 09:45:00,114 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:00,114 INFO  L728         BuchiCegarLoop]: Abstraction has 3005 states and 3367 transitions.
[2020-11-25 09:45:00,116 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3005 states and 3367 transitions.
[2020-11-25 09:45:00,131 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3005 to 2999.
[2020-11-25 09:45:00,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2999 states.
[2020-11-25 09:45:00,134 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2999 states to 2999 states and 3359 transitions.
[2020-11-25 09:45:00,134 INFO  L751         BuchiCegarLoop]: Abstraction has 2999 states and 3359 transitions.
[2020-11-25 09:45:00,134 INFO  L631         BuchiCegarLoop]: Abstraction has 2999 states and 3359 transitions.
[2020-11-25 09:45:00,134 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:45:00,134 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2999 states and 3359 transitions.
[2020-11-25 09:45:00,137 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:00,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:00,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:00,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:00,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND FALSE  !(DType[this] == YFV)
[L2327]  COND TRUE   DType[this] == ERC20
[L2328]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2328]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(DType[this] == YFV)
[L2340]  COND TRUE   DType[this] == ERC20
[L2341]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2341]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2342]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:00,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:00,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -1059133296, now seen corresponding path program 1 times
[2020-11-25 09:45:00,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:00,153 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:00,206 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 09:45:00,206 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:45:00,206 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:45:00,207 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:00,207 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:45:00,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:45:00,207 INFO  L87              Difference]: Start difference. First operand 2999 states and 3359 transitions. cyclomatic complexity: 368 Second operand 6 states.
[2020-11-25 09:45:00,250 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:00,250 INFO  L93              Difference]: Finished difference Result 3033 states and 3392 transitions.
[2020-11-25 09:45:00,250 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 09:45:00,250 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3033 states and 3392 transitions.
[2020-11-25 09:45:00,255 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:00,262 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3033 states to 2977 states and 3331 transitions.
[2020-11-25 09:45:00,262 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 822
[2020-11-25 09:45:00,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 822
[2020-11-25 09:45:00,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2977 states and 3331 transitions.
[2020-11-25 09:45:00,264 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:00,264 INFO  L728         BuchiCegarLoop]: Abstraction has 2977 states and 3331 transitions.
[2020-11-25 09:45:00,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2977 states and 3331 transitions.
[2020-11-25 09:45:00,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2977 to 2977.
[2020-11-25 09:45:00,282 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2977 states.
[2020-11-25 09:45:00,290 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2977 states to 2977 states and 3331 transitions.
[2020-11-25 09:45:00,291 INFO  L751         BuchiCegarLoop]: Abstraction has 2977 states and 3331 transitions.
[2020-11-25 09:45:00,291 INFO  L631         BuchiCegarLoop]: Abstraction has 2977 states and 3331 transitions.
[2020-11-25 09:45:00,291 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:45:00,291 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2977 states and 3331 transitions.
[2020-11-25 09:45:00,300 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:00,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:00,301 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:00,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:00,302 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:00,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:00,306 INFO  L82        PathProgramCache]: Analyzing trace with hash 1162513640, now seen corresponding path program 1 times
[2020-11-25 09:45:00,307 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:00,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:01,023 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 09:45:01,024 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:45:01,024 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 09:45:01,024 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:01,024 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 09:45:01,024 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=842, Unknown=0, NotChecked=0, Total=930
[2020-11-25 09:45:01,025 INFO  L87              Difference]: Start difference. First operand 2977 states and 3331 transitions. cyclomatic complexity: 362 Second operand 31 states.
[2020-11-25 09:45:06,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:06,242 INFO  L93              Difference]: Finished difference Result 3023 states and 3403 transitions.
[2020-11-25 09:45:06,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:45:06,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3023 states and 3403 transitions.
[2020-11-25 09:45:06,258 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:06,266 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3023 states to 3023 states and 3403 transitions.
[2020-11-25 09:45:06,266 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 829
[2020-11-25 09:45:06,267 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 829
[2020-11-25 09:45:06,267 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3023 states and 3403 transitions.
[2020-11-25 09:45:06,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:06,269 INFO  L728         BuchiCegarLoop]: Abstraction has 3023 states and 3403 transitions.
[2020-11-25 09:45:06,272 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3023 states and 3403 transitions.
[2020-11-25 09:45:06,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3023 to 2977.
[2020-11-25 09:45:06,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2977 states.
[2020-11-25 09:45:06,296 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2977 states to 2977 states and 3331 transitions.
[2020-11-25 09:45:06,296 INFO  L751         BuchiCegarLoop]: Abstraction has 2977 states and 3331 transitions.
[2020-11-25 09:45:06,296 INFO  L631         BuchiCegarLoop]: Abstraction has 2977 states and 3331 transitions.
[2020-11-25 09:45:06,296 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:45:06,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2977 states and 3331 transitions.
[2020-11-25 09:45:06,300 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:06,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:06,300 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:06,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:06,302 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND FALSE  !(DType[this] == YFV)
[L2505]  COND TRUE   DType[this] == ERC20
[L2506]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2506]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2507]  COND FALSE  !(revert)
[L2513]  COND FALSE  !(DType[this] == YFV)
[L2518]  COND TRUE   DType[this] == ERC20
[L2519]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2519]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2520]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:06,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:06,306 INFO  L82        PathProgramCache]: Analyzing trace with hash 1320558442, now seen corresponding path program 1 times
[2020-11-25 09:45:06,307 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:06,323 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:06,416 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:45:06,417 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:45:06,417 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:45:06,418 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:06,418 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:45:06,418 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:45:06,418 INFO  L87              Difference]: Start difference. First operand 2977 states and 3331 transitions. cyclomatic complexity: 362 Second operand 3 states.
[2020-11-25 09:45:06,460 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:06,460 INFO  L93              Difference]: Finished difference Result 2995 states and 3351 transitions.
[2020-11-25 09:45:06,460 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:45:06,460 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2995 states and 3351 transitions.
[2020-11-25 09:45:06,465 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:06,471 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2995 states to 2995 states and 3351 transitions.
[2020-11-25 09:45:06,471 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 828
[2020-11-25 09:45:06,471 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 828
[2020-11-25 09:45:06,471 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2995 states and 3351 transitions.
[2020-11-25 09:45:06,473 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:06,473 INFO  L728         BuchiCegarLoop]: Abstraction has 2995 states and 3351 transitions.
[2020-11-25 09:45:06,475 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2995 states and 3351 transitions.
[2020-11-25 09:45:06,488 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2995 to 2989.
[2020-11-25 09:45:06,488 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2989 states.
[2020-11-25 09:45:06,491 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2989 states to 2989 states and 3345 transitions.
[2020-11-25 09:45:06,491 INFO  L751         BuchiCegarLoop]: Abstraction has 2989 states and 3345 transitions.
[2020-11-25 09:45:06,491 INFO  L631         BuchiCegarLoop]: Abstraction has 2989 states and 3345 transitions.
[2020-11-25 09:45:06,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:45:06,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2989 states and 3345 transitions.
[2020-11-25 09:45:06,494 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:06,494 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:06,494 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:06,495 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:06,495 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:06,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:06,499 INFO  L82        PathProgramCache]: Analyzing trace with hash -111819744, now seen corresponding path program 1 times
[2020-11-25 09:45:06,499 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:06,514 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:07,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 09:45:07,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:45:07,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 09:45:07,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:07,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 09:45:07,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=90, Invalid=780, Unknown=0, NotChecked=0, Total=870
[2020-11-25 09:45:07,067 INFO  L87              Difference]: Start difference. First operand 2989 states and 3345 transitions. cyclomatic complexity: 364 Second operand 30 states.
[2020-11-25 09:45:08,898 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 116
[2020-11-25 09:45:09,471 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 113
[2020-11-25 09:45:12,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:12,109 INFO  L93              Difference]: Finished difference Result 3033 states and 3408 transitions.
[2020-11-25 09:45:12,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:45:12,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3033 states and 3408 transitions.
[2020-11-25 09:45:12,115 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:12,120 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3033 states to 3033 states and 3408 transitions.
[2020-11-25 09:45:12,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 832
[2020-11-25 09:45:12,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 832
[2020-11-25 09:45:12,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3033 states and 3408 transitions.
[2020-11-25 09:45:12,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:12,122 INFO  L728         BuchiCegarLoop]: Abstraction has 3033 states and 3408 transitions.
[2020-11-25 09:45:12,125 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3033 states and 3408 transitions.
[2020-11-25 09:45:12,138 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3033 to 2987.
[2020-11-25 09:45:12,138 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2987 states.
[2020-11-25 09:45:12,140 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2987 states to 2987 states and 3338 transitions.
[2020-11-25 09:45:12,140 INFO  L751         BuchiCegarLoop]: Abstraction has 2987 states and 3338 transitions.
[2020-11-25 09:45:12,140 INFO  L631         BuchiCegarLoop]: Abstraction has 2987 states and 3338 transitions.
[2020-11-25 09:45:12,140 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:45:12,141 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2987 states and 3338 transitions.
[2020-11-25 09:45:12,143 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:45:12,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:45:12,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:45:12,145 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:45:12,145 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s140 && (amount_s140 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s140] + amount_s140 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:45:12,148 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:45:12,148 INFO  L82        PathProgramCache]: Analyzing trace with hash -1805634027, now seen corresponding path program 2 times
[2020-11-25 09:45:12,149 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:45:12,163 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:45:12,293 INFO  L134       CoverageAnalysis]: Checked inductivity of 302 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 302 trivial. 0 not checked.
[2020-11-25 09:45:12,294 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:45:12,294 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 09:45:12,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:45:12,294 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 09:45:12,294 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 09:45:12,294 INFO  L87              Difference]: Start difference. First operand 2987 states and 3338 transitions. cyclomatic complexity: 359 Second operand 14 states.
[2020-11-25 09:45:13,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:45:13,568 INFO  L93              Difference]: Finished difference Result 1736 states and 1937 transitions.
[2020-11-25 09:45:13,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 09:45:13,568 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1736 states and 1937 transitions.
[2020-11-25 09:45:13,571 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:45:13,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1736 states to 0 states and 0 transitions.
[2020-11-25 09:45:13,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:45:13,571 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:45:13,571 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:45:13,571 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:45:13,571 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:45:13,571 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:45:13,572 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:45:13,572 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:45:13,572 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:45:13,572 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:45:13,572 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:45:13,575 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:45:13 BasicIcfg
[2020-11-25 09:45:13,575 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:45:13,575 INFO  L168              Benchmark]: Toolchain (without parser) took 24504.21 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 1.7 GB in the end (delta: -717.2 MB). Peak memory consumption was 792.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,576 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,576 INFO  L168              Benchmark]: Boogie Preprocessor took 115.34 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,576 INFO  L168              Benchmark]: UtopiaSpecLang took 62.79 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,576 INFO  L168              Benchmark]: Boogie Printer took 17.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,576 INFO  L168              Benchmark]: RCFGBuilder took 778.42 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,577 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.41 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,577 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1297.23 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 781.3 MB in the beginning and 900.9 MB in the end (delta: -119.6 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,577 INFO  L168              Benchmark]: BlockEncodingV2 took 155.63 ms. Allocated memory is still 1.2 GB. Free memory was 900.9 MB in the beginning and 825.2 MB in the end (delta: 75.7 MB). Peak memory consumption was 75.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,578 INFO  L168              Benchmark]: BuchiAutomizer took 22034.84 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 825.2 MB in the beginning and 1.7 GB in the end (delta: -827.3 MB). Peak memory consumption was 481.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:45:13,580 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4586 locations, 8207 edges
  - StatisticsResult: Encoded RCFG
    4438 locations, 7833 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 115.34 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 62.79 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 778.42 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.9 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.41 ms. Allocated memory is still 1.0 GB. Free memory was 784.9 MB in the beginning and 781.3 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1297.23 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.8 MB). Free memory was 781.3 MB in the beginning and 900.9 MB in the end (delta: -119.6 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 155.63 ms. Allocated memory is still 1.2 GB. Free memory was 900.9 MB in the beginning and 825.2 MB in the end (delta: 75.7 MB). Peak memory consumption was 75.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 22034.84 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 825.2 MB in the beginning and 1.7 GB in the end (delta: -827.3 MB). Peak memory consumption was 481.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1848 locations, 2527 edges
  - StatisticsResult: BuchiProgram size
    4586 locations, 8207 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic). 13 modules have a trivial ranking function, the largest among these consists of 31 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 22.0s and 14 iterations.  TraceHistogramMax:4. Analysis of lassos took 2.8s. Construction of modules took 13.7s. BÃ¼chi inclusion checks took 4.5s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 12 MinimizatonAttempts, 1475 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3208 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 39460 SDtfs, 35488 SDslu, 103137 SDs, 0 SdLazy, 202840 SolverSat, 5653 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 13.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
