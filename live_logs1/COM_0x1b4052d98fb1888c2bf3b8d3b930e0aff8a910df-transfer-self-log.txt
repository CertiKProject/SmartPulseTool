This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:19:05,006 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:19:05,007 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:19:05,018 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:19:05,018 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:19:05,019 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:19:05,020 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:19:05,021 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:19:05,022 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:19:05,023 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:19:05,024 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:19:05,024 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:19:05,025 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:19:05,025 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:19:05,026 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:19:05,027 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:19:05,027 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:19:05,028 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:19:05,030 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:19:05,031 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:19:05,032 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:19:05,032 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:19:05,034 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:19:05,034 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:19:05,034 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:19:05,035 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:19:05,035 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:19:05,036 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:19:05,036 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:19:05,036 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:19:05,037 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:19:05,037 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:19:05,038 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:19:05,038 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:19:05,039 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:19:05,039 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:19:05,039 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:19:05,040 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:19:05,040 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:19:05,040 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:19:05,041 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:19:05,041 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:19:05,049 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:19:05,049 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:19:05,050 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:19:05,050 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:19:05,050 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:19:05,050 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:19:05,050 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:19:05,051 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:19:05,051 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:19:05,051 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:19:05,052 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:19:05,052 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:19:05,074 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:19:05,084 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:19:05,086 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:19:05,086 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:19:05,087 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:19:05,087 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl
[2020-11-25 12:19:05,087 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl'
[2020-11-25 12:19:05,161 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:19:05,162 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:19:05,163 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:19:05,163 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:19:05,163 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:19:05,179 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,180 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,209 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,210 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,231 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,241 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,248 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,258 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:19:05,258 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:19:05,259 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:19:05,260 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:19:05,264 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/1) ...
[2020-11-25 12:19:05,284 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(COM.transfer(to, value), msg.sender == to && value <= _balances_COM[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COM.transfer(to, value), return == true && _totalSupply_COM[this] == old(_totalSupply_COM[this]) && _balances_COM[this] == old(_balances_COM[this]) && _allowed_COM[this] == old(_allowed_COM[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 12:19:05,289 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(COM.transfer(to, value), msg.sender == to && value <= _balances_COM[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COM.transfer(to, value), return == true && _totalSupply_COM[this] == old(_totalSupply_COM[this]) && _balances_COM[this] == old(_balances_COM[this]) && _allowed_COM[this] == old(_allowed_COM[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 12:19:05,297 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(COM.transfer(to, value), msg.sender == to && value <= _balances_COM[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COM.transfer(to, value), return == true && _totalSupply_COM[this] == old(_totalSupply_COM[this]) && _balances_COM[this] == old(_balances_COM[this]) && _allowed_COM[this] == old(_allowed_COM[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 12:19:05,306 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s454 && value_s454<=_balances_COM[this][msg.sender] ) && value_s454>=0 ) && value_s454<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][to_s454]>=0 ) && _balances_COM[this][to_s454]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_COM[this][msg.sender]>=0 ) && _balances_COM[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[to_s454,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:19:05,310 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _totalSupply_COM[this]==( old(_totalSupply_COM[this]) ) ) && _balances_COM[this]==( old(_balances_COM[this]) ) ) && _allowed_COM[this]==( old(_allowed_COM[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_COM>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_COM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_COM>]]]]]]
[2020-11-25 12:19:05,316 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(COM.transfer(to, value), msg.sender == to && value <= _balances_COM[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][to] >= 0 && _balances_COM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_COM[this][msg.sender] >= 0 &&  _balances_COM[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(COM.transfer(to, value), return == true && _totalSupply_COM[this] == old(_totalSupply_COM[this]) && _balances_COM[this] == old(_balances_COM[this]) && _allowed_COM[this] == old(_allowed_COM[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 12:19:05,316 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_COM0) ==> ( <>AP(success_transfer_COM0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:19:05,325 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:05 PropertyContainer
[2020-11-25 12:19:05,325 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:19:05,325 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:19:05,325 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:19:05,326 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:19:05,327 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/2) ...
[2020-11-25 12:19:05,327 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:19:05,327 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:19:05,348 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:05" (2/2) ...
[2020-11-25 12:19:05,348 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:19:05,349 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:19:05,349 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:19:05,349 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:19:05,351 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/2) ...
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 12:19:05,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 12:19:05,402 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 12:19:05,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,403 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM
[2020-11-25 12:19:05,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM
[2020-11-25 12:19:05,404 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM
[2020-11-25 12:19:05,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:19:05,405 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__success
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM
[2020-11-25 12:19:05,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM
[2020-11-25 12:19:05,406 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__success
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM
[2020-11-25 12:19:05,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_COM
[2020-11-25 12:19:05,407 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,408 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__success
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure COM_COM__fail
[2020-11-25 12:19:05,409 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure findPercent~uint256_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure returnRate_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__success
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:19:05,410 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__success
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:19:05,411 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__success
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_COM__fail
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:19:05,412 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 12:19:05,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ceil~uint256~uint256_SafeMath__success
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 12:19:05,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__fail
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM_NoBaseCtor__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__fail
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure COM_COM__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__fail
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_COM__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__fail
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_COM__success
[2020-11-25 12:19:05,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_COM__success
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure findPercent~uint256_COM__success
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure returnRate_COM__success
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_COM__success
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnYes~address~uint256_COM__success
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__fail
[2020-11-25 12:19:05,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferBurnNo~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnYes~address~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferFromBurnNo~address~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__fail
[2020-11-25 12:19:05,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_COM__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_COM__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_COM__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_COM__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_COM__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:19:05,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_COM
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:19:05,419 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:19:05,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:19:05,771 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:19:05,771 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:19:05,771 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:19:06,053 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:19:06,053 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 12:19:06,055 INFO  L202        PluginConnector]: Adding new model COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:06 BoogieIcfgContainer
[2020-11-25 12:19:06,055 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:05" (2/2) ...
[2020-11-25 12:19:06,055 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:19:06,055 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@486c4abe and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:06, skipping insertion in model container
[2020-11-25 12:19:06,056 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:19:06,056 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:19:06,056 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:19:06,057 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:19:06,057 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/3) ...
[2020-11-25 12:19:06,058 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@33be46de and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:06, skipping insertion in model container
[2020-11-25 12:19:06,058 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:19:06,094 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:06 NWAContainer
[2020-11-25 12:19:06,094 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:19:06,094 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:19:06,094 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:19:06,095 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:19:06,096 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:06" (3/4) ...
[2020-11-25 12:19:06,097 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@c4c181d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:06, skipping insertion in model container
[2020-11-25 12:19:06,097 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:06" (4/4) ...
[2020-11-25 12:19:06,100 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:19:06,104 INFO  L110   BuchiProductObserver]: Initial RCFG 1654 locations, 2147 edges
[2020-11-25 12:19:06,104 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:19:06,115 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:19:07,349 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:19:07,355 INFO  L110   BuchiProductObserver]: BuchiProgram size 3970 locations, 6932 edges
[2020-11-25 12:19:07,355 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:07 BoogieIcfgContainer
[2020-11-25 12:19:07,355 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:19:07,355 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:19:07,355 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:19:07,357 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:19:07,357 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:07" (1/1) ...
[2020-11-25 12:19:07,428 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:19:07,429 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call c_s197 := add~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s197, m_s197);
[2020-11-25 12:19:07,438 INFO  L313           BlockEncoder]: Initial Icfg 3970 locations, 6932 edges
[2020-11-25 12:19:07,438 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:19:07,438 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:19:07,439 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:19:07,439 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:19:07,451 INFO  L70    emoveInfeasibleEdges]: Removed 63 edges and 11 locations because of local infeasibility
[2020-11-25 12:19:07,458 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 12:19:07,470 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:19:07,474 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:19:07,477 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:19:07,477 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:19:07,482 INFO  L313           BlockEncoder]: Encoded RCFG 3928 locations, 6823 edges
[2020-11-25 12:19:07,482 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:19:07 BasicIcfg
[2020-11-25 12:19:07,482 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:19:07,482 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:19:07,482 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:19:07,484 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:19:07,484 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,485 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:19:05" (1/6) ...
[2020-11-25 12:19:07,487 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ad46585 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:07, skipping insertion in model container
[2020-11-25 12:19:07,487 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,487 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:19:05" (2/6) ...
[2020-11-25 12:19:07,487 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ad46585 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:07, skipping insertion in model container
[2020-11-25 12:19:07,487 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,487 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:19:06" (3/6) ...
[2020-11-25 12:19:07,488 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ad46585 and model type COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:19:07, skipping insertion in model container
[2020-11-25 12:19:07,488 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,488 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:19:06" (4/6) ...
[2020-11-25 12:19:07,488 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ad46585 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:19:07, skipping insertion in model container
[2020-11-25 12:19:07,488 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,488 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:19:07" (5/6) ...
[2020-11-25 12:19:07,489 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3ad46585 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:19:07, skipping insertion in model container
[2020-11-25 12:19:07,489 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:19:07,489 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:19:07" (6/6) ...
[2020-11-25 12:19:07,490 INFO  L404   chiAutomizerObserver]: Analyzing ICFG COM_0x1b4052d98fb1888c2bf3b8d3b930e0aff8a910df_transfer-self.bpl_BEv2
[2020-11-25 12:19:07,524 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:19:07,524 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:19:07,524 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:19:07,524 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:19:07,525 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:19:07,525 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:19:07,525 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:19:07,525 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:19:07,525 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:19:07,558 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3928 states.
[2020-11-25 12:19:07,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:07,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:07,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:07,635 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:07,635 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:07,635 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:19:07,635 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3928 states.
[2020-11-25 12:19:07,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:07,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:07,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:07,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:07,663 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:07,681 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:07,681 INFO  L82        PathProgramCache]: Analyzing trace with hash 325032756, now seen corresponding path program 1 times
[2020-11-25 12:19:07,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:07,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:07,757 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:07,758 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:07,759 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:07,761 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:07,934 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:07,935 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:07,936 INFO  L87              Difference]: Start difference. First operand 3928 states. Second operand 4 states.
[2020-11-25 12:19:08,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:08,290 INFO  L93              Difference]: Finished difference Result 2917 states and 3364 transitions.
[2020-11-25 12:19:08,290 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:19:08,291 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2917 states and 3364 transitions.
[2020-11-25 12:19:08,306 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,327 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2917 states to 2913 states and 3356 transitions.
[2020-11-25 12:19:08,328 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:19:08,330 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-11-25 12:19:08,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2913 states and 3356 transitions.
[2020-11-25 12:19:08,337 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:08,337 INFO  L728         BuchiCegarLoop]: Abstraction has 2913 states and 3356 transitions.
[2020-11-25 12:19:08,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2913 states and 3356 transitions.
[2020-11-25 12:19:08,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2913 to 2913.
[2020-11-25 12:19:08,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2913 states.
[2020-11-25 12:19:08,402 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2913 states to 2913 states and 3356 transitions.
[2020-11-25 12:19:08,403 INFO  L751         BuchiCegarLoop]: Abstraction has 2913 states and 3356 transitions.
[2020-11-25 12:19:08,403 INFO  L631         BuchiCegarLoop]: Abstraction has 2913 states and 3356 transitions.
[2020-11-25 12:19:08,403 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:19:08,403 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2913 states and 3356 transitions.
[2020-11-25 12:19:08,410 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,411 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:08,411 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:08,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:08,412 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND TRUE   revert
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:08,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:08,416 INFO  L82        PathProgramCache]: Analyzing trace with hash -1817215778, now seen corresponding path program 1 times
[2020-11-25 12:19:08,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:08,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:08,443 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:08,443 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:08,443 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:19:08,444 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:08,445 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:19:08,445 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:19:08,445 INFO  L87              Difference]: Start difference. First operand 2913 states and 3356 transitions. cyclomatic complexity: 445 Second operand 3 states.
[2020-11-25 12:19:08,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:08,507 INFO  L93              Difference]: Finished difference Result 3547 states and 4004 transitions.
[2020-11-25 12:19:08,508 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:19:08,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3547 states and 4004 transitions.
[2020-11-25 12:19:08,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:08,543 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3547 states to 3547 states and 4004 transitions.
[2020-11-25 12:19:08,544 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 815
[2020-11-25 12:19:08,545 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 815
[2020-11-25 12:19:08,545 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3547 states and 4004 transitions.
[2020-11-25 12:19:08,550 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:08,550 INFO  L728         BuchiCegarLoop]: Abstraction has 3547 states and 4004 transitions.
[2020-11-25 12:19:08,553 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3547 states and 4004 transitions.
[2020-11-25 12:19:08,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3547 to 3017.
[2020-11-25 12:19:08,583 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3017 states.
[2020-11-25 12:19:08,589 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3017 states to 3017 states and 3360 transitions.
[2020-11-25 12:19:08,589 INFO  L751         BuchiCegarLoop]: Abstraction has 3017 states and 3360 transitions.
[2020-11-25 12:19:08,589 INFO  L631         BuchiCegarLoop]: Abstraction has 3017 states and 3360 transitions.
[2020-11-25 12:19:08,589 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:19:08,589 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3017 states and 3360 transitions.
[2020-11-25 12:19:08,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:08,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:08,596 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:08,597 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND TRUE   !(amount_s1039 != 0)
[L3010]              revert := true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND TRUE   revert
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:08,600 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:08,600 INFO  L82        PathProgramCache]: Analyzing trace with hash -662356051, now seen corresponding path program 1 times
[2020-11-25 12:19:08,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:08,609 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:08,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:08,646 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:08,646 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:08,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:08,646 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:08,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:08,647 INFO  L87              Difference]: Start difference. First operand 3017 states and 3360 transitions. cyclomatic complexity: 345 Second operand 4 states.
[2020-11-25 12:19:08,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:08,685 INFO  L93              Difference]: Finished difference Result 3011 states and 3351 transitions.
[2020-11-25 12:19:08,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:19:08,685 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3011 states and 3351 transitions.
[2020-11-25 12:19:08,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3011 states to 3008 states and 3348 transitions.
[2020-11-25 12:19:08,706 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 12:19:08,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 12:19:08,707 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3008 states and 3348 transitions.
[2020-11-25 12:19:08,710 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:08,710 INFO  L728         BuchiCegarLoop]: Abstraction has 3008 states and 3348 transitions.
[2020-11-25 12:19:08,713 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3008 states and 3348 transitions.
[2020-11-25 12:19:08,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3008 to 3008.
[2020-11-25 12:19:08,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3008 states.
[2020-11-25 12:19:08,742 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3008 states to 3008 states and 3348 transitions.
[2020-11-25 12:19:08,742 INFO  L751         BuchiCegarLoop]: Abstraction has 3008 states and 3348 transitions.
[2020-11-25 12:19:08,742 INFO  L631         BuchiCegarLoop]: Abstraction has 3008 states and 3348 transitions.
[2020-11-25 12:19:08,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:19:08,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3008 states and 3348 transitions.
[2020-11-25 12:19:08,747 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,748 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:08,748 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:08,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:08,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND TRUE   !(value_s454 <= _balances_COM[this][msgsender_MSG])
[L2394]              revert := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:08,752 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:08,753 INFO  L82        PathProgramCache]: Analyzing trace with hash 1971685661, now seen corresponding path program 1 times
[2020-11-25 12:19:08,753 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:08,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:08,803 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:08,803 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:08,803 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 12:19:08,804 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:08,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 12:19:08,804 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 12:19:08,804 INFO  L87              Difference]: Start difference. First operand 3008 states and 3348 transitions. cyclomatic complexity: 342 Second operand 3 states.
[2020-11-25 12:19:08,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:08,857 INFO  L93              Difference]: Finished difference Result 3534 states and 3947 transitions.
[2020-11-25 12:19:08,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 12:19:08,857 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3534 states and 3947 transitions.
[2020-11-25 12:19:08,869 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:08,885 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3534 states to 3367 states and 3742 transitions.
[2020-11-25 12:19:08,885 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-11-25 12:19:08,885 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 12:19:08,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3367 states and 3742 transitions.
[2020-11-25 12:19:08,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:08,889 INFO  L728         BuchiCegarLoop]: Abstraction has 3367 states and 3742 transitions.
[2020-11-25 12:19:08,892 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3367 states and 3742 transitions.
[2020-11-25 12:19:08,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3367 to 2905.
[2020-11-25 12:19:08,924 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2905 states.
[2020-11-25 12:19:08,932 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2905 states to 2905 states and 3166 transitions.
[2020-11-25 12:19:08,932 INFO  L751         BuchiCegarLoop]: Abstraction has 2905 states and 3166 transitions.
[2020-11-25 12:19:08,932 INFO  L631         BuchiCegarLoop]: Abstraction has 2905 states and 3166 transitions.
[2020-11-25 12:19:08,932 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:19:08,932 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2905 states and 3166 transitions.
[2020-11-25 12:19:08,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:08,937 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:08,937 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:08,939 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:08,939 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND TRUE   !(value_s454 <= __tmp___balances_COM[this][msgsender_MSG])
[L2367]              revert := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND TRUE   !(value_s454 <= __tmp___balances_COM[this][msgsender_MSG])
[L2367]              revert := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:08,942 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:08,943 INFO  L82        PathProgramCache]: Analyzing trace with hash -1121884387, now seen corresponding path program 1 times
[2020-11-25 12:19:08,943 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:08,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:09,051 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:09,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:09,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:19:09,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:09,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:19:09,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:19:09,052 INFO  L87              Difference]: Start difference. First operand 2905 states and 3166 transitions. cyclomatic complexity: 263 Second operand 6 states.
[2020-11-25 12:19:09,811 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:09,811 INFO  L93              Difference]: Finished difference Result 3103 states and 3381 transitions.
[2020-11-25 12:19:09,811 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:09,812 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3103 states and 3381 transitions.
[2020-11-25 12:19:09,828 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:19:09,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3103 states to 3103 states and 3381 transitions.
[2020-11-25 12:19:09,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 697
[2020-11-25 12:19:09,841 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 697
[2020-11-25 12:19:09,841 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3103 states and 3381 transitions.
[2020-11-25 12:19:09,844 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:09,844 INFO  L728         BuchiCegarLoop]: Abstraction has 3103 states and 3381 transitions.
[2020-11-25 12:19:09,847 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3103 states and 3381 transitions.
[2020-11-25 12:19:09,874 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3103 to 2971.
[2020-11-25 12:19:09,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2971 states.
[2020-11-25 12:19:09,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2971 states to 2971 states and 3236 transitions.
[2020-11-25 12:19:09,877 INFO  L751         BuchiCegarLoop]: Abstraction has 2971 states and 3236 transitions.
[2020-11-25 12:19:09,877 INFO  L631         BuchiCegarLoop]: Abstraction has 2971 states and 3236 transitions.
[2020-11-25 12:19:09,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:19:09,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2971 states and 3236 transitions.
[2020-11-25 12:19:09,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:09,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:09,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:09,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:09,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND TRUE   !(to_s454 != null)
[L2372]              revert := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND TRUE   !(to_s454 != null)
[L2372]              revert := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:09,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:09,887 INFO  L82        PathProgramCache]: Analyzing trace with hash 1721778695, now seen corresponding path program 1 times
[2020-11-25 12:19:09,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:09,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:09,924 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:09,924 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:09,924 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:19:09,924 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:09,925 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:19:09,925 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:19:09,925 INFO  L87              Difference]: Start difference. First operand 2971 states and 3236 transitions. cyclomatic complexity: 267 Second operand 6 states.
[2020-11-25 12:19:09,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:09,970 INFO  L93              Difference]: Finished difference Result 3005 states and 3273 transitions.
[2020-11-25 12:19:09,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 12:19:09,971 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3005 states and 3273 transitions.
[2020-11-25 12:19:09,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:09,984 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3005 states to 2997 states and 3265 transitions.
[2020-11-25 12:19:09,984 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 646
[2020-11-25 12:19:09,985 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 12:19:09,985 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2997 states and 3265 transitions.
[2020-11-25 12:19:09,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:09,987 INFO  L728         BuchiCegarLoop]: Abstraction has 2997 states and 3265 transitions.
[2020-11-25 12:19:09,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2997 states and 3265 transitions.
[2020-11-25 12:19:10,014 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2997 to 2978.
[2020-11-25 12:19:10,015 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2978 states.
[2020-11-25 12:19:10,019 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2978 states to 2978 states and 3244 transitions.
[2020-11-25 12:19:10,019 INFO  L751         BuchiCegarLoop]: Abstraction has 2978 states and 3244 transitions.
[2020-11-25 12:19:10,019 INFO  L631         BuchiCegarLoop]: Abstraction has 2978 states and 3244 transitions.
[2020-11-25 12:19:10,019 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:19:10,019 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2978 states and 3244 transitions.
[2020-11-25 12:19:10,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:10,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:10,024 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:10,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:10,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND TRUE   !(value_s607 <= __tmp___balances_COM[this][msgsender_MSG])
[L2529]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND TRUE   !(value_s607 <= __tmp___balances_COM[this][msgsender_MSG])
[L2529]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:10,028 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:10,028 INFO  L82        PathProgramCache]: Analyzing trace with hash 1731387188, now seen corresponding path program 1 times
[2020-11-25 12:19:10,029 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:10,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:10,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:10,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:10,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:19:10,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:10,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:19:10,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:19:10,110 INFO  L87              Difference]: Start difference. First operand 2978 states and 3244 transitions. cyclomatic complexity: 268 Second operand 6 states.
[2020-11-25 12:19:10,616 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:10,616 INFO  L93              Difference]: Finished difference Result 3121 states and 3397 transitions.
[2020-11-25 12:19:10,616 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:10,616 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3121 states and 3397 transitions.
[2020-11-25 12:19:10,622 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:19:10,629 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3121 states to 3115 states and 3391 transitions.
[2020-11-25 12:19:10,629 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 702
[2020-11-25 12:19:10,629 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 702
[2020-11-25 12:19:10,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3115 states and 3391 transitions.
[2020-11-25 12:19:10,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:10,632 INFO  L728         BuchiCegarLoop]: Abstraction has 3115 states and 3391 transitions.
[2020-11-25 12:19:10,634 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3115 states and 3391 transitions.
[2020-11-25 12:19:10,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3115 to 2976.
[2020-11-25 12:19:10,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2976 states.
[2020-11-25 12:19:10,653 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2976 states to 2976 states and 3240 transitions.
[2020-11-25 12:19:10,653 INFO  L751         BuchiCegarLoop]: Abstraction has 2976 states and 3240 transitions.
[2020-11-25 12:19:10,653 INFO  L631         BuchiCegarLoop]: Abstraction has 2976 states and 3240 transitions.
[2020-11-25 12:19:10,653 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:19:10,653 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2976 states and 3240 transitions.
[2020-11-25 12:19:10,656 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:10,656 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:10,656 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:10,657 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:10,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND TRUE   !(value_s545 <= __tmp___balances_COM[this][msgsender_MSG])
[L2426]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND TRUE   !(value_s545 <= __tmp___balances_COM[this][msgsender_MSG])
[L2426]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:10,660 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:10,660 INFO  L82        PathProgramCache]: Analyzing trace with hash -1197317714, now seen corresponding path program 1 times
[2020-11-25 12:19:10,661 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:10,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:10,706 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:10,706 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:10,706 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:19:10,707 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:10,707 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:19:10,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:19:10,707 INFO  L87              Difference]: Start difference. First operand 2976 states and 3240 transitions. cyclomatic complexity: 266 Second operand 6 states.
[2020-11-25 12:19:11,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:11,353 INFO  L93              Difference]: Finished difference Result 3119 states and 3393 transitions.
[2020-11-25 12:19:11,353 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:11,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3119 states and 3393 transitions.
[2020-11-25 12:19:11,361 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:19:11,368 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3119 states to 3113 states and 3387 transitions.
[2020-11-25 12:19:11,368 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 701
[2020-11-25 12:19:11,368 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 701
[2020-11-25 12:19:11,368 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3113 states and 3387 transitions.
[2020-11-25 12:19:11,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:11,370 INFO  L728         BuchiCegarLoop]: Abstraction has 3113 states and 3387 transitions.
[2020-11-25 12:19:11,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3113 states and 3387 transitions.
[2020-11-25 12:19:11,391 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3113 to 2974.
[2020-11-25 12:19:11,391 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2974 states.
[2020-11-25 12:19:11,394 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2974 states to 2974 states and 3236 transitions.
[2020-11-25 12:19:11,394 INFO  L751         BuchiCegarLoop]: Abstraction has 2974 states and 3236 transitions.
[2020-11-25 12:19:11,394 INFO  L631         BuchiCegarLoop]: Abstraction has 2974 states and 3236 transitions.
[2020-11-25 12:19:11,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 12:19:11,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2974 states and 3236 transitions.
[2020-11-25 12:19:11,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:11,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:11,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:11,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND TRUE   !(to_s607 != null)
[L2534]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND TRUE   !(to_s607 != null)
[L2534]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:11,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:11,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -2102883472, now seen corresponding path program 1 times
[2020-11-25 12:19:11,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:11,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:11,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:11,494 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:11,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 12:19:11,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:11,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 12:19:11,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 12:19:11,495 INFO  L87              Difference]: Start difference. First operand 2974 states and 3236 transitions. cyclomatic complexity: 264 Second operand 7 states.
[2020-11-25 12:19:11,540 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:11,540 INFO  L93              Difference]: Finished difference Result 3011 states and 3275 transitions.
[2020-11-25 12:19:11,540 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:11,540 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3011 states and 3275 transitions.
[2020-11-25 12:19:11,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3011 states to 3003 states and 3267 transitions.
[2020-11-25 12:19:11,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 648
[2020-11-25 12:19:11,557 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 648
[2020-11-25 12:19:11,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3003 states and 3267 transitions.
[2020-11-25 12:19:11,559 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:11,559 INFO  L728         BuchiCegarLoop]: Abstraction has 3003 states and 3267 transitions.
[2020-11-25 12:19:11,562 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3003 states and 3267 transitions.
[2020-11-25 12:19:11,582 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3003 to 2982.
[2020-11-25 12:19:11,582 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2982 states.
[2020-11-25 12:19:11,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2982 states to 2982 states and 3244 transitions.
[2020-11-25 12:19:11,586 INFO  L751         BuchiCegarLoop]: Abstraction has 2982 states and 3244 transitions.
[2020-11-25 12:19:11,586 INFO  L631         BuchiCegarLoop]: Abstraction has 2982 states and 3244 transitions.
[2020-11-25 12:19:11,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 12:19:11,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2982 states and 3244 transitions.
[2020-11-25 12:19:11,590 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:11,590 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:11,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:11,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND FALSE  !(!(value_s545 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2429]              __var_5 := null;
[L2430]  COND TRUE   !(to_s545 != null)
[L2431]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND FALSE  !(!(value_s545 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2429]              __var_5 := null;
[L2430]  COND TRUE   !(to_s545 != null)
[L2431]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:11,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:11,595 INFO  L82        PathProgramCache]: Analyzing trace with hash 1178425005, now seen corresponding path program 1 times
[2020-11-25 12:19:11,596 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:11,608 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:11,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:11,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:11,647 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 12:19:11,647 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:11,647 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 12:19:11,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 12:19:11,648 INFO  L87              Difference]: Start difference. First operand 2982 states and 3244 transitions. cyclomatic complexity: 264 Second operand 7 states.
[2020-11-25 12:19:11,688 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:11,689 INFO  L93              Difference]: Finished difference Result 3019 states and 3283 transitions.
[2020-11-25 12:19:11,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:11,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3019 states and 3283 transitions.
[2020-11-25 12:19:11,694 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,699 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3019 states to 3011 states and 3275 transitions.
[2020-11-25 12:19:11,699 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 652
[2020-11-25 12:19:11,700 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 652
[2020-11-25 12:19:11,700 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3011 states and 3275 transitions.
[2020-11-25 12:19:11,701 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:11,701 INFO  L728         BuchiCegarLoop]: Abstraction has 3011 states and 3275 transitions.
[2020-11-25 12:19:11,704 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3011 states and 3275 transitions.
[2020-11-25 12:19:11,718 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3011 to 2990.
[2020-11-25 12:19:11,718 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2990 states.
[2020-11-25 12:19:11,721 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2990 states to 2990 states and 3252 transitions.
[2020-11-25 12:19:11,721 INFO  L751         BuchiCegarLoop]: Abstraction has 2990 states and 3252 transitions.
[2020-11-25 12:19:11,721 INFO  L631         BuchiCegarLoop]: Abstraction has 2990 states and 3252 transitions.
[2020-11-25 12:19:11,721 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 12:19:11,721 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2990 states and 3252 transitions.
[2020-11-25 12:19:11,723 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:11,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:11,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:11,724 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND FALSE  !(!(to_s607 != null))
[L2537]  COND TRUE   !(value_s607 < __tmp__noFee_COM[this])
[L2538]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND FALSE  !(!(to_s607 != null))
[L2537]  COND TRUE   !(value_s607 < __tmp__noFee_COM[this])
[L2538]              revert := true;
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:11,727 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:11,727 INFO  L82        PathProgramCache]: Analyzing trace with hash -1310839629, now seen corresponding path program 1 times
[2020-11-25 12:19:11,728 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:11,736 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:11,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:11,760 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:11,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:11,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:11,760 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:11,760 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:11,760 INFO  L87              Difference]: Start difference. First operand 2990 states and 3252 transitions. cyclomatic complexity: 264 Second operand 4 states.
[2020-11-25 12:19:11,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:11,783 INFO  L93              Difference]: Finished difference Result 2996 states and 3258 transitions.
[2020-11-25 12:19:11,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:19:11,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2996 states and 3258 transitions.
[2020-11-25 12:19:11,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2996 states to 2990 states and 3252 transitions.
[2020-11-25 12:19:11,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 648
[2020-11-25 12:19:11,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 648
[2020-11-25 12:19:11,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2990 states and 3252 transitions.
[2020-11-25 12:19:11,794 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:11,794 INFO  L728         BuchiCegarLoop]: Abstraction has 2990 states and 3252 transitions.
[2020-11-25 12:19:11,797 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2990 states and 3252 transitions.
[2020-11-25 12:19:11,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2990 to 2980.
[2020-11-25 12:19:11,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2980 states.
[2020-11-25 12:19:11,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2980 states to 2980 states and 3240 transitions.
[2020-11-25 12:19:11,813 INFO  L751         BuchiCegarLoop]: Abstraction has 2980 states and 3240 transitions.
[2020-11-25 12:19:11,813 INFO  L631         BuchiCegarLoop]: Abstraction has 2980 states and 3240 transitions.
[2020-11-25 12:19:11,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 12:19:11,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2980 states and 3240 transitions.
[2020-11-25 12:19:11,816 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,816 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:11,816 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:11,817 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:11,817 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND FALSE  !(!(value_s545 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2429]              __var_5 := null;
[L2430]  COND FALSE  !(!(to_s545 != null))
[L2434]  COND TRUE   !(value_s545 >= __tmp__noFee_COM[this])
[L2435]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND FALSE  !(value_s454 < __tmp__noFee_COM[this])
[L2381]  CALL        call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2425]  COND FALSE  !(!(value_s545 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2429]              __var_5 := null;
[L2430]  COND FALSE  !(!(to_s545 != null))
[L2434]  COND TRUE   !(value_s545 >= __tmp__noFee_COM[this])
[L2435]              revert := true;
[L2381]  RET         call _transferBurnYes~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2382]  COND TRUE   revert
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:11,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:11,819 INFO  L82        PathProgramCache]: Analyzing trace with hash 1287490515, now seen corresponding path program 1 times
[2020-11-25 12:19:11,820 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:11,828 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:11,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:11,856 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:11,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:11,856 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:11,857 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:11,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:11,857 INFO  L87              Difference]: Start difference. First operand 2980 states and 3240 transitions. cyclomatic complexity: 262 Second operand 4 states.
[2020-11-25 12:19:11,879 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:11,879 INFO  L93              Difference]: Finished difference Result 2986 states and 3246 transitions.
[2020-11-25 12:19:11,879 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:19:11,879 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2986 states and 3246 transitions.
[2020-11-25 12:19:11,884 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2986 states to 2980 states and 3240 transitions.
[2020-11-25 12:19:11,889 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 643
[2020-11-25 12:19:11,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 643
[2020-11-25 12:19:11,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2980 states and 3240 transitions.
[2020-11-25 12:19:11,891 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:11,891 INFO  L728         BuchiCegarLoop]: Abstraction has 2980 states and 3240 transitions.
[2020-11-25 12:19:11,893 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2980 states and 3240 transitions.
[2020-11-25 12:19:11,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2980 to 2970.
[2020-11-25 12:19:11,906 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2970 states.
[2020-11-25 12:19:11,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2970 states to 2970 states and 3228 transitions.
[2020-11-25 12:19:11,909 INFO  L751         BuchiCegarLoop]: Abstraction has 2970 states and 3228 transitions.
[2020-11-25 12:19:11,909 INFO  L631         BuchiCegarLoop]: Abstraction has 2970 states and 3228 transitions.
[2020-11-25 12:19:11,909 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 12:19:11,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2970 states and 3228 transitions.
[2020-11-25 12:19:11,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:11,912 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:11,912 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:11,913 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:11,913 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:11,915 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:11,915 INFO  L82        PathProgramCache]: Analyzing trace with hash -583048261, now seen corresponding path program 1 times
[2020-11-25 12:19:11,916 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:11,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:12,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:12,994 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:12,994 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [32] imperfect sequences [] total 32
[2020-11-25 12:19:12,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:12,995 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 12:19:12,995 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=96, Invalid=960, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 12:19:12,995 INFO  L87              Difference]: Start difference. First operand 2970 states and 3228 transitions. cyclomatic complexity: 260 Second operand 33 states.
[2020-11-25 12:19:19,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:19,776 INFO  L93              Difference]: Finished difference Result 3054 states and 3344 transitions.
[2020-11-25 12:19:19,777 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 12:19:19,777 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3054 states and 3344 transitions.
[2020-11-25 12:19:19,782 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:19:19,787 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3054 states to 3054 states and 3344 transitions.
[2020-11-25 12:19:19,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 674
[2020-11-25 12:19:19,788 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 674
[2020-11-25 12:19:19,788 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3054 states and 3344 transitions.
[2020-11-25 12:19:19,790 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:19,791 INFO  L728         BuchiCegarLoop]: Abstraction has 3054 states and 3344 transitions.
[2020-11-25 12:19:19,793 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3054 states and 3344 transitions.
[2020-11-25 12:19:19,806 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3054 to 3037.
[2020-11-25 12:19:19,806 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3037 states.
[2020-11-25 12:19:19,809 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3037 states to 3037 states and 3309 transitions.
[2020-11-25 12:19:19,809 INFO  L751         BuchiCegarLoop]: Abstraction has 3037 states and 3309 transitions.
[2020-11-25 12:19:19,809 INFO  L631         BuchiCegarLoop]: Abstraction has 3037 states and 3309 transitions.
[2020-11-25 12:19:19,809 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 12:19:19,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3037 states and 3309 transitions.
[2020-11-25 12:19:19,812 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:19:19,812 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:19,812 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:19,813 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:19,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND FALSE  !(!(to_s607 != null))
[L2537]  COND FALSE  !(!(value_s607 < __tmp__noFee_COM[this]))
[L2541]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][msgsender_MSG], value_s607);
[L1985]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2541]  RET         call __var_10 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][msgsender_MSG], value_s607);
[L2542]  COND FALSE  !(revert)
[L2545]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][msgsender_MSG];
[L2546]              __tmp___balances_COM[this][msgsender_MSG] := __var_10;
[L2547]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][msgsender_MSG];
[L2548]  CALL        call __var_11 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][to_s607], value_s607);
[L1999]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2000]              __ret_0_ := c_s163;
[L2548]  RET         call __var_11 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][to_s607], value_s607);
[L2549]  COND FALSE  !(revert)
[L2552]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][to_s607];
[L2553]              __tmp___balances_COM[this][to_s607] := __var_11;
[L2554]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][to_s607];
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND FALSE  !(revert)
[L2386]              __ret_0_ := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND TRUE   __exception
[L913]               __tmp__Balance := Balance;
[L914]               __tmp__DType := DType;
[L915]               __tmp__Alloc := Alloc;
[L916]               __tmp__balance_ADDR := balance_ADDR;
[L917]               __tmp__M_Ref_int := M_Ref_int;
[L918]               __tmp__sum__balances0 := sum__balances0;
[L919]               __tmp__alloc__allowed_COM_lvl0 := alloc__allowed_COM_lvl0;
[L920]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L921]               __tmp__sum__allowed1 := sum__allowed1;
[L922]               __tmp__Length := Length;
[L923]               __tmp__now := now;
[L924]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L925]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L926]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L927]               __tmp___balances_COM := _balances_COM;
[L928]               __tmp___allowed_COM := _allowed_COM;
[L929]               __tmp__tokenName_COM := tokenName_COM;
[L930]               __tmp__tokenSymbol_COM := tokenSymbol_COM;
[L931]               __tmp__tokenDecimals_COM := tokenDecimals_COM;
[L932]               __tmp___totalSupply_COM := _totalSupply_COM;
[L933]               __tmp__noFee_COM := noFee_COM;
[L934]               __tmp__heightEnd20Percent_COM := heightEnd20Percent_COM;
[L935]               __tmp__heightEnd10Percent_COM := heightEnd10Percent_COM;
[L936]               __tmp__heightEnd05Percent_COM := heightEnd05Percent_COM;
[L937]   CALL        call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2366]  COND FALSE  !(!(value_s454 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2370]              __var_4 := null;
[L2371]  COND FALSE  !(!(to_s454 != null))
[L2375]  COND TRUE   value_s454 < __tmp__noFee_COM[this]
[L2376]  CALL        call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2528]  COND FALSE  !(!(value_s607 <= __tmp___balances_COM[this][msgsender_MSG]))
[L2532]              __var_9 := null;
[L2533]  COND FALSE  !(!(to_s607 != null))
[L2537]  COND FALSE  !(!(value_s607 < __tmp__noFee_COM[this]))
[L2541]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][msgsender_MSG], value_s607);
[L1985]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2541]  RET         call __var_10 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][msgsender_MSG], value_s607);
[L2542]  COND FALSE  !(revert)
[L2545]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][msgsender_MSG];
[L2546]              __tmp___balances_COM[this][msgsender_MSG] := __var_10;
[L2547]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][msgsender_MSG];
[L2548]  CALL        call __var_11 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][to_s607], value_s607);
[L1999]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2000]              __ret_0_ := c_s163;
[L2548]  RET         call __var_11 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_COM[this][to_s607], value_s607);
[L2549]  COND FALSE  !(revert)
[L2552]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_COM[this][to_s607];
[L2553]              __tmp___balances_COM[this][to_s607] := __var_11;
[L2554]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_COM[this][to_s607];
[L2376]  RET         call _transferBurnNo~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2377]  COND FALSE  !(revert)
[L2386]              __ret_0_ := true;
[L937]   RET         call __ret_0_ := transfer~address~uint256_COM__fail(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L938]               assume revert || gas < 0;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:19,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:19,816 INFO  L82        PathProgramCache]: Analyzing trace with hash -719141327, now seen corresponding path program 1 times
[2020-11-25 12:19:19,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:19,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:19,859 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 12:19:19,859 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:19,859 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 12:19:19,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:19:19,860 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 12:19:19,860 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 12:19:19,860 INFO  L87              Difference]: Start difference. First operand 3037 states and 3309 transitions. cyclomatic complexity: 276 Second operand 5 states.
[2020-11-25 12:19:20,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:20,248 INFO  L93              Difference]: Finished difference Result 3662 states and 4065 transitions.
[2020-11-25 12:19:20,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:19:20,248 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3662 states and 4065 transitions.
[2020-11-25 12:19:20,255 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:19:20,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3662 states to 2579 states and 2926 transitions.
[2020-11-25 12:19:20,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 490
[2020-11-25 12:19:20,261 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-11-25 12:19:20,261 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2579 states and 2926 transitions.
[2020-11-25 12:19:20,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:20,263 INFO  L728         BuchiCegarLoop]: Abstraction has 2579 states and 2926 transitions.
[2020-11-25 12:19:20,264 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2579 states and 2926 transitions.
[2020-11-25 12:19:20,277 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2579 to 2002.
[2020-11-25 12:19:20,277 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2002 states.
[2020-11-25 12:19:20,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2002 states to 2002 states and 2179 transitions.
[2020-11-25 12:19:20,279 INFO  L751         BuchiCegarLoop]: Abstraction has 2002 states and 2179 transitions.
[2020-11-25 12:19:20,279 INFO  L631         BuchiCegarLoop]: Abstraction has 2002 states and 2179 transitions.
[2020-11-25 12:19:20,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 12:19:20,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2002 states and 2179 transitions.
[2020-11-25 12:19:20,281 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:20,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:20,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:20,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:20,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND TRUE   choice == 15
[L4181]              gas := gas - 21000;
[L4182]  COND FALSE  !(gas >= 0)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:20,284 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:20,284 INFO  L82        PathProgramCache]: Analyzing trace with hash 2010672046, now seen corresponding path program 1 times
[2020-11-25 12:19:20,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:20,300 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:20,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:20,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:20,395 INFO  L82        PathProgramCache]: Analyzing trace with hash 832611908, now seen corresponding path program 1 times
[2020-11-25 12:19:20,395 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:20,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:20,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:20,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:20,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:19:20,403 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 12:19:20,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:19:20,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:19:20,404 INFO  L87              Difference]: Start difference. First operand 2002 states and 2179 transitions. cyclomatic complexity: 180 Second operand 4 states.
[2020-11-25 12:19:20,563 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:20,563 INFO  L93              Difference]: Finished difference Result 2133 states and 2299 transitions.
[2020-11-25 12:19:20,563 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:19:20,563 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2133 states and 2299 transitions.
[2020-11-25 12:19:20,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 12:19:20,574 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2133 states to 2133 states and 2299 transitions.
[2020-11-25 12:19:20,574 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 614
[2020-11-25 12:19:20,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 614
[2020-11-25 12:19:20,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2133 states and 2299 transitions.
[2020-11-25 12:19:20,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:20,576 INFO  L728         BuchiCegarLoop]: Abstraction has 2133 states and 2299 transitions.
[2020-11-25 12:19:20,577 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2133 states and 2299 transitions.
[2020-11-25 12:19:20,588 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2133 to 2002.
[2020-11-25 12:19:20,588 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2002 states.
[2020-11-25 12:19:20,590 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2002 states to 2002 states and 2149 transitions.
[2020-11-25 12:19:20,590 INFO  L751         BuchiCegarLoop]: Abstraction has 2002 states and 2149 transitions.
[2020-11-25 12:19:20,590 INFO  L631         BuchiCegarLoop]: Abstraction has 2002 states and 2149 transitions.
[2020-11-25 12:19:20,590 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 12:19:20,590 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2002 states and 2149 transitions.
[2020-11-25 12:19:20,594 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:20,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:20,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:20,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:20,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND TRUE   value_s454 < noFee_COM[this]
[L2403]  CALL        call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2562]  COND FALSE  !(!(value_s607 <= _balances_COM[this][msgsender_MSG]))
[L2566]              __var_9 := null;
[L2567]  COND FALSE  !(!(to_s607 != null))
[L2571]  COND FALSE  !(!(value_s607 < noFee_COM[this]))
[L2575]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2575]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s607);
[L2576]  COND FALSE  !(revert)
[L2579]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2580]              _balances_COM[this][msgsender_MSG] := __var_10;
[L2581]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2582]  CALL        call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2582]  RET         call __var_11 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s607], value_s607);
[L2583]  COND FALSE  !(revert)
[L2586]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s607];
[L2587]              _balances_COM[this][to_s607] := __var_11;
[L2588]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s607];
[L2589]              assert { :EventEmitted "Transfer_COM" } true;
[L2403]  RET         call _transferBurnNo~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2404]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:20,598 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:20,598 INFO  L82        PathProgramCache]: Analyzing trace with hash 2010672046, now seen corresponding path program 2 times
[2020-11-25 12:19:20,599 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:20,613 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:20,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:20,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:20,655 INFO  L82        PathProgramCache]: Analyzing trace with hash -1576766722, now seen corresponding path program 1 times
[2020-11-25 12:19:20,655 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:20,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:19:20,743 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:19:20,743 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:19:20,743 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 12:19:20,744 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 12:19:20,744 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 12:19:20,744 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=230, Unknown=0, NotChecked=0, Total=272
[2020-11-25 12:19:20,744 INFO  L87              Difference]: Start difference. First operand 2002 states and 2149 transitions. cyclomatic complexity: 150 Second operand 17 states.
[2020-11-25 12:19:22,454 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:19:22,454 INFO  L93              Difference]: Finished difference Result 2006 states and 2149 transitions.
[2020-11-25 12:19:22,454 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 12:19:22,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2006 states and 2149 transitions.
[2020-11-25 12:19:22,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:22,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2006 states to 2001 states and 2144 transitions.
[2020-11-25 12:19:22,460 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 610
[2020-11-25 12:19:22,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 610
[2020-11-25 12:19:22,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2001 states and 2144 transitions.
[2020-11-25 12:19:22,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:19:22,462 INFO  L728         BuchiCegarLoop]: Abstraction has 2001 states and 2144 transitions.
[2020-11-25 12:19:22,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2001 states and 2144 transitions.
[2020-11-25 12:19:22,470 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2001 to 1969.
[2020-11-25 12:19:22,470 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1969 states.
[2020-11-25 12:19:22,471 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1969 states to 1969 states and 2109 transitions.
[2020-11-25 12:19:22,471 INFO  L751         BuchiCegarLoop]: Abstraction has 1969 states and 2109 transitions.
[2020-11-25 12:19:22,471 INFO  L631         BuchiCegarLoop]: Abstraction has 1969 states and 2109 transitions.
[2020-11-25 12:19:22,471 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 12:19:22,471 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1969 states and 2109 transitions.
[2020-11-25 12:19:22,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:19:22,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:19:22,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:19:22,474 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:19:22,474 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_COM0 := false;
[L2]                 call_transfer_COM0 := false;
[L2]     CALL        call main();
[L4286]              assume null == 0;
[L4287]  CALL        call this := FreshRefGenerator__success();
[L1872]              havoc newRef;
[L1873]              assume Alloc[newRef] == false;
[L1874]              Alloc[newRef] := true;
[L1875]              assume newRef != null;
[L4287]  RET         call this := FreshRefGenerator__success();
[L4288]              assume now >= 0;
[L4289]              assume DType[this] == COM;
[L4290]              assume msgvalue_MSG >= 0;
[L4291]              gas := gas - 53000;
[L4292]  CALL        call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
[L4293]              assume !revert && gas >= 0;
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND TRUE   choice == 12
[L4199]              gas := gas - 21000;
[L4200]  COND TRUE   gas >= 0
[L4201]              assume value_s454 >= 0 && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]              assume msgvalue_MSG == 0;
[L4203]  CALL        call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L4296]  RET         call CorralChoice_COM(this);

Loop:
[L4296]  CALL        call CorralChoice_COM(this);
[L4131]              havoc msgsender_MSG;
[L4132]              havoc msgvalue_MSG;
[L4133]              havoc choice;
[L4134]              havoc __ret_0_totalSupply;
[L4135]              havoc owner_s327;
[L4136]              havoc __ret_0_balanceOf;
[L4137]              havoc owner_s343;
[L4138]              havoc spender_s343;
[L4139]              havoc __ret_0_allowance;
[L4140]              havoc to_s454;
[L4141]              havoc value_s454;
[L4142]              havoc __ret_0_transfer;
[L4143]              havoc spender_s643;
[L4144]              havoc value_s643;
[L4145]              havoc __ret_0_approve;
[L4146]              havoc from_s702;
[L4147]              havoc to_s702;
[L4148]              havoc value_s702;
[L4149]              havoc __ret_0_transferFrom;
[L4150]              havoc name_s228;
[L4151]              havoc symbol_s228;
[L4152]              havoc decimals_s228;
[L4153]              havoc __ret_0_name;
[L4154]              havoc __ret_0_symbol;
[L4155]              havoc __ret_0_decimals;
[L4156]              havoc value_s365;
[L4157]              havoc __ret_0_findPercent;
[L4158]              havoc __ret_0_returnRate;
[L4159]              havoc spender_s956;
[L4160]              havoc addedValue_s956;
[L4161]              havoc __ret_0_increaseAllowance;
[L4162]              havoc spender_s1006;
[L4163]              havoc subtractedValue_s1006;
[L4164]              havoc __ret_0_decreaseAllowance;
[L4165]              havoc amount_s1051;
[L4166]              havoc account_s1140;
[L4167]              havoc amount_s1140;
[L4168]              havoc tmpNow;
[L4169]              havoc gas;
[L4170]              assume gas > 4000000 && gas <= 8000000;
[L4171]              tmpNow := now;
[L4172]              havoc now;
[L4173]              assume now > tmpNow;
[L4174]              assume msgsender_MSG != null;
[L4175]              assume DType[msgsender_MSG] != IERC20;
[L4176]              assume DType[msgsender_MSG] != SafeMath;
[L4177]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4178]              assume DType[msgsender_MSG] != COM;
[L4179]              Alloc[msgsender_MSG] := true;
[L4180]  COND FALSE  !(choice == 15)
[L4186]  COND FALSE  !(choice == 14)
[L4192]  COND FALSE  !(choice == 13)
[L4198]  COND FALSE  !(choice == 12)
[L4205]  COND FALSE  !(choice == 11)
[L4212]  COND FALSE  !(choice == 10)
[L4219]  COND FALSE  !(choice == 9)
[L4225]  COND FALSE  !(choice == 8)
[L4231]  COND FALSE  !(choice == 7)
[L4237]  COND FALSE  !(choice == 6)
[L4244]  COND FALSE  !(choice == 5)
[L4250]  COND FALSE  !(choice == 4)
[L4257]  COND FALSE  !(choice == 3)
[L4264]  COND FALSE  !(choice == 2)
[L4271]  COND FALSE  !(choice == 1)
[L4296]  RET         call CorralChoice_COM(this);

[2020-11-25 12:19:22,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:22,477 INFO  L82        PathProgramCache]: Analyzing trace with hash 2010672046, now seen corresponding path program 3 times
[2020-11-25 12:19:22,477 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:22,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:22,507 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:22,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:22,534 INFO  L82        PathProgramCache]: Analyzing trace with hash 1300265271, now seen corresponding path program 1 times
[2020-11-25 12:19:22,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:22,537 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:22,538 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:22,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:19:22,542 INFO  L82        PathProgramCache]: Analyzing trace with hash -190039638, now seen corresponding path program 1 times
[2020-11-25 12:19:22,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:19:22,558 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:22,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 101 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3137 to 6271
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 12:19:23,150 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 176
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 12:19:23,466 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 305
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 12:19:23,943 WARN  L188               SmtUtils]: Spent 332.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 166
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 12:19:24,499 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 131
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #6: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 12:19:24,656 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 90 DAG size of output: 86
[2020-11-25 12:19:25,034 WARN  L188               SmtUtils]: Spent 376.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 243
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 12:19:25,222 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification that was a NOOP. DAG size: 229
[2020-11-25 12:19:25,712 WARN  L188               SmtUtils]: Spent 487.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 263
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 12:19:25,817 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification that was a NOOP. DAG size: 177
[2020-11-25 12:19:26,083 WARN  L188               SmtUtils]: Spent 264.00 ms on a formula simplification that was a NOOP. DAG size: 329
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 12:19:26,268 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification that was a NOOP. DAG size: 261
[2020-11-25 12:19:27,899 WARN  L188               SmtUtils]: Spent 1.63 s on a formula simplification. DAG size of input: 513 DAG size of output: 509
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 12:19:28,165 WARN  L188               SmtUtils]: Spent 252.00 ms on a formula simplification that was a NOOP. DAG size: 253
[2020-11-25 12:19:28,567 WARN  L188               SmtUtils]: Spent 384.00 ms on a formula simplification that was a NOOP. DAG size: 350
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 12:19:28,765 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification that was a NOOP. DAG size: 253
[2020-11-25 12:19:29,473 WARN  L188               SmtUtils]: Spent 706.00 ms on a formula simplification. DAG size of input: 352 DAG size of output: 351
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 12:19:29,828 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification that was a NOOP. DAG size: 347
[2020-11-25 12:19:29,849 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 12:19:29,857 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:19:29 BasicIcfg
[2020-11-25 12:19:29,857 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:19:29,857 INFO  L168              Benchmark]: Toolchain (without parser) took 24695.56 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 940.6 MB in the beginning and 957.1 MB in the end (delta: -16.5 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,857 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,858 INFO  L168              Benchmark]: Boogie Preprocessor took 95.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,858 INFO  L168              Benchmark]: UtopiaSpecLang took 66.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,859 INFO  L168              Benchmark]: Boogie Printer took 22.94 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,859 INFO  L168              Benchmark]: RCFGBuilder took 706.82 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 817.1 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,859 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.26 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,859 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1260.88 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 242.2 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -267.4 MB). Peak memory consumption was 200.2 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,860 INFO  L168              Benchmark]: BlockEncodingV2 took 126.72 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 64.7 MB). Peak memory consumption was 64.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,860 INFO  L168              Benchmark]: BuchiAutomizer took 22374.50 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 1.0 GB in the beginning and 957.1 MB in the end (delta: 53.8 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 12:19:29,863 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3970 locations, 6932 edges
  - StatisticsResult: Encoded RCFG
    3928 locations, 6823 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.10 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 95.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 66.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.94 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 706.82 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 817.1 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.26 ms. Allocated memory is still 1.0 GB. Free memory was 817.1 MB in the beginning and 808.1 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1260.88 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 242.2 MB). Free memory was 808.1 MB in the beginning and 1.1 GB in the end (delta: -267.4 MB). Peak memory consumption was 200.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 126.72 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 64.7 MB). Peak memory consumption was 64.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 22374.50 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 1.0 GB in the beginning and 957.1 MB in the end (delta: 53.8 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1654 locations, 2147 edges
  - StatisticsResult: BuchiProgram size
    3970 locations, 6932 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 16 terminating modules (16 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.16 modules have a trivial ranking function, the largest among these consists of 33 locations. The remainder module has 1969 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 22.3s and 17 iterations.  TraceHistogramMax:3. Analysis of lassos took 9.5s. Construction of modules took 9.2s. BÃ¼chi inclusion checks took 2.5s. Highest rank in rank-based complementation 0. Minimization of det autom 16. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 16 MinimizatonAttempts, 2240 StatesRemovedByMinimization, 14 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3037 states and ocurred in iteration 13.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 48362 SDtfs, 28813 SDslu, 119586 SDs, 0 SdLazy, 71976 SolverSat, 4701 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 9.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI2 SFLT0 conc0 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000007) = (new COM)({from : 1000000000000000000000001});
[L523]               havoc __exception;
[L524]               revert := false;
[L525]   COND FALSE  !(__exception)
[L553]   CALL        call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2237]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2238]  COND FALSE  !(revert)
[L2241]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2115]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1904]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]              assume msgsender_MSG != null;
[L1890]              Balance[this] := 0;
[L1904]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  COND FALSE  !(revert)
[L2115]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2119]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2090]              assume msgsender_MSG != null;
[L2091]              Balance[this] := 0;
[L2092]              _name_ERC20Detailed[this] := -1465673266;
[L2093]              _symbol_ERC20Detailed[this] := -1465673266;
[L2094]              _decimals_ERC20Detailed[this] := 0;
[L2096]              _name_ERC20Detailed[this] := name_s228;
[L2097]              _symbol_ERC20Detailed[this] := symbol_s228;
[L2098]              _decimals_ERC20Detailed[this] := decimals_s228;
[L2119]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s228, symbol_s228, decimals_s228);
[L2120]  COND FALSE  !(revert)
[L2241]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, tokenName_COM[this], tokenSymbol_COM[this], tokenDecimals_COM[this]);
[L2242]  COND FALSE  !(revert)
[L2245]  CALL        call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2193]              assume msgsender_MSG != null;
[L2194]              Balance[this] := 0;
[L2195]              _balances_COM[this] := zeroRefintArr();
[L2196]              sum__balances0[this] := 0;
[L2197]              _allowed_COM[this] := zeroRefRefintArr();
[L2198]              sum__allowed1[this] := 0;
[L2199]              tokenName_COM[this] := -963585000;
[L2200]              tokenSymbol_COM[this] := -1124477489;
[L2201]              tokenDecimals_COM[this] := 18;
[L2202]              _totalSupply_COM[this] := 1000000000000000000000000;
[L2203]              noFee_COM[this] := 10000000000000000001;
[L2204]              heightEnd20Percent_COM[this] := 10328752;
[L2205]              heightEnd10Percent_COM[this] := 12582818;
[L2206]              heightEnd05Percent_COM[this] := 14836884;
[L2209]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L2210]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L2211]              Balance[this] := Balance[this] + msgvalue_MSG;
[L2213]  CALL        call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L3009]  COND FALSE  !(!(amount_s1039 != 0))
[L3013]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L3013]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][account_s1039], amount_s1039);
[L3014]  COND FALSE  !(revert)
[L3017]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][account_s1039];
[L3018]              _balances_COM[this][account_s1039] := __var_27;
[L3019]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][account_s1039];
[L3020]              assert { :EventEmitted "Transfer_COM" } true;
[L2213]  RET         call _mint~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _totalSupply_COM[this]);
[L2214]  COND FALSE  !(revert)
[L2245]  RET         call COM_COM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2246]  COND FALSE  !(revert)
[L553]   RET         call COM_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L554]               assume !revert && gas >= 0;
[L4292]  RET         call COM_COM(this, msgsender_MSG, msgvalue_MSG);
COM(1000000000000000000000007).transfer~address~uint256.gas(3979001)({from : 1000000000000000000000001, to : 1000000000000000000000001, value : 10000000000000000002});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s454 && value_s454 <= _balances_COM[this][msgsender_MSG]) && value_s454 >= 0) && value_s454 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][to_s454] >= 0) && _balances_COM[this][to_s454] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_COM[this][msgsender_MSG] >= 0) && _balances_COM[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_COM0 := true;
[L2]                 call_transfer_COM0 := false;
[L2]                 revert := revert_hold;
[L910]               havoc __exception;
[L911]               revert := false;
[L912]   COND FALSE  !(__exception)
[L940]   CALL        call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2393]  COND FALSE  !(!(value_s454 <= _balances_COM[this][msgsender_MSG]))
[L2397]              __var_4 := null;
[L2398]  COND FALSE  !(!(to_s454 != null))
[L2402]  COND FALSE  !(value_s454 < noFee_COM[this])
[L2408]  CALL        call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2477]  COND FALSE  !(!(value_s545 <= _balances_COM[this][msgsender_MSG]))
[L2481]              __var_5 := null;
[L2482]  COND FALSE  !(!(to_s545 != null))
[L2486]  COND FALSE  !(!(value_s545 >= noFee_COM[this]))
[L2490]  CALL        call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2309]  CALL        call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND TRUE   now < heightEnd20Percent_COM[this]
[L2346]              __ret_0_ := 50;
[L2309]  RET         call currentRate_s365 := returnRate_COM__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]  COND FALSE  !(revert)
[L2313]              currentRate_s365 := currentRate_s365;
[L2314]  CALL        call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L1978]              c_s119 := nonlinearDiv(a_s119, b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1979]              __ret_0_ := c_s119;
[L2314]  RET         call onePercent_s365 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s365, currentRate_s365);
[L2315]  COND FALSE  !(revert)
[L2318]              onePercent_s365 := onePercent_s365;
[L2319]              __ret_0_ := onePercent_s365;
[L2490]  RET         call tokensToBurn_s545 := findPercent~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, value_s545);
[L2491]  COND FALSE  !(revert)
[L2494]              tokensToBurn_s545 := tokensToBurn_s545;
[L2495]  CALL        call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2495]  RET         call tokensToTransfer_s545 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s545, tokensToBurn_s545);
[L2496]  COND FALSE  !(revert)
[L2499]              tokensToTransfer_s545 := tokensToTransfer_s545;
[L2500]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2500]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][msgsender_MSG], value_s545);
[L2501]  COND FALSE  !(revert)
[L2504]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][msgsender_MSG];
[L2505]              _balances_COM[this][msgsender_MSG] := __var_6;
[L2506]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][msgsender_MSG];
[L2507]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2007]              c_s163 := (a_s163 + b_s163) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2008]              assert c_s163 >= a_s163;
[L2009]              __ret_0_ := c_s163;
[L2507]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_COM[this][to_s545], tokensToTransfer_s545);
[L2508]  COND FALSE  !(revert)
[L2511]              sum__balances0[this] := sum__balances0[this] - _balances_COM[this][to_s545];
[L2512]              _balances_COM[this][to_s545] := __var_7;
[L2513]              sum__balances0[this] := sum__balances0[this] + _balances_COM[this][to_s545];
[L2514]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L1991]              assert b_s139 <= a_s139;
[L1992]              __ret_0_ := (a_s139 - b_s139) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_COM[this], tokensToBurn_s545);
[L2515]  COND FALSE  !(revert)
[L2518]              _totalSupply_COM[this] := __var_8;
[L2519]              assert { :EventEmitted "Transfer_COM" } true;
[L2520]              assert { :EventEmitted "Transfer_COM" } true;
[L2408]  RET         call _transferBurnYes~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L2409]  COND FALSE  !(revert)
[L2413]              __ret_0_ := true;
[L940]   RET         call __ret_0_ := transfer~address~uint256_COM__success(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);
[L941]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_COM[this] == old(_totalSupply_COM[this])) && _balances_COM[this] == old(_balances_COM[this])) && _allowed_COM[this] == old(_allowed_COM[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4203]  RET         call __ret_0_transfer := transfer~address~uint256_COM(this, msgsender_MSG, msgvalue_MSG, to_s454, value_s454);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
