This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:05:16,233 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:05:16,234 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:05:16,245 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:05:16,245 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:05:16,246 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:05:16,247 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:05:16,248 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:05:16,249 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:05:16,250 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:05:16,251 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:05:16,251 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:05:16,252 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:05:16,252 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:05:16,253 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:05:16,254 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:05:16,254 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:05:16,255 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:05:16,257 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:05:16,258 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:05:16,259 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:05:16,259 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:05:16,261 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:05:16,261 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:05:16,261 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:05:16,262 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:05:16,262 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:05:16,262 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:05:16,263 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:05:16,263 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:05:16,263 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:05:16,264 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:05:16,264 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:05:16,265 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:05:16,265 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:05:16,266 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:05:16,266 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:05:16,266 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:05:16,266 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:05:16,267 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:05:16,267 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:05:16,268 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:05:16,275 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:05:16,275 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:05:16,276 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:05:16,276 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:05:16,276 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:05:16,276 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:05:16,276 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:05:16,276 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:05:16,277 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:05:16,277 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:05:16,277 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:05:16,278 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:05:16,278 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:05:16,279 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:05:16,300 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:05:16,311 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:05:16,314 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:05:16,315 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:05:16,315 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:05:16,316 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl
[2020-11-25 01:05:16,316 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl'
[2020-11-25 01:05:16,454 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:05:16,455 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:05:16,456 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:05:16,456 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:05:16,456 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:05:16,473 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,475 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,525 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,526 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,564 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,587 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,604 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,627 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:05:16,627 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:05:16,628 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:05:16,630 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:05:16,634 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/1) ...
[2020-11-25 01:05:16,664 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:05:16,670 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:05:16,678 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:05:16,691 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s1322 || p2!=msg.sender ) && from_s1322==to_s1322 ) && value_s1322<=_balances_HxERC20[this][from_s1322] ) && value_s1322<=_allowed_HxERC20[this][from_s1322][msg.sender] ) && value_s1322>=0 ) && value_s1322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1322]>=0 ) && _balances_HxERC20[this][to_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][from_s1322]>=0 ) && _balances_HxERC20[this][from_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_HxERC20[this][from_s1322][msg.sender]>=0 ) && _allowed_HxERC20[this][from_s1322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:05:16,695 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_HxERC20[this][from_s1322][msg.sender]==( ( old(_allowed_HxERC20[this][from_s1322][msg.sender]) ) - value_s1322 ) ) && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _balances_HxERC20[this]==( old(_balances_HxERC20[this]) ) ) && _allowed_HxERC20[this][p1][p2]==( old(_allowed_HxERC20[this][p1][p2]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_BLY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]]
[2020-11-25 01:05:16,703 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:05:16,703 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_BLY0) ==> ( <>AP(success_transferFrom_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:05:16,726 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:05:16 PropertyContainer
[2020-11-25 01:05:16,726 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:05:16,726 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:05:16,726 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:05:16,727 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:05:16,727 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/2) ...
[2020-11-25 01:05:16,728 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:05:16,728 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:05:16,755 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:05:16" (2/2) ...
[2020-11-25 01:05:16,756 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:05:16,756 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:05:16,756 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:05:16,756 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:05:16,757 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/2) ...
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:05:16,816 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:05:16,816 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 01:05:16,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 01:05:16,817 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 01:05:16,818 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 01:05:16,818 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 01:05:16,818 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:05:16,818 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 01:05:16,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 01:05:16,818 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 01:05:16,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 01:05:16,819 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:05:16,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:05:16,819 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 01:05:16,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 01:05:16,819 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 01:05:16,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 01:05:16,819 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 01:05:16,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 01:05:16,819 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:05:16,820 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 01:05:16,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 01:05:16,820 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 01:05:16,820 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 01:05:16,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 01:05:16,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 01:05:16,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 01:05:16,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 01:05:16,821 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 01:05:16,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:05:16,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:05:16,822 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:05:16,823 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 01:05:16,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 01:05:16,823 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 01:05:16,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 01:05:16,823 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 01:05:16,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 01:05:16,823 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 01:05:16,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 01:05:16,823 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:05:16,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:05:16,824 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:05:16,825 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:05:16,826 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 01:05:16,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 01:05:16,827 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 01:05:16,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 01:05:16,827 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 01:05:16,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 01:05:16,827 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:05:16,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:05:16,827 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 01:05:16,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 01:05:16,827 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 01:05:16,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 01:05:16,828 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 01:05:16,828 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 01:05:16,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 01:05:16,828 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 01:05:16,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 01:05:16,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 01:05:16,829 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 01:05:16,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 01:05:16,830 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 01:05:16,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:05:16,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,833 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:05:16,834 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 01:05:16,835 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:05:16,836 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:05:16,837 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:05:16,838 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,840 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,840 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:05:16,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:05:16,841 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:05:16,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:05:16,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:05:16,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:05:16,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:05:16,842 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:05:16,842 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:05:16,842 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:05:16,842 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:05:16,842 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:05:16,843 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:05:16,843 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:05:16,843 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:05:16,843 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:05:16,843 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:05:16,844 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:05:16,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:05:16,845 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:05:16,845 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 01:05:16,845 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:05:16,845 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:05:16,846 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:05:16,846 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,846 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,846 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,846 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,847 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:05:16,847 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:05:16,847 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 01:05:16,847 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:05:16,848 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,848 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:05:16,848 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:05:16,848 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:05:16,848 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 01:05:16,849 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 01:05:16,849 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 01:05:16,849 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:05:16,849 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:05:16,850 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 01:05:16,850 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:05:16,850 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:05:16,850 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:05:16,850 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 01:05:16,851 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:05:16,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:05:16,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:05:16,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:05:16,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:05:16,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:05:16,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:05:16,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:05:16,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:05:16,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 01:05:16,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 01:05:16,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:05:16,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 01:05:16,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 01:05:16,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:05:16,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:05:16,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:05:16,863 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,864 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:05:16,865 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:05:16,866 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 01:05:16,867 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 01:05:16,868 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:05:16,869 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:05:16,869 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:05:17,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:05:17,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:05:17,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:05:17,880 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:05:18,097 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:05:18,097 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 01:05:18,099 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:05:18 BoogieIcfgContainer
[2020-11-25 01:05:18,100 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:05:16" (2/2) ...
[2020-11-25 01:05:18,100 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:05:18,100 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@55aa9d8c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:05:18, skipping insertion in model container
[2020-11-25 01:05:18,100 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:05:18,100 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:05:18,100 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:05:18,101 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:05:18,101 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/3) ...
[2020-11-25 01:05:18,101 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@747aa6b8 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:05:18, skipping insertion in model container
[2020-11-25 01:05:18,102 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:05:16" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:05:18,131 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:05:18 NWAContainer
[2020-11-25 01:05:18,132 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:05:18,132 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:05:18,132 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:05:18,132 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:05:18,133 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:05:18" (3/4) ...
[2020-11-25 01:05:18,133 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@22a5f050 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:05:18, skipping insertion in model container
[2020-11-25 01:05:18,133 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:05:18" (4/4) ...
[2020-11-25 01:05:18,135 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:05:18,141 INFO  L110   BuchiProductObserver]: Initial RCFG 4607 locations, 6370 edges
[2020-11-25 01:05:18,141 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:05:18,153 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:05:21,329 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:05:21,343 INFO  L110   BuchiProductObserver]: BuchiProgram size 11438 locations, 20724 edges
[2020-11-25 01:05:21,343 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:05:21 BoogieIcfgContainer
[2020-11-25 01:05:21,343 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:05:21,343 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:05:21,343 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:05:21,345 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:05:21,345 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:05:21" (1/1) ...
[2020-11-25 01:05:21,524 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:05:21,527 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:05:21,545 INFO  L313           BlockEncoder]: Initial Icfg 11438 locations, 20724 edges
[2020-11-25 01:05:21,545 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:05:21,546 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:05:21,546 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:05:21,547 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:05:21,567 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 01:05:21,583 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 01:05:21,607 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:05:21,615 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:05:21,621 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:05:21,622 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:05:21,627 INFO  L313           BlockEncoder]: Encoded RCFG 11296 locations, 20333 edges
[2020-11-25 01:05:21,628 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:05:21 BasicIcfg
[2020-11-25 01:05:21,628 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:05:21,628 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:05:21,628 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:05:21,630 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:05:21,630 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:05:16" (1/6) ...
[2020-11-25 01:05:21,631 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39a9602 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:05:21, skipping insertion in model container
[2020-11-25 01:05:21,631 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,631 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:05:16" (2/6) ...
[2020-11-25 01:05:21,631 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39a9602 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:05:21, skipping insertion in model container
[2020-11-25 01:05:21,631 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,631 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:05:18" (3/6) ...
[2020-11-25 01:05:21,632 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39a9602 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:05:21, skipping insertion in model container
[2020-11-25 01:05:21,632 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,632 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:05:18" (4/6) ...
[2020-11-25 01:05:21,632 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39a9602 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:05:21, skipping insertion in model container
[2020-11-25 01:05:21,632 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,632 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:05:21" (5/6) ...
[2020-11-25 01:05:21,633 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39a9602 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:05:21, skipping insertion in model container
[2020-11-25 01:05:21,633 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:05:21,633 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:05:21" (6/6) ...
[2020-11-25 01:05:21,633 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-self.bpl_BEv2
[2020-11-25 01:05:21,661 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:05:21,662 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:05:21,663 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:05:21,663 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:05:21,663 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:05:21,663 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:05:21,663 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:05:21,664 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:05:21,664 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:05:21,750 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11296 states.
[2020-11-25 01:05:21,840 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:21,840 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:21,840 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:21,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:21,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:21,848 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:05:21,848 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11296 states.
[2020-11-25 01:05:21,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:21,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:21,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:21,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:21,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:21,907 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:21,907 INFO  L82        PathProgramCache]: Analyzing trace with hash -1298746238, now seen corresponding path program 1 times
[2020-11-25 01:05:21,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:21,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:22,022 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:05:22,024 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:22,024 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:05:22,428 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:22,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:05:22,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:05:22,442 INFO  L87              Difference]: Start difference. First operand 11296 states. Second operand 4 states.
[2020-11-25 01:05:23,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:23,605 INFO  L93              Difference]: Finished difference Result 7167 states and 8391 transitions.
[2020-11-25 01:05:23,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:05:23,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7167 states and 8391 transitions.
[2020-11-25 01:05:23,639 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:23,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7167 states to 7167 states and 8391 transitions.
[2020-11-25 01:05:23,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:05:23,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1329
[2020-11-25 01:05:23,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7167 states and 8391 transitions.
[2020-11-25 01:05:23,700 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:23,700 INFO  L728         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 01:05:23,721 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7167 states and 8391 transitions.
[2020-11-25 01:05:23,808 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7167 to 7167.
[2020-11-25 01:05:23,809 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7167 states.
[2020-11-25 01:05:23,821 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7167 states to 7167 states and 8391 transitions.
[2020-11-25 01:05:23,822 INFO  L751         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 01:05:23,822 INFO  L631         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 01:05:23,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:05:23,822 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7167 states and 8391 transitions.
[2020-11-25 01:05:23,833 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:23,833 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:23,833 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:23,835 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:23,835 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:23,839 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:23,839 INFO  L82        PathProgramCache]: Analyzing trace with hash 194434224, now seen corresponding path program 1 times
[2020-11-25 01:05:23,841 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:23,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:23,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:05:23,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:23,877 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:05:23,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:23,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:05:23,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:05:23,878 INFO  L87              Difference]: Start difference. First operand 7167 states and 8391 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 01:05:24,078 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:24,078 INFO  L93              Difference]: Finished difference Result 9121 states and 10654 transitions.
[2020-11-25 01:05:24,078 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:05:24,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9121 states and 10654 transitions.
[2020-11-25 01:05:24,105 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:05:24,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9121 states to 9121 states and 10654 transitions.
[2020-11-25 01:05:24,149 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1850
[2020-11-25 01:05:24,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1850
[2020-11-25 01:05:24,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9121 states and 10654 transitions.
[2020-11-25 01:05:24,161 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:24,161 INFO  L728         BuchiCegarLoop]: Abstraction has 9121 states and 10654 transitions.
[2020-11-25 01:05:24,171 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9121 states and 10654 transitions.
[2020-11-25 01:05:24,260 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9121 to 7969.
[2020-11-25 01:05:24,260 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7969 states.
[2020-11-25 01:05:24,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7969 states to 7969 states and 9260 transitions.
[2020-11-25 01:05:24,270 INFO  L751         BuchiCegarLoop]: Abstraction has 7969 states and 9260 transitions.
[2020-11-25 01:05:24,270 INFO  L631         BuchiCegarLoop]: Abstraction has 7969 states and 9260 transitions.
[2020-11-25 01:05:24,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:05:24,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7969 states and 9260 transitions.
[2020-11-25 01:05:24,281 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:24,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:24,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:24,283 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:24,283 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND TRUE   !(account_s164 != null)
[L5740]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:24,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:24,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 1401581777, now seen corresponding path program 1 times
[2020-11-25 01:05:24,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:24,300 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:24,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:05:24,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:24,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 01:05:24,368 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:24,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:05:24,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:05:24,369 INFO  L87              Difference]: Start difference. First operand 7969 states and 9260 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 01:05:24,539 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:24,539 INFO  L93              Difference]: Finished difference Result 8015 states and 9335 transitions.
[2020-11-25 01:05:24,539 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:05:24,540 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8015 states and 9335 transitions.
[2020-11-25 01:05:24,563 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:24,590 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8015 states to 8015 states and 9335 transitions.
[2020-11-25 01:05:24,591 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1546
[2020-11-25 01:05:24,591 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1546
[2020-11-25 01:05:24,592 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8015 states and 9335 transitions.
[2020-11-25 01:05:24,599 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:24,599 INFO  L728         BuchiCegarLoop]: Abstraction has 8015 states and 9335 transitions.
[2020-11-25 01:05:24,606 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8015 states and 9335 transitions.
[2020-11-25 01:05:24,682 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8015 to 8006.
[2020-11-25 01:05:24,682 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8006 states.
[2020-11-25 01:05:24,693 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8006 states to 8006 states and 9319 transitions.
[2020-11-25 01:05:24,693 INFO  L751         BuchiCegarLoop]: Abstraction has 8006 states and 9319 transitions.
[2020-11-25 01:05:24,694 INFO  L631         BuchiCegarLoop]: Abstraction has 8006 states and 9319 transitions.
[2020-11-25 01:05:24,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:05:24,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8006 states and 9319 transitions.
[2020-11-25 01:05:24,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:24,706 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:24,706 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:24,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:24,709 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND TRUE   !(account_s218 != null)
[L5811]               revert := true;
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND TRUE   revert
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:24,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:24,713 INFO  L82        PathProgramCache]: Analyzing trace with hash -1995231732, now seen corresponding path program 1 times
[2020-11-25 01:05:24,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:24,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:24,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:05:24,837 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:24,837 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 01:05:24,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:24,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 01:05:24,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 01:05:24,837 INFO  L87              Difference]: Start difference. First operand 8006 states and 9319 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 01:05:24,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:24,949 INFO  L93              Difference]: Finished difference Result 8066 states and 9410 transitions.
[2020-11-25 01:05:24,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:05:24,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8066 states and 9410 transitions.
[2020-11-25 01:05:24,964 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:24,981 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8066 states to 8066 states and 9410 transitions.
[2020-11-25 01:05:24,981 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1553
[2020-11-25 01:05:24,982 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1553
[2020-11-25 01:05:24,982 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8066 states and 9410 transitions.
[2020-11-25 01:05:24,988 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:24,988 INFO  L728         BuchiCegarLoop]: Abstraction has 8066 states and 9410 transitions.
[2020-11-25 01:05:24,994 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8066 states and 9410 transitions.
[2020-11-25 01:05:25,036 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8066 to 8013.
[2020-11-25 01:05:25,036 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8013 states.
[2020-11-25 01:05:25,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8013 states to 8013 states and 9327 transitions.
[2020-11-25 01:05:25,044 INFO  L751         BuchiCegarLoop]: Abstraction has 8013 states and 9327 transitions.
[2020-11-25 01:05:25,044 INFO  L631         BuchiCegarLoop]: Abstraction has 8013 states and 9327 transitions.
[2020-11-25 01:05:25,044 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:05:25,044 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8013 states and 9327 transitions.
[2020-11-25 01:05:25,051 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:25,051 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:25,051 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:25,053 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:25,053 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND TRUE   !!__var_2
[L5748]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:25,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:25,057 INFO  L82        PathProgramCache]: Analyzing trace with hash 1419225302, now seen corresponding path program 1 times
[2020-11-25 01:05:25,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:25,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:25,104 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 01:05:25,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:25,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:05:25,104 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:25,104 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:05:25,105 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:05:25,105 INFO  L87              Difference]: Start difference. First operand 8013 states and 9327 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 01:05:25,221 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:25,221 INFO  L93              Difference]: Finished difference Result 9141 states and 10342 transitions.
[2020-11-25 01:05:25,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:05:25,221 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9141 states and 10342 transitions.
[2020-11-25 01:05:25,239 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:05:25,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9141 states to 8463 states and 9538 transitions.
[2020-11-25 01:05:25,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1652
[2020-11-25 01:05:25,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1734
[2020-11-25 01:05:25,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8463 states and 9538 transitions.
[2020-11-25 01:05:25,266 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:25,266 INFO  L728         BuchiCegarLoop]: Abstraction has 8463 states and 9538 transitions.
[2020-11-25 01:05:25,272 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8463 states and 9538 transitions.
[2020-11-25 01:05:25,310 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8463 to 7479.
[2020-11-25 01:05:25,310 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7479 states.
[2020-11-25 01:05:25,317 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7479 states to 7479 states and 8312 transitions.
[2020-11-25 01:05:25,317 INFO  L751         BuchiCegarLoop]: Abstraction has 7479 states and 8312 transitions.
[2020-11-25 01:05:25,317 INFO  L631         BuchiCegarLoop]: Abstraction has 7479 states and 8312 transitions.
[2020-11-25 01:05:25,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:05:25,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7479 states and 8312 transitions.
[2020-11-25 01:05:25,325 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:05:25,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:25,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:25,327 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:25,328 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:25,334 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:25,334 INFO  L82        PathProgramCache]: Analyzing trace with hash -1692622128, now seen corresponding path program 1 times
[2020-11-25 01:05:25,335 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:25,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:25,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:05:25,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:25,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 01:05:25,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:25,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:05:25,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:05:25,700 INFO  L87              Difference]: Start difference. First operand 7479 states and 8312 transitions. cyclomatic complexity: 843 Second operand 12 states.
[2020-11-25 01:05:31,562 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:31,563 INFO  L93              Difference]: Finished difference Result 12343 states and 13727 transitions.
[2020-11-25 01:05:31,563 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 01:05:31,563 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12343 states and 13727 transitions.
[2020-11-25 01:05:31,586 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 01:05:31,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12343 states to 12340 states and 13724 transitions.
[2020-11-25 01:05:31,612 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2473
[2020-11-25 01:05:31,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2473
[2020-11-25 01:05:31,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12340 states and 13724 transitions.
[2020-11-25 01:05:31,620 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:31,620 INFO  L728         BuchiCegarLoop]: Abstraction has 12340 states and 13724 transitions.
[2020-11-25 01:05:31,627 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12340 states and 13724 transitions.
[2020-11-25 01:05:31,705 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12340 to 10268.
[2020-11-25 01:05:31,705 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10268 states.
[2020-11-25 01:05:31,718 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10268 states to 10268 states and 11631 transitions.
[2020-11-25 01:05:31,718 INFO  L751         BuchiCegarLoop]: Abstraction has 10268 states and 11631 transitions.
[2020-11-25 01:05:31,718 INFO  L631         BuchiCegarLoop]: Abstraction has 10268 states and 11631 transitions.
[2020-11-25 01:05:31,718 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:05:31,718 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10268 states and 11631 transitions.
[2020-11-25 01:05:31,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:31,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:31,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:31,733 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:31,734 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:31,739 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:31,740 INFO  L82        PathProgramCache]: Analyzing trace with hash -1606338066, now seen corresponding path program 1 times
[2020-11-25 01:05:31,740 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:31,753 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:32,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 01:05:32,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:32,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:05:32,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:32,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:05:32,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:05:32,029 INFO  L87              Difference]: Start difference. First operand 10268 states and 11631 transitions. cyclomatic complexity: 1379 Second operand 7 states.
[2020-11-25 01:05:32,155 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:32,155 INFO  L93              Difference]: Finished difference Result 10291 states and 11658 transitions.
[2020-11-25 01:05:32,156 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:05:32,156 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10291 states and 11658 transitions.
[2020-11-25 01:05:32,174 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:32,202 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10291 states to 10274 states and 11638 transitions.
[2020-11-25 01:05:32,202 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 01:05:32,203 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 01:05:32,203 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10274 states and 11638 transitions.
[2020-11-25 01:05:32,208 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:32,208 INFO  L728         BuchiCegarLoop]: Abstraction has 10274 states and 11638 transitions.
[2020-11-25 01:05:32,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10274 states and 11638 transitions.
[2020-11-25 01:05:32,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10274 to 10274.
[2020-11-25 01:05:32,273 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10274 states.
[2020-11-25 01:05:32,285 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10274 states to 10274 states and 11638 transitions.
[2020-11-25 01:05:32,285 INFO  L751         BuchiCegarLoop]: Abstraction has 10274 states and 11638 transitions.
[2020-11-25 01:05:32,285 INFO  L631         BuchiCegarLoop]: Abstraction has 10274 states and 11638 transitions.
[2020-11-25 01:05:32,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:05:32,285 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10274 states and 11638 transitions.
[2020-11-25 01:05:32,297 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:32,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:32,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:32,299 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:32,299 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:32,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:32,305 INFO  L82        PathProgramCache]: Analyzing trace with hash 130956524, now seen corresponding path program 1 times
[2020-11-25 01:05:32,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:32,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:32,483 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 01:05:32,483 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:32,483 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:05:32,484 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:32,484 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:05:32,484 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:05:32,485 INFO  L87              Difference]: Start difference. First operand 10274 states and 11638 transitions. cyclomatic complexity: 1380 Second operand 7 states.
[2020-11-25 01:05:32,609 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:32,609 INFO  L93              Difference]: Finished difference Result 10297 states and 11665 transitions.
[2020-11-25 01:05:32,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:05:32,610 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10297 states and 11665 transitions.
[2020-11-25 01:05:32,628 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:32,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10297 states to 10280 states and 11645 transitions.
[2020-11-25 01:05:32,648 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 01:05:32,649 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 01:05:32,649 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10280 states and 11645 transitions.
[2020-11-25 01:05:32,655 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:32,655 INFO  L728         BuchiCegarLoop]: Abstraction has 10280 states and 11645 transitions.
[2020-11-25 01:05:32,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10280 states and 11645 transitions.
[2020-11-25 01:05:32,711 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10280 to 10274.
[2020-11-25 01:05:32,711 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10274 states.
[2020-11-25 01:05:32,723 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10274 states to 10274 states and 11638 transitions.
[2020-11-25 01:05:32,723 INFO  L751         BuchiCegarLoop]: Abstraction has 10274 states and 11638 transitions.
[2020-11-25 01:05:32,723 INFO  L631         BuchiCegarLoop]: Abstraction has 10274 states and 11638 transitions.
[2020-11-25 01:05:32,723 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:05:32,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10274 states and 11638 transitions.
[2020-11-25 01:05:32,733 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:32,733 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:32,733 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:32,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:32,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:32,740 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:32,741 INFO  L82        PathProgramCache]: Analyzing trace with hash -1920568126, now seen corresponding path program 1 times
[2020-11-25 01:05:32,741 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:32,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:32,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:05:32,943 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:32,943 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:05:32,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:32,944 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:05:32,944 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:05:32,944 INFO  L87              Difference]: Start difference. First operand 10274 states and 11638 transitions. cyclomatic complexity: 1380 Second operand 8 states.
[2020-11-25 01:05:33,070 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:33,070 INFO  L93              Difference]: Finished difference Result 10301 states and 11669 transitions.
[2020-11-25 01:05:33,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:05:33,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10301 states and 11669 transitions.
[2020-11-25 01:05:33,087 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:33,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10301 states to 10287 states and 11653 transitions.
[2020-11-25 01:05:33,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2077
[2020-11-25 01:05:33,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2077
[2020-11-25 01:05:33,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10287 states and 11653 transitions.
[2020-11-25 01:05:33,114 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:33,114 INFO  L728         BuchiCegarLoop]: Abstraction has 10287 states and 11653 transitions.
[2020-11-25 01:05:33,119 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10287 states and 11653 transitions.
[2020-11-25 01:05:33,167 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10287 to 10287.
[2020-11-25 01:05:33,167 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10287 states.
[2020-11-25 01:05:33,179 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10287 states to 10287 states and 11653 transitions.
[2020-11-25 01:05:33,180 INFO  L751         BuchiCegarLoop]: Abstraction has 10287 states and 11653 transitions.
[2020-11-25 01:05:33,180 INFO  L631         BuchiCegarLoop]: Abstraction has 10287 states and 11653 transitions.
[2020-11-25 01:05:33,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:05:33,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10287 states and 11653 transitions.
[2020-11-25 01:05:33,190 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 01:05:33,190 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:33,190 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:33,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:33,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:33,197 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:33,198 INFO  L82        PathProgramCache]: Analyzing trace with hash 1457660438, now seen corresponding path program 1 times
[2020-11-25 01:05:33,198 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:33,219 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:33,377 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 01:05:33,377 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:33,378 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:05:33,378 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:33,378 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:05:33,378 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:05:33,378 INFO  L87              Difference]: Start difference. First operand 10287 states and 11653 transitions. cyclomatic complexity: 1382 Second operand 4 states.
[2020-11-25 01:05:33,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:33,765 INFO  L93              Difference]: Finished difference Result 13689 states and 16067 transitions.
[2020-11-25 01:05:33,765 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:05:33,765 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13689 states and 16067 transitions.
[2020-11-25 01:05:33,799 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 32
[2020-11-25 01:05:33,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13689 states to 12860 states and 15158 transitions.
[2020-11-25 01:05:33,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2628
[2020-11-25 01:05:33,835 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2647
[2020-11-25 01:05:33,835 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12860 states and 15158 transitions.
[2020-11-25 01:05:33,843 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:33,843 INFO  L728         BuchiCegarLoop]: Abstraction has 12860 states and 15158 transitions.
[2020-11-25 01:05:33,849 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12860 states and 15158 transitions.
[2020-11-25 01:05:33,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12860 to 11532.
[2020-11-25 01:05:33,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11532 states.
[2020-11-25 01:05:33,933 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11532 states to 11532 states and 13299 transitions.
[2020-11-25 01:05:33,933 INFO  L751         BuchiCegarLoop]: Abstraction has 11532 states and 13299 transitions.
[2020-11-25 01:05:33,933 INFO  L631         BuchiCegarLoop]: Abstraction has 11532 states and 13299 transitions.
[2020-11-25 01:05:33,933 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:05:33,933 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11532 states and 13299 transitions.
[2020-11-25 01:05:33,945 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:33,945 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:33,945 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:33,946 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:33,946 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:33,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:33,952 INFO  L82        PathProgramCache]: Analyzing trace with hash 1782039426, now seen corresponding path program 2 times
[2020-11-25 01:05:33,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:33,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:34,233 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:05:34,233 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:34,233 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:05:34,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:34,234 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:05:34,234 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:05:34,234 INFO  L87              Difference]: Start difference. First operand 11532 states and 13299 transitions. cyclomatic complexity: 1783 Second operand 9 states.
[2020-11-25 01:05:34,390 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:34,390 INFO  L93              Difference]: Finished difference Result 11573 states and 13347 transitions.
[2020-11-25 01:05:34,391 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:05:34,391 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11573 states and 13347 transitions.
[2020-11-25 01:05:34,413 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:34,437 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11573 states to 11515 states and 13278 transitions.
[2020-11-25 01:05:34,437 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2459
[2020-11-25 01:05:34,438 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2459
[2020-11-25 01:05:34,438 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11515 states and 13278 transitions.
[2020-11-25 01:05:34,445 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:34,445 INFO  L728         BuchiCegarLoop]: Abstraction has 11515 states and 13278 transitions.
[2020-11-25 01:05:34,451 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11515 states and 13278 transitions.
[2020-11-25 01:05:34,511 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11515 to 11515.
[2020-11-25 01:05:34,511 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11515 states.
[2020-11-25 01:05:34,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11515 states to 11515 states and 13278 transitions.
[2020-11-25 01:05:34,528 INFO  L751         BuchiCegarLoop]: Abstraction has 11515 states and 13278 transitions.
[2020-11-25 01:05:34,528 INFO  L631         BuchiCegarLoop]: Abstraction has 11515 states and 13278 transitions.
[2020-11-25 01:05:34,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:05:34,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11515 states and 13278 transitions.
[2020-11-25 01:05:34,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:34,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:34,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:34,544 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:34,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:34,549 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:34,549 INFO  L82        PathProgramCache]: Analyzing trace with hash -714719445, now seen corresponding path program 1 times
[2020-11-25 01:05:34,549 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:34,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:34,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 01:05:34,729 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:34,729 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:05:34,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:34,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:05:34,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:05:34,730 INFO  L87              Difference]: Start difference. First operand 11515 states and 13278 transitions. cyclomatic complexity: 1779 Second operand 8 states.
[2020-11-25 01:05:34,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:34,858 INFO  L93              Difference]: Finished difference Result 11536 states and 13302 transitions.
[2020-11-25 01:05:34,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:05:34,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11536 states and 13302 transitions.
[2020-11-25 01:05:34,878 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:34,899 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11536 states to 11522 states and 13286 transitions.
[2020-11-25 01:05:34,899 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2459
[2020-11-25 01:05:34,900 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2459
[2020-11-25 01:05:34,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11522 states and 13286 transitions.
[2020-11-25 01:05:34,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:34,907 INFO  L728         BuchiCegarLoop]: Abstraction has 11522 states and 13286 transitions.
[2020-11-25 01:05:34,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11522 states and 13286 transitions.
[2020-11-25 01:05:34,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11522 to 11522.
[2020-11-25 01:05:34,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11522 states.
[2020-11-25 01:05:34,978 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11522 states to 11522 states and 13286 transitions.
[2020-11-25 01:05:34,978 INFO  L751         BuchiCegarLoop]: Abstraction has 11522 states and 13286 transitions.
[2020-11-25 01:05:34,978 INFO  L631         BuchiCegarLoop]: Abstraction has 11522 states and 13286 transitions.
[2020-11-25 01:05:34,978 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:05:34,978 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11522 states and 13286 transitions.
[2020-11-25 01:05:34,989 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:34,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:34,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:34,990 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:34,990 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:34,995 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:34,996 INFO  L82        PathProgramCache]: Analyzing trace with hash 1885092678, now seen corresponding path program 2 times
[2020-11-25 01:05:34,996 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:35,010 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:35,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:05:35,191 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:05:35,191 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:05:35,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:35,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:05:35,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:05:35,191 INFO  L87              Difference]: Start difference. First operand 11522 states and 13286 transitions. cyclomatic complexity: 1780 Second operand 8 states.
[2020-11-25 01:05:35,315 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:35,315 INFO  L93              Difference]: Finished difference Result 11543 states and 13310 transitions.
[2020-11-25 01:05:35,316 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:05:35,316 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11543 states and 13310 transitions.
[2020-11-25 01:05:35,335 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:35,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11543 states to 11522 states and 13285 transitions.
[2020-11-25 01:05:35,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2459
[2020-11-25 01:05:35,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2459
[2020-11-25 01:05:35,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11522 states and 13285 transitions.
[2020-11-25 01:05:35,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:35,363 INFO  L728         BuchiCegarLoop]: Abstraction has 11522 states and 13285 transitions.
[2020-11-25 01:05:35,369 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11522 states and 13285 transitions.
[2020-11-25 01:05:35,419 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11522 to 11522.
[2020-11-25 01:05:35,419 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11522 states.
[2020-11-25 01:05:35,432 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11522 states to 11522 states and 13285 transitions.
[2020-11-25 01:05:35,432 INFO  L751         BuchiCegarLoop]: Abstraction has 11522 states and 13285 transitions.
[2020-11-25 01:05:35,432 INFO  L631         BuchiCegarLoop]: Abstraction has 11522 states and 13285 transitions.
[2020-11-25 01:05:35,432 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:05:35,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11522 states and 13285 transitions.
[2020-11-25 01:05:35,443 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:35,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:35,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:35,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:35,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:35,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:35,449 INFO  L82        PathProgramCache]: Analyzing trace with hash -530793521, now seen corresponding path program 3 times
[2020-11-25 01:05:35,450 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:35,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:35,634 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:05:35,634 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:35,634 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:05:35,635 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:35,635 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:05:35,635 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:05:35,635 INFO  L87              Difference]: Start difference. First operand 11522 states and 13285 transitions. cyclomatic complexity: 1779 Second operand 9 states.
[2020-11-25 01:05:35,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:35,776 INFO  L93              Difference]: Finished difference Result 11540 states and 13304 transitions.
[2020-11-25 01:05:35,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:05:35,776 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11540 states and 13304 transitions.
[2020-11-25 01:05:35,796 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:35,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11540 states to 11498 states and 13256 transitions.
[2020-11-25 01:05:35,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2459
[2020-11-25 01:05:35,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2459
[2020-11-25 01:05:35,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11498 states and 13256 transitions.
[2020-11-25 01:05:35,824 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:35,824 INFO  L728         BuchiCegarLoop]: Abstraction has 11498 states and 13256 transitions.
[2020-11-25 01:05:35,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11498 states and 13256 transitions.
[2020-11-25 01:05:35,880 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11498 to 11498.
[2020-11-25 01:05:35,880 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11498 states.
[2020-11-25 01:05:35,893 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11498 states to 11498 states and 13256 transitions.
[2020-11-25 01:05:35,893 INFO  L751         BuchiCegarLoop]: Abstraction has 11498 states and 13256 transitions.
[2020-11-25 01:05:35,893 INFO  L631         BuchiCegarLoop]: Abstraction has 11498 states and 13256 transitions.
[2020-11-25 01:05:35,893 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:05:35,893 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11498 states and 13256 transitions.
[2020-11-25 01:05:35,903 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:05:35,904 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:35,904 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:35,905 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:35,905 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:35,910 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:35,910 INFO  L82        PathProgramCache]: Analyzing trace with hash 957813550, now seen corresponding path program 1 times
[2020-11-25 01:05:35,911 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:35,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:36,162 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 01:05:36,162 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:36,162 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:05:36,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:36,163 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:05:36,163 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:05:36,163 INFO  L87              Difference]: Start difference. First operand 11498 states and 13256 transitions. cyclomatic complexity: 1774 Second operand 15 states.
[2020-11-25 01:05:43,997 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:43,997 INFO  L93              Difference]: Finished difference Result 19134 states and 22797 transitions.
[2020-11-25 01:05:43,997 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 01:05:43,997 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19134 states and 22797 transitions.
[2020-11-25 01:05:44,044 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 64
[2020-11-25 01:05:44,094 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19134 states to 19134 states and 22797 transitions.
[2020-11-25 01:05:44,094 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3918
[2020-11-25 01:05:44,095 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3918
[2020-11-25 01:05:44,096 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19134 states and 22797 transitions.
[2020-11-25 01:05:44,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:44,109 INFO  L728         BuchiCegarLoop]: Abstraction has 19134 states and 22797 transitions.
[2020-11-25 01:05:44,116 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19134 states and 22797 transitions.
[2020-11-25 01:05:44,217 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19134 to 17545.
[2020-11-25 01:05:44,217 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17545 states.
[2020-11-25 01:05:44,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17545 states to 17545 states and 21083 transitions.
[2020-11-25 01:05:44,244 INFO  L751         BuchiCegarLoop]: Abstraction has 17545 states and 21083 transitions.
[2020-11-25 01:05:44,244 INFO  L631         BuchiCegarLoop]: Abstraction has 17545 states and 21083 transitions.
[2020-11-25 01:05:44,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:05:44,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17545 states and 21083 transitions.
[2020-11-25 01:05:44,263 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 64
[2020-11-25 01:05:44,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:44,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:44,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:44,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:44,269 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:44,269 INFO  L82        PathProgramCache]: Analyzing trace with hash 609760272, now seen corresponding path program 1 times
[2020-11-25 01:05:44,270 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:44,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:44,617 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:05:44,617 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:44,617 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 01:05:44,618 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:44,618 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 01:05:44,618 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=268, Unknown=0, NotChecked=0, Total=306
[2020-11-25 01:05:44,618 INFO  L87              Difference]: Start difference. First operand 17545 states and 21083 transitions. cyclomatic complexity: 3568 Second operand 18 states.
[2020-11-25 01:05:52,504 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:52,504 INFO  L93              Difference]: Finished difference Result 20669 states and 26355 transitions.
[2020-11-25 01:05:52,504 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:05:52,505 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20669 states and 26355 transitions.
[2020-11-25 01:05:52,568 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 01:05:52,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20669 states to 20669 states and 26355 transitions.
[2020-11-25 01:05:52,641 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4438
[2020-11-25 01:05:52,644 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4445
[2020-11-25 01:05:52,644 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20669 states and 26355 transitions.
[2020-11-25 01:05:52,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:52,664 INFO  L728         BuchiCegarLoop]: Abstraction has 20669 states and 26355 transitions.
[2020-11-25 01:05:52,672 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20669 states and 26355 transitions.
[2020-11-25 01:05:52,815 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20669 to 19291.
[2020-11-25 01:05:52,815 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19291 states.
[2020-11-25 01:05:52,849 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19291 states to 19291 states and 23630 transitions.
[2020-11-25 01:05:52,849 INFO  L751         BuchiCegarLoop]: Abstraction has 19291 states and 23630 transitions.
[2020-11-25 01:05:52,849 INFO  L631         BuchiCegarLoop]: Abstraction has 19291 states and 23630 transitions.
[2020-11-25 01:05:52,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:05:52,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19291 states and 23630 transitions.
[2020-11-25 01:05:52,876 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:05:52,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:52,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:52,879 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:52,879 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:52,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:52,884 INFO  L82        PathProgramCache]: Analyzing trace with hash -595188983, now seen corresponding path program 1 times
[2020-11-25 01:05:52,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:52,907 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:53,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:05:53,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:53,185 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:05:53,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:53,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:05:53,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:05:53,186 INFO  L87              Difference]: Start difference. First operand 19291 states and 23630 transitions. cyclomatic complexity: 4397 Second operand 9 states.
[2020-11-25 01:05:56,081 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:56,081 INFO  L93              Difference]: Finished difference Result 19579 states and 24223 transitions.
[2020-11-25 01:05:56,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:05:56,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19579 states and 24223 transitions.
[2020-11-25 01:05:56,137 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 01:05:56,200 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19579 states to 19579 states and 24223 transitions.
[2020-11-25 01:05:56,200 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4493
[2020-11-25 01:05:56,203 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4493
[2020-11-25 01:05:56,203 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19579 states and 24223 transitions.
[2020-11-25 01:05:56,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:56,221 INFO  L728         BuchiCegarLoop]: Abstraction has 19579 states and 24223 transitions.
[2020-11-25 01:05:56,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19579 states and 24223 transitions.
[2020-11-25 01:05:56,359 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19579 to 19497.
[2020-11-25 01:05:56,359 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19497 states.
[2020-11-25 01:05:56,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19497 states to 19497 states and 23889 transitions.
[2020-11-25 01:05:56,393 INFO  L751         BuchiCegarLoop]: Abstraction has 19497 states and 23889 transitions.
[2020-11-25 01:05:56,393 INFO  L631         BuchiCegarLoop]: Abstraction has 19497 states and 23889 transitions.
[2020-11-25 01:05:56,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 01:05:56,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19497 states and 23889 transitions.
[2020-11-25 01:05:56,415 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:05:56,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:56,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:56,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:56,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:56,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:56,421 INFO  L82        PathProgramCache]: Analyzing trace with hash -2099096703, now seen corresponding path program 1 times
[2020-11-25 01:05:56,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:56,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:56,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:56,672 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:56,672 INFO  L82        PathProgramCache]: Analyzing trace with hash -886007740, now seen corresponding path program 1 times
[2020-11-25 01:05:56,673 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:56,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:56,683 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:05:56,683 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:56,683 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:05:56,683 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 01:05:56,683 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:05:56,683 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:05:56,684 INFO  L87              Difference]: Start difference. First operand 19497 states and 23889 transitions. cyclomatic complexity: 4450 Second operand 4 states.
[2020-11-25 01:05:58,060 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:58,060 INFO  L93              Difference]: Finished difference Result 19826 states and 24865 transitions.
[2020-11-25 01:05:58,061 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:05:58,061 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19826 states and 24865 transitions.
[2020-11-25 01:05:58,144 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 192
[2020-11-25 01:05:58,270 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19826 states to 19826 states and 24865 transitions.
[2020-11-25 01:05:58,270 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4343
[2020-11-25 01:05:58,272 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4343
[2020-11-25 01:05:58,273 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19826 states and 24865 transitions.
[2020-11-25 01:05:58,292 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:58,292 INFO  L728         BuchiCegarLoop]: Abstraction has 19826 states and 24865 transitions.
[2020-11-25 01:05:58,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19826 states and 24865 transitions.
[2020-11-25 01:05:58,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19826 to 8568.
[2020-11-25 01:05:58,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8568 states.
[2020-11-25 01:05:58,546 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8568 states to 8568 states and 9672 transitions.
[2020-11-25 01:05:58,547 INFO  L751         BuchiCegarLoop]: Abstraction has 8568 states and 9672 transitions.
[2020-11-25 01:05:58,547 INFO  L631         BuchiCegarLoop]: Abstraction has 8568 states and 9672 transitions.
[2020-11-25 01:05:58,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 01:05:58,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8568 states and 9672 transitions.
[2020-11-25 01:05:58,555 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 01:05:58,555 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:58,555 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:58,556 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:58,556 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7110]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7111]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7111]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7112]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7110]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7111]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7111]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7112]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:58,563 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:58,563 INFO  L82        PathProgramCache]: Analyzing trace with hash -342740738, now seen corresponding path program 1 times
[2020-11-25 01:05:58,564 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:58,583 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:05:58,751 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:05:58,751 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:05:58,751 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:05:58,752 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:05:58,752 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:05:58,752 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:05:58,752 INFO  L87              Difference]: Start difference. First operand 8568 states and 9672 transitions. cyclomatic complexity: 1134 Second operand 4 states.
[2020-11-25 01:05:58,820 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:05:58,820 INFO  L93              Difference]: Finished difference Result 8604 states and 9700 transitions.
[2020-11-25 01:05:58,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:05:58,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8604 states and 9700 transitions.
[2020-11-25 01:05:58,835 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 01:05:58,850 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8604 states to 8540 states and 9632 transitions.
[2020-11-25 01:05:58,850 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1895
[2020-11-25 01:05:58,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1895
[2020-11-25 01:05:58,851 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8540 states and 9632 transitions.
[2020-11-25 01:05:58,856 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:05:58,856 INFO  L728         BuchiCegarLoop]: Abstraction has 8540 states and 9632 transitions.
[2020-11-25 01:05:58,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8540 states and 9632 transitions.
[2020-11-25 01:05:58,897 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8540 to 8532.
[2020-11-25 01:05:58,897 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8532 states.
[2020-11-25 01:05:58,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8532 states to 8532 states and 9620 transitions.
[2020-11-25 01:05:58,906 INFO  L751         BuchiCegarLoop]: Abstraction has 8532 states and 9620 transitions.
[2020-11-25 01:05:58,906 INFO  L631         BuchiCegarLoop]: Abstraction has 8532 states and 9620 transitions.
[2020-11-25 01:05:58,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 01:05:58,906 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8532 states and 9620 transitions.
[2020-11-25 01:05:58,914 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 01:05:58,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:05:58,914 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:05:58,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:05:58,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND TRUE   gas >= 0
[L11981]              assume msgvalue_MSG == 0;
[L11982]  CALL        call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L615]                havoc __exception;
[L616]                revert := false;
[L617]    COND FALSE  !(__exception)
[L653]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5949]               __ret_0_ := owner_HxOwnable[this];
[L653]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L654]                assume !revert && gas >= 0;
[L11982]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:05:58,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:58,919 INFO  L82        PathProgramCache]: Analyzing trace with hash -2099096703, now seen corresponding path program 2 times
[2020-11-25 01:05:58,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:58,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:58,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:59,077 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:59,077 INFO  L82        PathProgramCache]: Analyzing trace with hash -1112824743, now seen corresponding path program 1 times
[2020-11-25 01:05:59,077 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:59,081 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:59,084 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:59,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:05:59,090 INFO  L82        PathProgramCache]: Analyzing trace with hash 1951504345, now seen corresponding path program 1 times
[2020-11-25 01:05:59,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:05:59,122 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:59,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 01:05:59,639 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification that was a NOOP. DAG size: 399
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 01:05:59,839 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 01:06:00,646 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:06:02,355 WARN  L188               SmtUtils]: Spent 1.33 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:06:02,541 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 01:06:02,825 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:06:03,193 WARN  L188               SmtUtils]: Spent 312.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:06:03,411 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 01:06:03,787 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:06:04,209 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 250
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:06:04,561 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification. DAG size of input: 187 DAG size of output: 181
[2020-11-25 01:06:04,987 WARN  L188               SmtUtils]: Spent 424.00 ms on a formula simplification that was a NOOP. DAG size: 412
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
[2020-11-25 01:06:06,654 WARN  L188               SmtUtils]: Spent 1.65 s on a formula simplification. DAG size of input: 342 DAG size of output: 342
[2020-11-25 01:06:09,114 WARN  L188               SmtUtils]: Spent 2.46 s on a formula simplification. DAG size of input: 440 DAG size of output: 395
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #9: 34819 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 34819 to 69623
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #9: 21107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21107 to 42209
[2020-11-25 01:06:09,781 WARN  L188               SmtUtils]: Spent 627.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 245
[2020-11-25 01:06:10,396 WARN  L188               SmtUtils]: Spent 613.00 ms on a formula simplification that was a NOOP. DAG size: 499
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #8: 24137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24137 to 48271
[2020-11-25 01:06:11,782 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification. DAG size of input: 406 DAG size of output: 406
[2020-11-25 01:06:16,056 WARN  L188               SmtUtils]: Spent 4.27 s on a formula simplification. DAG size of input: 745 DAG size of output: 728
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #8: 34819 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 34819 to 69623
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 01:06:19,184 WARN  L188               SmtUtils]: Spent 3.09 s on a formula simplification. DAG size of input: 397 DAG size of output: 393
[2020-11-25 01:06:21,419 WARN  L188               SmtUtils]: Spent 2.20 s on a formula simplification that was a NOOP. DAG size: 557
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #9: 34147 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 34147 to 68281
[2020-11-25 01:06:25,252 WARN  L188               SmtUtils]: Spent 3.75 s on a formula simplification. DAG size of input: 475 DAG size of output: 397
[2020-11-25 01:06:29,188 WARN  L188               SmtUtils]: Spent 3.93 s on a formula simplification. DAG size of input: 563 DAG size of output: 562
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12323 to 24631
Garbage collection #8: 24631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24631 to 49261
Garbage collection #9: 49261 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 49261 to 98519
Garbage collection #10: 98519 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 98519 to 148517
[2020-11-25 01:06:34,084 WARN  L188               SmtUtils]: Spent 4.84 s on a formula simplification. DAG size of input: 590 DAG size of output: 552
[2020-11-25 01:06:34,112 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:06:34,144 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:06:34,156 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:06:34 BasicIcfg
[2020-11-25 01:06:34,156 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:06:34,156 INFO  L168              Benchmark]: Toolchain (without parser) took 77701.80 ms. Allocated memory was 1.0 GB in the beginning and 5.2 GB in the end (delta: 4.1 GB). Free memory was 919.1 MB in the beginning and 1.8 GB in the end (delta: -842.9 MB). Peak memory consumption was 4.4 GB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,157 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,157 INFO  L168              Benchmark]: Boogie Preprocessor took 171.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,157 INFO  L168              Benchmark]: UtopiaSpecLang took 98.69 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,157 INFO  L168              Benchmark]: Boogie Printer took 29.48 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,158 INFO  L168              Benchmark]: RCFGBuilder took 1343.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 76.5 MB). Free memory was 870.8 MB in the beginning and 779.2 MB in the end (delta: 91.5 MB). Peak memory consumption was 168.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,158 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.63 ms. Allocated memory is still 1.1 GB. Free memory was 779.2 MB in the beginning and 768.8 MB in the end (delta: 10.4 MB). Peak memory consumption was 10.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,158 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3211.21 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 465.6 MB). Free memory was 768.8 MB in the beginning and 895.9 MB in the end (delta: -127.1 MB). Peak memory consumption was 354.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,159 INFO  L168              Benchmark]: BlockEncodingV2 took 284.45 ms. Allocated memory is still 1.6 GB. Free memory was 895.9 MB in the beginning and 733.2 MB in the end (delta: 162.7 MB). Peak memory consumption was 162.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,159 INFO  L168              Benchmark]: BuchiAutomizer took 72528.07 ms. Allocated memory was 1.6 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 733.2 MB in the beginning and 1.8 GB in the end (delta: -1.0 GB). Peak memory consumption was 3.6 GB. Max. memory is 15.3 GB.
[2020-11-25 01:06:34,161 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11438 locations, 20724 edges
  - StatisticsResult: Encoded RCFG
    11296 locations, 20333 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 171.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 98.69 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.48 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1343.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 76.5 MB). Free memory was 870.8 MB in the beginning and 779.2 MB in the end (delta: 91.5 MB). Peak memory consumption was 168.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.63 ms. Allocated memory is still 1.1 GB. Free memory was 779.2 MB in the beginning and 768.8 MB in the end (delta: 10.4 MB). Peak memory consumption was 10.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3211.21 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 465.6 MB). Free memory was 768.8 MB in the beginning and 895.9 MB in the end (delta: -127.1 MB). Peak memory consumption was 354.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 284.45 ms. Allocated memory is still 1.6 GB. Free memory was 895.9 MB in the beginning and 733.2 MB in the end (delta: 162.7 MB). Peak memory consumption was 162.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 72528.07 ms. Allocated memory was 1.6 GB in the beginning and 5.2 GB in the end (delta: 3.6 GB). Free memory was 733.2 MB in the beginning and 1.8 GB in the end (delta: -1.0 GB). Peak memory consumption was 3.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4607 locations, 6370 edges
  - StatisticsResult: BuchiProgram size
    11438 locations, 20724 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.19 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 8532 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 72.4s and 20 iterations.  TraceHistogramMax:8. Analysis of lassos took 39.5s. Construction of modules took 21.2s. BÃ¼chi inclusion checks took 7.7s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 1.9s AutomataMinimizationTime, 19 MinimizatonAttempts, 19919 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 1.2s Buchi closure took 0.0s. Biggest automaton had 19497 states and ocurred in iteration 17.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 155625 SDtfs, 92407 SDslu, 551704 SDs, 0 SdLazy, 320648 SolverSat, 17122 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU18 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000029) = (new BLY)({from : 1000000000000000000000000001});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000029).transferFrom~address~address~uint256.gas(3979002)({from : 1000000000000000000000000014, from : 0, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);

Loop:
HxOwnable(1000000000000000000000000029).owner.gas(3979001)({from : 1000000000000000000000000020});
[L615]                havoc __exception;
[L616]                revert := false;
[L617]    COND FALSE  !(__exception)
[L653]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5949]               __ret_0_ := owner_HxOwnable[this];
[L653]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L654]                assume !revert && gas >= 0;
[L11982]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
