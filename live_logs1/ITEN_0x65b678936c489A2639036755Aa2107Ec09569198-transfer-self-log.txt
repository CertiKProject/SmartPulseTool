This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:42:30,422 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:42:30,423 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:42:30,433 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:42:30,433 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:42:30,434 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:42:30,435 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:42:30,436 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:42:30,438 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:42:30,438 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:42:30,439 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:42:30,439 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:42:30,440 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:42:30,440 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:42:30,441 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:42:30,442 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:42:30,443 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:42:30,444 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:42:30,445 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:42:30,447 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:42:30,447 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:42:30,448 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:42:30,450 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:42:30,450 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:42:30,450 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:42:30,451 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:42:30,451 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:42:30,452 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:42:30,452 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:42:30,452 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:42:30,452 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:42:30,453 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:42:30,453 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:42:30,454 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:42:30,454 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:42:30,455 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:42:30,455 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:42:30,455 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:42:30,455 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:42:30,456 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:42:30,456 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:42:30,457 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:42:30,464 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:42:30,464 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:42:30,465 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:42:30,465 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:42:30,465 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:42:30,465 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:42:30,465 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:42:30,465 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:42:30,466 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:42:30,466 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:42:30,466 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:42:30,467 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:42:30,467 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:42:30,486 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:42:30,498 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:42:30,502 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:42:30,504 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:42:30,505 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:42:30,506 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl
[2020-11-25 18:42:30,506 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl'
[2020-11-25 18:42:30,591 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:42:30,592 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:42:30,592 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:42:30,592 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:42:30,592 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:42:30,609 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,610 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,640 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,641 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,661 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,672 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,680 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,690 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:42:30,691 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:42:30,691 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:42:30,693 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:42:30,696 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/1) ...
[2020-11-25 18:42:30,712 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && released_TokenERC20[this] == old(released_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 18:42:30,717 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && released_TokenERC20[this] == old(released_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 18:42:30,725 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && released_TokenERC20[this] == old(released_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 18:42:30,731 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s478 && _value_s478<=balanceOf_TokenERC20[this][msg.sender] ) && _value_s478>=0 ) && _value_s478<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s478]>=0 ) && balanceOf_TokenERC20[this][_to_s478]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s478,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:42:30,734 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s478==true && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this]==( old(balanceOf_TokenERC20[this]) ) ) && allowance_TokenERC20[this]==( old(allowance_TokenERC20[this]) ) ) && frozenAccount_ITEN[this]==( old(frozenAccount_ITEN[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && released_TokenERC20[this]==( old(released_TokenERC20[this]) ) ) && owner_owned[this]==( old(owner_owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s478,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ITEN,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ITEN,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[released_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[released_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 18:42:30,739 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balanceOf_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this]) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this]) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && released_TokenERC20[this] == old(released_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 18:42:30,740 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:42:30,749 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:42:30 PropertyContainer
[2020-11-25 18:42:30,749 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:42:30,750 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:42:30,750 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:42:30,750 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:42:30,750 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/2) ...
[2020-11-25 18:42:30,751 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:42:30,751 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:42:30,766 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:42:30" (2/2) ...
[2020-11-25 18:42:30,766 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:42:30,767 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:42:30,767 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:42:30,767 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:42:30,768 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/2) ...
[2020-11-25 18:42:30,825 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:42:30,825 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:42:30,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 18:42:30,826 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 18:42:30,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 18:42:30,827 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 18:42:30,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 18:42:30,827 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 18:42:30,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 18:42:30,828 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 18:42:30,828 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 18:42:30,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 18:42:30,828 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 18:42:30,828 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 18:42:30,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20
[2020-11-25 18:42:30,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:42:30,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:42:30,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:42:30,829 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:42:30,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 18:42:30,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 18:42:30,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 18:42:30,830 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 18:42:30,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 18:42:30,831 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 18:42:30,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 18:42:30,831 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20
[2020-11-25 18:42:30,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20
[2020-11-25 18:42:30,831 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 18:42:30,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 18:42:30,831 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 18:42:30,831 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 18:42:30,831 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN_NoBaseCtor__success
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN
[2020-11-25 18:42:30,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ITEN__success
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN
[2020-11-25 18:42:30,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN
[2020-11-25 18:42:30,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN
[2020-11-25 18:42:30,832 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN
[2020-11-25 18:42:30,832 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__success
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 18:42:30,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ITEN
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:42:30,834 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 18:42:30,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__success
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure release_TokenERC20__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,836 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,837 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 18:42:30,838 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__success
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure released_TokenERC20__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN_NoBaseCtor__fail
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN__success
[2020-11-25 18:42:30,839 INFO  L130     BoogieDeclarations]: Found specification of procedure ITEN_ITEN__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ITEN__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN__success
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ITEN__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN__success
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ITEN__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN__success
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ITEN__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:42:30,840 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:42:30,841 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:42:30,841 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:42:30,841 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyReleased_pre__fail
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:42:30,841 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:42:30,842 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 18:42:30,843 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__fail
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure release_TokenERC20__success
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,844 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 18:42:30,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure released_TokenERC20__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN_NoBaseCtor__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN_NoBaseCtor__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure ITEN_ITEN__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ITEN__fail
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ITEN__success
[2020-11-25 18:42:30,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ITEN__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ITEN__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ITEN__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__fail
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyReleased_pre__success
[2020-11-25 18:42:30,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ITEN
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:42:30,848 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:42:30,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:42:31,498 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:42:31,499 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:42:31,499 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:42:31,551 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:42:31,551 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 18:42:31,553 INFO  L202        PluginConnector]: Adding new model ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:42:31 BoogieIcfgContainer
[2020-11-25 18:42:31,553 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:42:30" (2/2) ...
[2020-11-25 18:42:31,553 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:42:31,554 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6cd4310e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:42:31, skipping insertion in model container
[2020-11-25 18:42:31,554 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:42:31,554 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:42:31,554 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:42:31,555 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:42:31,556 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/3) ...
[2020-11-25 18:42:31,556 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6d8487d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:42:31, skipping insertion in model container
[2020-11-25 18:42:31,556 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:42:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:42:31,593 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:42:31 NWAContainer
[2020-11-25 18:42:31,593 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:42:31,593 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:42:31,593 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:42:31,594 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:42:31,595 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:42:31" (3/4) ...
[2020-11-25 18:42:31,596 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@17452b1a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:42:31, skipping insertion in model container
[2020-11-25 18:42:31,596 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:42:31" (4/4) ...
[2020-11-25 18:42:31,599 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:42:31,603 INFO  L110   BuchiProductObserver]: Initial RCFG 1827 locations, 2456 edges
[2020-11-25 18:42:31,603 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:42:31,615 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:42:32,972 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:42:32,977 INFO  L110   BuchiProductObserver]: BuchiProgram size 4500 locations, 8005 edges
[2020-11-25 18:42:32,978 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:42:32 BoogieIcfgContainer
[2020-11-25 18:42:32,978 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:42:32,978 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:42:32,978 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:42:32,980 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:42:32,981 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:42:32" (1/1) ...
[2020-11-25 18:42:33,081 INFO  L313           BlockEncoder]: Initial Icfg 4500 locations, 8005 edges
[2020-11-25 18:42:33,081 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:42:33,082 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:42:33,082 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:42:33,083 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:42:33,097 INFO  L70    emoveInfeasibleEdges]: Removed 78 edges and 13 locations because of local infeasibility
[2020-11-25 18:42:33,107 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 18:42:33,119 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:42:33,123 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:42:33,126 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:42:33,126 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:42:33,131 INFO  L313           BlockEncoder]: Encoded RCFG 4448 locations, 7869 edges
[2020-11-25 18:42:33,131 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:42:33 BasicIcfg
[2020-11-25 18:42:33,131 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:42:33,132 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:42:33,132 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:42:33,134 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:42:33,134 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,134 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:42:30" (1/6) ...
[2020-11-25 18:42:33,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56ea65ba and model type ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:42:33, skipping insertion in model container
[2020-11-25 18:42:33,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:42:30" (2/6) ...
[2020-11-25 18:42:33,136 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56ea65ba and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:42:33, skipping insertion in model container
[2020-11-25 18:42:33,137 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,137 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:42:31" (3/6) ...
[2020-11-25 18:42:33,137 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56ea65ba and model type ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:42:33, skipping insertion in model container
[2020-11-25 18:42:33,137 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,137 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:42:31" (4/6) ...
[2020-11-25 18:42:33,137 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56ea65ba and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:42:33, skipping insertion in model container
[2020-11-25 18:42:33,137 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,137 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:42:32" (5/6) ...
[2020-11-25 18:42:33,137 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56ea65ba and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:42:33, skipping insertion in model container
[2020-11-25 18:42:33,137 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:42:33,137 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:42:33" (6/6) ...
[2020-11-25 18:42:33,138 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ITEN_0x65b678936c489A2639036755Aa2107Ec09569198_transfer-self.bpl_BEv2
[2020-11-25 18:42:33,169 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:42:33,169 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:42:33,169 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:42:33,169 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:42:33,169 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:42:33,169 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:42:33,169 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:42:33,169 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:42:33,170 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:42:33,207 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4448 states.
[2020-11-25 18:42:33,262 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:42:33,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:33,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:33,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:33,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:33,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:42:33,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4448 states.
[2020-11-25 18:42:33,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:42:33,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:33,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:33,294 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:33,294 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND TRUE   revert
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:33,307 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:33,308 INFO  L82        PathProgramCache]: Analyzing trace with hash 1571811342, now seen corresponding path program 1 times
[2020-11-25 18:42:33,311 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:33,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:33,373 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:42:33,375 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:33,375 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:42:33,645 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:33,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:42:33,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:42:33,654 INFO  L87              Difference]: Start difference. First operand 4448 states. Second operand 4 states.
[2020-11-25 18:42:34,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:34,875 INFO  L93              Difference]: Finished difference Result 4698 states and 7665 transitions.
[2020-11-25 18:42:34,877 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:42:34,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4698 states and 7665 transitions.
[2020-11-25 18:42:34,921 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 18:42:34,975 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4698 states to 4426 states and 7191 transitions.
[2020-11-25 18:42:34,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 18:42:34,981 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1103
[2020-11-25 18:42:34,982 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4426 states and 7191 transitions.
[2020-11-25 18:42:34,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:34,998 INFO  L728         BuchiCegarLoop]: Abstraction has 4426 states and 7191 transitions.
[2020-11-25 18:42:35,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4426 states and 7191 transitions.
[2020-11-25 18:42:35,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4426 to 3392.
[2020-11-25 18:42:35,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3392 states.
[2020-11-25 18:42:35,083 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3392 states to 3392 states and 5277 transitions.
[2020-11-25 18:42:35,083 INFO  L751         BuchiCegarLoop]: Abstraction has 3392 states and 5277 transitions.
[2020-11-25 18:42:35,084 INFO  L631         BuchiCegarLoop]: Abstraction has 3392 states and 5277 transitions.
[2020-11-25 18:42:35,084 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:42:35,084 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3392 states and 5277 transitions.
[2020-11-25 18:42:35,092 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:42:35,093 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:35,093 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:35,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:35,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:35,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:35,097 INFO  L82        PathProgramCache]: Analyzing trace with hash -1041045957, now seen corresponding path program 1 times
[2020-11-25 18:42:35,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:35,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:35,120 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:42:35,120 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:35,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:42:35,121 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:35,121 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:42:35,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:42:35,122 INFO  L87              Difference]: Start difference. First operand 3392 states and 5277 transitions. cyclomatic complexity: 1887 Second operand 4 states.
[2020-11-25 18:42:35,936 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:35,936 INFO  L93              Difference]: Finished difference Result 3218 states and 3551 transitions.
[2020-11-25 18:42:35,936 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:42:35,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3218 states and 3551 transitions.
[2020-11-25 18:42:35,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:42:35,957 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3218 states to 3218 states and 3551 transitions.
[2020-11-25 18:42:35,957 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 778
[2020-11-25 18:42:35,958 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 778
[2020-11-25 18:42:35,958 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3218 states and 3551 transitions.
[2020-11-25 18:42:35,960 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:35,960 INFO  L728         BuchiCegarLoop]: Abstraction has 3218 states and 3551 transitions.
[2020-11-25 18:42:35,963 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3218 states and 3551 transitions.
[2020-11-25 18:42:35,985 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3218 to 3218.
[2020-11-25 18:42:35,985 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3218 states.
[2020-11-25 18:42:35,989 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3218 states to 3218 states and 3551 transitions.
[2020-11-25 18:42:35,989 INFO  L751         BuchiCegarLoop]: Abstraction has 3218 states and 3551 transitions.
[2020-11-25 18:42:35,990 INFO  L631         BuchiCegarLoop]: Abstraction has 3218 states and 3551 transitions.
[2020-11-25 18:42:35,990 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:42:35,990 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3218 states and 3551 transitions.
[2020-11-25 18:42:35,997 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:42:35,997 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:35,997 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:35,999 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:35,999 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND TRUE   !__tmp__released_TokenERC20[this]
[L4315]              revert := true;
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND TRUE   !__tmp__released_TokenERC20[this]
[L4315]              revert := true;
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:36,003 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:36,003 INFO  L82        PathProgramCache]: Analyzing trace with hash 785645033, now seen corresponding path program 1 times
[2020-11-25 18:42:36,004 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:36,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:36,137 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 18:42:36,137 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:36,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 18:42:36,138 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:36,138 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 18:42:36,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 18:42:36,138 INFO  L87              Difference]: Start difference. First operand 3218 states and 3551 transitions. cyclomatic complexity: 335 Second operand 13 states.
[2020-11-25 18:42:38,205 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:38,205 INFO  L93              Difference]: Finished difference Result 5312 states and 5921 transitions.
[2020-11-25 18:42:38,205 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 18:42:38,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5312 states and 5921 transitions.
[2020-11-25 18:42:38,216 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 18:42:38,229 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5312 states to 5312 states and 5921 transitions.
[2020-11-25 18:42:38,229 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1291
[2020-11-25 18:42:38,230 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1291
[2020-11-25 18:42:38,230 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5312 states and 5921 transitions.
[2020-11-25 18:42:38,235 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:38,235 INFO  L728         BuchiCegarLoop]: Abstraction has 5312 states and 5921 transitions.
[2020-11-25 18:42:38,238 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5312 states and 5921 transitions.
[2020-11-25 18:42:38,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5312 to 3254.
[2020-11-25 18:42:38,265 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3254 states.
[2020-11-25 18:42:38,268 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3254 states to 3254 states and 3594 transitions.
[2020-11-25 18:42:38,268 INFO  L751         BuchiCegarLoop]: Abstraction has 3254 states and 3594 transitions.
[2020-11-25 18:42:38,268 INFO  L631         BuchiCegarLoop]: Abstraction has 3254 states and 3594 transitions.
[2020-11-25 18:42:38,268 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:42:38,268 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3254 states and 3594 transitions.
[2020-11-25 18:42:38,272 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:42:38,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:38,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:38,274 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:38,274 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND TRUE   !(_to_s760 != null)
[L3129]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND TRUE   !(_to_s760 != null)
[L3129]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:38,278 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:38,278 INFO  L82        PathProgramCache]: Analyzing trace with hash 726583591, now seen corresponding path program 1 times
[2020-11-25 18:42:38,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:38,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:38,319 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:38,319 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:38,319 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:42:38,319 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:38,319 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:42:38,319 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:42:38,319 INFO  L87              Difference]: Start difference. First operand 3254 states and 3594 transitions. cyclomatic complexity: 344 Second operand 7 states.
[2020-11-25 18:42:38,367 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:38,367 INFO  L93              Difference]: Finished difference Result 3360 states and 3711 transitions.
[2020-11-25 18:42:38,367 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:42:38,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3360 states and 3711 transitions.
[2020-11-25 18:42:38,374 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:42:38,383 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3360 states to 3352 states and 3703 transitions.
[2020-11-25 18:42:38,383 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 815
[2020-11-25 18:42:38,383 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 815
[2020-11-25 18:42:38,383 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3352 states and 3703 transitions.
[2020-11-25 18:42:38,386 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:38,386 INFO  L728         BuchiCegarLoop]: Abstraction has 3352 states and 3703 transitions.
[2020-11-25 18:42:38,389 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3352 states and 3703 transitions.
[2020-11-25 18:42:38,411 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3352 to 3335.
[2020-11-25 18:42:38,411 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3335 states.
[2020-11-25 18:42:38,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3335 states to 3335 states and 3684 transitions.
[2020-11-25 18:42:38,415 INFO  L751         BuchiCegarLoop]: Abstraction has 3335 states and 3684 transitions.
[2020-11-25 18:42:38,415 INFO  L631         BuchiCegarLoop]: Abstraction has 3335 states and 3684 transitions.
[2020-11-25 18:42:38,415 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:42:38,415 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3335 states and 3684 transitions.
[2020-11-25 18:42:38,418 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:42:38,418 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:38,418 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:38,420 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:38,420 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND FALSE  !(__tmp__DType[this] == ITEN)
[L2741]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2742]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2532]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2532]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2533]  COND FALSE  !(revert)
[L2536]              __var_2 := null;
[L2537]  COND TRUE   !(_to_s379 != null)
[L2538]              revert := true;
[L2742]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2743]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND FALSE  !(__tmp__DType[this] == ITEN)
[L2741]  COND TRUE   __tmp__DType[this] == TokenERC20
[L2742]  CALL        call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2532]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2532]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2533]  COND FALSE  !(revert)
[L2536]              __var_2 := null;
[L2537]  COND TRUE   !(_to_s379 != null)
[L2538]              revert := true;
[L2742]  RET         call _transfer~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2743]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:38,423 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:38,423 INFO  L82        PathProgramCache]: Analyzing trace with hash -1257741522, now seen corresponding path program 1 times
[2020-11-25 18:42:38,424 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:38,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:38,465 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:38,465 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:38,465 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 18:42:38,466 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:38,466 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:42:38,466 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:42:38,466 INFO  L87              Difference]: Start difference. First operand 3335 states and 3684 transitions. cyclomatic complexity: 353 Second operand 7 states.
[2020-11-25 18:42:38,938 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:38,939 INFO  L93              Difference]: Finished difference Result 4788 states and 5383 transitions.
[2020-11-25 18:42:38,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 18:42:38,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4788 states and 5383 transitions.
[2020-11-25 18:42:38,947 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 18:42:38,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4788 states to 4750 states and 5334 transitions.
[2020-11-25 18:42:38,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1162
[2020-11-25 18:42:38,959 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1162
[2020-11-25 18:42:38,959 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4750 states and 5334 transitions.
[2020-11-25 18:42:38,962 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:38,963 INFO  L728         BuchiCegarLoop]: Abstraction has 4750 states and 5334 transitions.
[2020-11-25 18:42:38,965 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4750 states and 5334 transitions.
[2020-11-25 18:42:38,987 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4750 to 3321.
[2020-11-25 18:42:38,987 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3321 states.
[2020-11-25 18:42:38,990 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3321 states to 3321 states and 3664 transitions.
[2020-11-25 18:42:38,990 INFO  L751         BuchiCegarLoop]: Abstraction has 3321 states and 3664 transitions.
[2020-11-25 18:42:38,990 INFO  L631         BuchiCegarLoop]: Abstraction has 3321 states and 3664 transitions.
[2020-11-25 18:42:38,990 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:42:38,990 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3321 states and 3664 transitions.
[2020-11-25 18:42:38,994 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:42:38,994 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:38,994 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:38,995 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:38,995 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760)
[L3133]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND TRUE   !(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760)
[L3133]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:38,998 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:38,998 INFO  L82        PathProgramCache]: Analyzing trace with hash 1065030261, now seen corresponding path program 1 times
[2020-11-25 18:42:38,999 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:39,008 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:39,048 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:39,048 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:39,048 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:42:39,049 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:39,049 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:42:39,049 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:42:39,049 INFO  L87              Difference]: Start difference. First operand 3321 states and 3664 transitions. cyclomatic complexity: 347 Second operand 7 states.
[2020-11-25 18:42:39,775 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:39,775 INFO  L93              Difference]: Finished difference Result 3512 states and 3887 transitions.
[2020-11-25 18:42:39,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 18:42:39,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3512 states and 3887 transitions.
[2020-11-25 18:42:39,782 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 18:42:39,789 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3512 states to 3512 states and 3887 transitions.
[2020-11-25 18:42:39,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 903
[2020-11-25 18:42:39,790 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 903
[2020-11-25 18:42:39,790 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3512 states and 3887 transitions.
[2020-11-25 18:42:39,792 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:39,792 INFO  L728         BuchiCegarLoop]: Abstraction has 3512 states and 3887 transitions.
[2020-11-25 18:42:39,795 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3512 states and 3887 transitions.
[2020-11-25 18:42:39,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3512 to 3321.
[2020-11-25 18:42:39,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3321 states.
[2020-11-25 18:42:39,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3321 states to 3321 states and 3664 transitions.
[2020-11-25 18:42:39,815 INFO  L751         BuchiCegarLoop]: Abstraction has 3321 states and 3664 transitions.
[2020-11-25 18:42:39,815 INFO  L631         BuchiCegarLoop]: Abstraction has 3321 states and 3664 transitions.
[2020-11-25 18:42:39,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:42:39,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3321 states and 3664 transitions.
[2020-11-25 18:42:39,819 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:42:39,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:39,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:39,820 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:39,820 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760])
[L3137]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND TRUE   !((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760])
[L3137]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:39,824 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:39,824 INFO  L82        PathProgramCache]: Analyzing trace with hash -903356068, now seen corresponding path program 1 times
[2020-11-25 18:42:39,825 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:39,834 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:39,947 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:39,948 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:39,948 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 18:42:39,949 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:39,949 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 18:42:39,949 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 18:42:39,949 INFO  L87              Difference]: Start difference. First operand 3321 states and 3664 transitions. cyclomatic complexity: 347 Second operand 16 states.
[2020-11-25 18:42:41,792 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:41,793 INFO  L93              Difference]: Finished difference Result 3546 states and 3993 transitions.
[2020-11-25 18:42:41,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 18:42:41,793 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3546 states and 3993 transitions.
[2020-11-25 18:42:41,799 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 18:42:41,808 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3546 states to 3546 states and 3993 transitions.
[2020-11-25 18:42:41,808 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 918
[2020-11-25 18:42:41,808 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 918
[2020-11-25 18:42:41,808 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3546 states and 3993 transitions.
[2020-11-25 18:42:41,810 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:41,810 INFO  L728         BuchiCegarLoop]: Abstraction has 3546 states and 3993 transitions.
[2020-11-25 18:42:41,813 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3546 states and 3993 transitions.
[2020-11-25 18:42:41,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3546 to 3432.
[2020-11-25 18:42:41,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3432 states.
[2020-11-25 18:42:41,835 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3432 states to 3432 states and 3811 transitions.
[2020-11-25 18:42:41,835 INFO  L751         BuchiCegarLoop]: Abstraction has 3432 states and 3811 transitions.
[2020-11-25 18:42:41,835 INFO  L631         BuchiCegarLoop]: Abstraction has 3432 states and 3811 transitions.
[2020-11-25 18:42:41,835 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:42:41,835 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3432 states and 3811 transitions.
[2020-11-25 18:42:41,839 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 18:42:41,839 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:41,839 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:41,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:41,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND TRUE   !!__tmp__frozenAccount_ITEN[this][_from_s760]
[L3141]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:41,842 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:41,842 INFO  L82        PathProgramCache]: Analyzing trace with hash 797871464, now seen corresponding path program 1 times
[2020-11-25 18:42:41,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:41,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:41,884 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:41,884 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:41,884 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 18:42:41,884 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:41,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 18:42:41,885 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 18:42:41,885 INFO  L87              Difference]: Start difference. First operand 3432 states and 3811 transitions. cyclomatic complexity: 387 Second operand 12 states.
[2020-11-25 18:42:43,540 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:43,540 INFO  L93              Difference]: Finished difference Result 5750 states and 6638 transitions.
[2020-11-25 18:42:43,540 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 18:42:43,540 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5750 states and 6638 transitions.
[2020-11-25 18:42:43,553 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 36
[2020-11-25 18:42:43,567 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5750 states to 5750 states and 6638 transitions.
[2020-11-25 18:42:43,567 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1465
[2020-11-25 18:42:43,568 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1465
[2020-11-25 18:42:43,568 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5750 states and 6638 transitions.
[2020-11-25 18:42:43,572 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:43,572 INFO  L728         BuchiCegarLoop]: Abstraction has 5750 states and 6638 transitions.
[2020-11-25 18:42:43,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5750 states and 6638 transitions.
[2020-11-25 18:42:43,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5750 to 3492.
[2020-11-25 18:42:43,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3492 states.
[2020-11-25 18:42:43,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3492 states to 3492 states and 3948 transitions.
[2020-11-25 18:42:43,607 INFO  L751         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:43,607 INFO  L631         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:43,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 18:42:43,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3492 states and 3948 transitions.
[2020-11-25 18:42:43,611 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:43,611 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:43,611 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:43,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:43,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_from_s760])
[L3144]  COND TRUE   !!__tmp__frozenAccount_ITEN[this][_to_s760]
[L3145]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:43,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:43,615 INFO  L82        PathProgramCache]: Analyzing trace with hash 349410167, now seen corresponding path program 1 times
[2020-11-25 18:42:43,615 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:43,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:43,678 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:43,679 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:43,679 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 18:42:43,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:43,679 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:42:43,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:42:43,680 INFO  L87              Difference]: Start difference. First operand 3492 states and 3948 transitions. cyclomatic complexity: 472 Second operand 6 states.
[2020-11-25 18:42:43,740 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:43,740 INFO  L93              Difference]: Finished difference Result 3531 states and 3993 transitions.
[2020-11-25 18:42:43,740 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:42:43,740 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3531 states and 3993 transitions.
[2020-11-25 18:42:43,747 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:43,754 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3531 states to 3531 states and 3993 transitions.
[2020-11-25 18:42:43,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 930
[2020-11-25 18:42:43,755 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 930
[2020-11-25 18:42:43,755 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3531 states and 3993 transitions.
[2020-11-25 18:42:43,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:43,757 INFO  L728         BuchiCegarLoop]: Abstraction has 3531 states and 3993 transitions.
[2020-11-25 18:42:43,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3531 states and 3993 transitions.
[2020-11-25 18:42:43,781 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3531 to 3492.
[2020-11-25 18:42:43,781 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3492 states.
[2020-11-25 18:42:43,784 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3492 states to 3492 states and 3948 transitions.
[2020-11-25 18:42:43,785 INFO  L751         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:43,785 INFO  L631         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:43,785 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 18:42:43,785 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3492 states and 3948 transitions.
[2020-11-25 18:42:43,788 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:43,789 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:43,789 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:43,789 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:43,789 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_from_s760])
[L3144]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_to_s760])
[L3148]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2260]  COND TRUE   !(b_s82 <= a_s82)
[L2261]              revert := true;
[L3148]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3149]  COND TRUE   revert
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:43,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:43,792 INFO  L82        PathProgramCache]: Analyzing trace with hash -971238140, now seen corresponding path program 1 times
[2020-11-25 18:42:43,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:43,802 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:43,838 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:43,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:43,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 18:42:43,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:43,839 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 18:42:43,839 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 18:42:43,839 INFO  L87              Difference]: Start difference. First operand 3492 states and 3948 transitions. cyclomatic complexity: 472 Second operand 8 states.
[2020-11-25 18:42:44,443 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:44,443 INFO  L93              Difference]: Finished difference Result 3641 states and 4233 transitions.
[2020-11-25 18:42:44,443 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 18:42:44,443 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3641 states and 4233 transitions.
[2020-11-25 18:42:44,452 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 24
[2020-11-25 18:42:44,461 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3641 states to 3641 states and 4233 transitions.
[2020-11-25 18:42:44,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 968
[2020-11-25 18:42:44,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 968
[2020-11-25 18:42:44,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3641 states and 4233 transitions.
[2020-11-25 18:42:44,464 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:44,464 INFO  L728         BuchiCegarLoop]: Abstraction has 3641 states and 4233 transitions.
[2020-11-25 18:42:44,466 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3641 states and 4233 transitions.
[2020-11-25 18:42:44,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3641 to 3492.
[2020-11-25 18:42:44,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3492 states.
[2020-11-25 18:42:44,488 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3492 states to 3492 states and 3948 transitions.
[2020-11-25 18:42:44,488 INFO  L751         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:44,488 INFO  L631         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:44,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 18:42:44,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3492 states and 3948 transitions.
[2020-11-25 18:42:44,492 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:44,492 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:44,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:44,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:44,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_from_s760])
[L3144]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_to_s760])
[L3148]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2260]  COND FALSE  !(!(b_s82 <= a_s82))
[L2264]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2265]              __ret_0_ := c_s82;
[L3148]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3149]  COND FALSE  !(revert)
[L3152]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3153]              __tmp__balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3154]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3155]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2284]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2285]  COND TRUE   !(c_s106 >= a_s106)
[L2286]              revert := true;
[L3155]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3156]  COND TRUE   revert
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_from_s760])
[L3144]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_to_s760])
[L3148]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2260]  COND FALSE  !(!(b_s82 <= a_s82))
[L2264]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2265]              __ret_0_ := c_s82;
[L3148]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3149]  COND FALSE  !(revert)
[L3152]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3153]              __tmp__balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3154]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3155]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2284]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2285]  COND TRUE   !(c_s106 >= a_s106)
[L2286]              revert := true;
[L3155]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3156]  COND TRUE   revert
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:44,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:44,496 INFO  L82        PathProgramCache]: Analyzing trace with hash -289251892, now seen corresponding path program 1 times
[2020-11-25 18:42:44,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:44,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:44,625 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:44,625 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:44,625 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 18:42:44,626 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:44,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 18:42:44,626 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=419, Unknown=0, NotChecked=0, Total=462
[2020-11-25 18:42:44,626 INFO  L87              Difference]: Start difference. First operand 3492 states and 3948 transitions. cyclomatic complexity: 472 Second operand 22 states.
[2020-11-25 18:42:48,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:48,069 INFO  L93              Difference]: Finished difference Result 3643 states and 4283 transitions.
[2020-11-25 18:42:48,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 18:42:48,069 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3643 states and 4283 transitions.
[2020-11-25 18:42:48,078 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 26
[2020-11-25 18:42:48,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3643 states to 3643 states and 4283 transitions.
[2020-11-25 18:42:48,087 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 969
[2020-11-25 18:42:48,087 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 969
[2020-11-25 18:42:48,087 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3643 states and 4283 transitions.
[2020-11-25 18:42:48,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:48,090 INFO  L728         BuchiCegarLoop]: Abstraction has 3643 states and 4283 transitions.
[2020-11-25 18:42:48,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3643 states and 4283 transitions.
[2020-11-25 18:42:48,111 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3643 to 3492.
[2020-11-25 18:42:48,111 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3492 states.
[2020-11-25 18:42:48,115 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3492 states to 3492 states and 3948 transitions.
[2020-11-25 18:42:48,115 INFO  L751         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:48,115 INFO  L631         BuchiCegarLoop]: Abstraction has 3492 states and 3948 transitions.
[2020-11-25 18:42:48,115 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 18:42:48,115 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3492 states and 3948 transitions.
[2020-11-25 18:42:48,118 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:48,118 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:48,118 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:48,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:48,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_from_s760])
[L3144]  COND FALSE  !(!!__tmp__frozenAccount_ITEN[this][_to_s760])
[L3148]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2260]  COND FALSE  !(!(b_s82 <= a_s82))
[L2264]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2265]              __ret_0_ := c_s82;
[L3148]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3149]  COND FALSE  !(revert)
[L3152]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3153]              __tmp__balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3154]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][_from_s760];
[L3155]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2284]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2285]  COND FALSE  !(!(c_s106 >= a_s106))
[L2289]              __ret_0_ := c_s106;
[L3155]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3156]  COND FALSE  !(revert)
[L3159]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][_to_s760];
[L3160]              __tmp__balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3161]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][_to_s760];
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND FALSE  !(revert)
[L2749]              success_s478 := true;
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:48,122 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:48,122 INFO  L82        PathProgramCache]: Analyzing trace with hash -328062395, now seen corresponding path program 1 times
[2020-11-25 18:42:48,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:48,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:48,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:48,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:48,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:42:48,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:48,173 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 18:42:48,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 18:42:48,173 INFO  L87              Difference]: Start difference. First operand 3492 states and 3948 transitions. cyclomatic complexity: 472 Second operand 5 states.
[2020-11-25 18:42:48,585 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:48,585 INFO  L93              Difference]: Finished difference Result 4291 states and 5398 transitions.
[2020-11-25 18:42:48,585 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:42:48,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4291 states and 5398 transitions.
[2020-11-25 18:42:48,598 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 64
[2020-11-25 18:42:48,611 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4291 states to 3494 states and 4593 transitions.
[2020-11-25 18:42:48,611 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 701
[2020-11-25 18:42:48,612 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 701
[2020-11-25 18:42:48,612 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3494 states and 4593 transitions.
[2020-11-25 18:42:48,616 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:48,616 INFO  L728         BuchiCegarLoop]: Abstraction has 3494 states and 4593 transitions.
[2020-11-25 18:42:48,618 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3494 states and 4593 transitions.
[2020-11-25 18:42:48,645 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3494 to 2741.
[2020-11-25 18:42:48,645 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2741 states.
[2020-11-25 18:42:48,648 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2741 states to 2741 states and 3158 transitions.
[2020-11-25 18:42:48,648 INFO  L751         BuchiCegarLoop]: Abstraction has 2741 states and 3158 transitions.
[2020-11-25 18:42:48,648 INFO  L631         BuchiCegarLoop]: Abstraction has 2741 states and 3158 transitions.
[2020-11-25 18:42:48,648 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 18:42:48,648 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2741 states and 3158 transitions.
[2020-11-25 18:42:48,651 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 18:42:48,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:48,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:48,651 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:48,652 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND TRUE   !__tmp__released_TokenERC20[this]
[L4315]              revert := true;
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND TRUE   revert
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND TRUE   choice == 19
[L4800]              gas := gas - 21000;
[L4801]  COND FALSE  !(gas >= 0)
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:48,654 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:48,654 INFO  L82        PathProgramCache]: Analyzing trace with hash -1163830784, now seen corresponding path program 1 times
[2020-11-25 18:42:48,655 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:48,662 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:48,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 13 trivial. 0 not checked.
[2020-11-25 18:42:48,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:48,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 18:42:48,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:48,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 18:42:48,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 18:42:48,696 INFO  L87              Difference]: Start difference. First operand 2741 states and 3158 transitions. cyclomatic complexity: 433 Second operand 14 states.
[2020-11-25 18:42:50,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:50,587 INFO  L93              Difference]: Finished difference Result 4532 states and 5272 transitions.
[2020-11-25 18:42:50,588 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 18:42:50,588 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4532 states and 5272 transitions.
[2020-11-25 18:42:50,597 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:50,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4532 states to 4532 states and 5272 transitions.
[2020-11-25 18:42:50,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 919
[2020-11-25 18:42:50,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 919
[2020-11-25 18:42:50,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4532 states and 5272 transitions.
[2020-11-25 18:42:50,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:50,611 INFO  L728         BuchiCegarLoop]: Abstraction has 4532 states and 5272 transitions.
[2020-11-25 18:42:50,613 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4532 states and 5272 transitions.
[2020-11-25 18:42:50,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4532 to 4084.
[2020-11-25 18:42:50,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4084 states.
[2020-11-25 18:42:50,639 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4084 states to 4084 states and 4795 transitions.
[2020-11-25 18:42:50,639 INFO  L751         BuchiCegarLoop]: Abstraction has 4084 states and 4795 transitions.
[2020-11-25 18:42:50,639 INFO  L631         BuchiCegarLoop]: Abstraction has 4084 states and 4795 transitions.
[2020-11-25 18:42:50,639 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 18:42:50,639 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4084 states and 4795 transitions.
[2020-11-25 18:42:50,643 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:50,643 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:50,643 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:50,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:50,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == ITEN
[L2760]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2760]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((success_s478 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && released_TokenERC20[this] == old(released_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == ITEN
[L2760]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2760]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((success_s478 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && released_TokenERC20[this] == old(released_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:50,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:50,647 INFO  L82        PathProgramCache]: Analyzing trace with hash 149035435, now seen corresponding path program 1 times
[2020-11-25 18:42:50,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:50,663 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:50,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 18:42:50,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:50,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 18:42:50,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:50,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 18:42:50,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=54, Invalid=498, Unknown=0, NotChecked=0, Total=552
[2020-11-25 18:42:50,927 INFO  L87              Difference]: Start difference. First operand 4084 states and 4795 transitions. cyclomatic complexity: 732 Second operand 24 states.
[2020-11-25 18:42:53,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:53,875 INFO  L93              Difference]: Finished difference Result 4156 states and 4899 transitions.
[2020-11-25 18:42:53,875 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 18:42:53,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4156 states and 4899 transitions.
[2020-11-25 18:42:53,894 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:53,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4156 states to 4156 states and 4899 transitions.
[2020-11-25 18:42:53,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 930
[2020-11-25 18:42:53,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 930
[2020-11-25 18:42:53,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4156 states and 4899 transitions.
[2020-11-25 18:42:53,937 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:53,937 INFO  L728         BuchiCegarLoop]: Abstraction has 4156 states and 4899 transitions.
[2020-11-25 18:42:53,940 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4156 states and 4899 transitions.
[2020-11-25 18:42:53,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4156 to 4142.
[2020-11-25 18:42:53,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4142 states.
[2020-11-25 18:42:53,978 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4142 states to 4142 states and 4883 transitions.
[2020-11-25 18:42:53,979 INFO  L751         BuchiCegarLoop]: Abstraction has 4142 states and 4883 transitions.
[2020-11-25 18:42:53,979 INFO  L631         BuchiCegarLoop]: Abstraction has 4142 states and 4883 transitions.
[2020-11-25 18:42:53,979 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 18:42:53,979 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4142 states and 4883 transitions.
[2020-11-25 18:42:53,985 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:53,985 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:53,985 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:53,986 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:53,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND FALSE  !(DType[this] == ITEN)
[L2764]  COND TRUE   DType[this] == TokenERC20
[L2765]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2581]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2581]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2582]  COND FALSE  !(revert)
[L2585]              __var_2 := null;
[L2586]  COND FALSE  !(!(_to_s379 != null))
[L2590]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s379] >= _value_s379))
[L2594]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s379] + _value_s379) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s379]))
[L2598]  CALL        call previousBalances_s379 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2598]  RET         call previousBalances_s379 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2599]  COND FALSE  !(revert)
[L2602]              previousBalances_s379 := previousBalances_s379;
[L2603]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], _value_s379);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L2603]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], _value_s379);
[L2604]  COND FALSE  !(revert)
[L2607]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s379];
[L2608]              balanceOf_TokenERC20[this][_from_s379] := __var_3;
[L2609]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s379];
[L2610]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s379], _value_s379);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2610]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s379], _value_s379);
[L2611]  COND FALSE  !(revert)
[L2614]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s379];
[L2615]              balanceOf_TokenERC20[this][_to_s379] := __var_4;
[L2616]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s379];
[L2617]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2618]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L2618]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s379], balanceOf_TokenERC20[this][_to_s379]);
[L2619]  COND FALSE  !(revert)
[L2622]              assert __var_5 == previousBalances_s379;
[L2765]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2766]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((success_s478 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && released_TokenERC20[this] == old(released_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND FALSE  !(__exception)
[L703]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2755]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L2755]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2756]  COND FALSE  !(revert)
[L2759]  COND TRUE   DType[this] == ITEN
[L2760]  CALL        call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3169]  CALL        call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4322]  COND FALSE  !(!released_TokenERC20[this])
[L3169]  RET         call onlyReleased_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3170]  COND FALSE  !(revert)
[L3173]              __var_16 := null;
[L3174]  COND FALSE  !(!(_to_s760 != null))
[L3178]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3182]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s760]))
[L3186]  COND FALSE  !(!!frozenAccount_ITEN[this][_from_s760])
[L3190]  COND FALSE  !(!!frozenAccount_ITEN[this][_to_s760])
[L3194]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L2272]  COND FALSE  !(!(b_s82 <= a_s82))
[L2276]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2277]              __ret_0_ := c_s82;
[L3194]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s760], _value_s760);
[L3195]  COND FALSE  !(revert)
[L3198]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s760];
[L3199]              balanceOf_TokenERC20[this][_from_s760] := __var_17;
[L3200]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s760];
[L3201]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L2296]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2297]  COND FALSE  !(!(c_s106 >= a_s106))
[L2301]              __ret_0_ := c_s106;
[L3201]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s760], _value_s760);
[L3202]  COND FALSE  !(revert)
[L3205]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s760];
[L3206]              balanceOf_TokenERC20[this][_to_s760] := __var_18;
[L3207]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s760];
[L3208]              assert { :EventEmitted "Transfer_ITEN" } true;
[L2760]  RET         call _transfer~address~address~uint256_ITEN__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2761]  COND FALSE  !(revert)
[L2772]              success_s478 := true;
[L703]   RET         call success_s478 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L704]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((success_s478 == true && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this] == old(balanceOf_TokenERC20[this])) && allowance_TokenERC20[this] == old(allowance_TokenERC20[this])) && frozenAccount_ITEN[this] == old(frozenAccount_ITEN[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && released_TokenERC20[this] == old(released_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L2]                 revert := revert_hold;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:54,003 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:54,004 INFO  L82        PathProgramCache]: Analyzing trace with hash -114198037, now seen corresponding path program 1 times
[2020-11-25 18:42:54,004 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:54,015 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:42:54,058 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 18:42:54,058 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:42:54,058 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:42:54,059 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:42:54,059 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:42:54,059 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:42:54,059 INFO  L87              Difference]: Start difference. First operand 4142 states and 4883 transitions. cyclomatic complexity: 762 Second operand 6 states.
[2020-11-25 18:42:54,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:42:54,108 INFO  L93              Difference]: Finished difference Result 4190 states and 4913 transitions.
[2020-11-25 18:42:54,108 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:42:54,108 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4190 states and 4913 transitions.
[2020-11-25 18:42:54,117 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:54,126 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4190 states to 4094 states and 4805 transitions.
[2020-11-25 18:42:54,126 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 904
[2020-11-25 18:42:54,127 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 904
[2020-11-25 18:42:54,127 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4094 states and 4805 transitions.
[2020-11-25 18:42:54,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:42:54,130 INFO  L728         BuchiCegarLoop]: Abstraction has 4094 states and 4805 transitions.
[2020-11-25 18:42:54,132 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4094 states and 4805 transitions.
[2020-11-25 18:42:54,156 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4094 to 4090.
[2020-11-25 18:42:54,157 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4090 states.
[2020-11-25 18:42:54,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4090 states to 4090 states and 4790 transitions.
[2020-11-25 18:42:54,162 INFO  L751         BuchiCegarLoop]: Abstraction has 4090 states and 4790 transitions.
[2020-11-25 18:42:54,162 INFO  L631         BuchiCegarLoop]: Abstraction has 4090 states and 4790 transitions.
[2020-11-25 18:42:54,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 18:42:54,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4090 states and 4790 transitions.
[2020-11-25 18:42:54,166 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 26
[2020-11-25 18:42:54,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:42:54,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:42:54,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:42:54,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L4931]              assume null == 0;
[L4932]  CALL        call this := FreshRefGenerator__success();
[L2163]              havoc newRef;
[L2164]              assume Alloc[newRef] == false;
[L2165]              Alloc[newRef] := true;
[L2166]              assume newRef != null;
[L4932]  RET         call this := FreshRefGenerator__success();
[L4933]              assume now >= 0;
[L4934]              assume DType[this] == ITEN;
[L4935]              assume msgvalue_MSG == 0;
[L4936]              gas := gas - 53000;
[L4937]  CALL        call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L4938]              assume !revert && gas >= 0;
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND FALSE  !(choice == 7)
[L4880]  COND FALSE  !(choice == 6)
[L4887]  COND FALSE  !(choice == 5)
[L4894]  COND FALSE  !(choice == 4)
[L4901]  COND FALSE  !(choice == 3)
[L4907]  COND FALSE  !(choice == 2)
[L4914]  COND TRUE   choice == 1
[L4915]              gas := gas - 21000;
[L4916]  COND TRUE   gas >= 0
[L4917]              assume msgvalue_MSG == 0;
[L4918]  CALL        call freezeAccount~address~bool_ITEN(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L1491]              havoc __exception;
[L1492]              revert := false;
[L1493]  COND FALSE  !(__exception)
[L1519]  CALL        call freezeAccount~address~bool_ITEN__success(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L3276]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4306]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L3276]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]              frozenAccount_ITEN[this][target_s833] := freeze_s833;
[L3281]              assert { :EventEmitted "FrozenFunds_ITEN" } true;
[L1519]  RET         call freezeAccount~address~bool_ITEN__success(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L1520]              assume !revert && gas >= 0;
[L4918]  RET         call freezeAccount~address~bool_ITEN(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L4941]  RET         call CorralChoice_ITEN(this);
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND FALSE  !(choice == 18)
[L4811]  COND FALSE  !(choice == 17)
[L4817]  COND FALSE  !(choice == 16)
[L4823]  COND FALSE  !(choice == 15)
[L4829]  COND FALSE  !(choice == 14)
[L4835]  COND FALSE  !(choice == 13)
[L4841]  COND FALSE  !(choice == 12)
[L4847]  COND FALSE  !(choice == 11)
[L4853]  COND FALSE  !(choice == 10)
[L4859]  COND FALSE  !(choice == 9)
[L4866]  COND FALSE  !(choice == 8)
[L4873]  COND TRUE   choice == 7
[L4874]              gas := gas - 21000;
[L4875]  COND TRUE   gas >= 0
[L4876]              assume _value_s478 >= 0 && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4877]              assume msgvalue_MSG == 0;
[L4878]  CALL        call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND TRUE   !!__tmp__frozenAccount_ITEN[this][_from_s760]
[L3141]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L4941]  RET         call CorralChoice_ITEN(this);

Loop:
[L4941]  CALL        call CorralChoice_ITEN(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_owner;
[L4744]              havoc newOwner_s161;
[L4745]              havoc __ret_0_name;
[L4746]              havoc __ret_0_symbol;
[L4747]              havoc __ret_0_decimals;
[L4748]              havoc __ret_0_totalSupply;
[L4749]              havoc __ret_0_released;
[L4750]              havoc arg836_s0;
[L4751]              havoc __ret_0_balanceOf;
[L4752]              havoc arg837_s0;
[L4753]              havoc arg838_s0;
[L4754]              havoc __ret_0_allowance;
[L4755]              havoc initialSupply_s261;
[L4756]              havoc tokenName_s261;
[L4757]              havoc tokenSymbol_s261;
[L4758]              havoc _spender_s417;
[L4759]              havoc _value_s417;
[L4760]              havoc success_s417;
[L4761]              havoc _spender_s457;
[L4762]              havoc _value_s457;
[L4763]              havoc _extraData_s457;
[L4764]              havoc success_s457;
[L4765]              havoc _to_s478;
[L4766]              havoc _value_s478;
[L4767]              havoc success_s478;
[L4768]              havoc _from_s528;
[L4769]              havoc _to_s528;
[L4770]              havoc _value_s528;
[L4771]              havoc success_s528;
[L4772]              havoc _value_s575;
[L4773]              havoc success_s575;
[L4774]              havoc _from_s648;
[L4775]              havoc _value_s648;
[L4776]              havoc success_s648;
[L4777]              havoc arg839_s0;
[L4778]              havoc __ret_0_frozenAccount;
[L4779]              havoc initialSupply_s678;
[L4780]              havoc tokenName_s678;
[L4781]              havoc tokenSymbol_s678;
[L4782]              havoc target_s812;
[L4783]              havoc mintedAmount_s812;
[L4784]              havoc target_s833;
[L4785]              havoc freeze_s833;
[L4786]              havoc tmpNow;
[L4787]              havoc gas;
[L4788]              assume gas > 4000000 && gas <= 8000000;
[L4789]              tmpNow := now;
[L4790]              havoc now;
[L4791]              assume now > tmpNow;
[L4792]              assume msgsender_MSG != null;
[L4793]              assume DType[msgsender_MSG] != SafeMath;
[L4794]              assume DType[msgsender_MSG] != owned;
[L4795]              assume DType[msgsender_MSG] != tokenRecipient;
[L4796]              assume DType[msgsender_MSG] != TokenERC20;
[L4797]              assume DType[msgsender_MSG] != ITEN;
[L4798]              Alloc[msgsender_MSG] := true;
[L4799]  COND FALSE  !(choice == 19)
[L4805]  COND TRUE   choice == 18
[L4806]              gas := gas - 21000;
[L4807]  COND TRUE   gas >= 0
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call transferOwnership~address_owned(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L211]               havoc __exception;
[L212]               revert := false;
[L213]   COND TRUE   __exception
[L214]               __tmp__Balance := Balance;
[L215]               __tmp__DType := DType;
[L216]               __tmp__Alloc := Alloc;
[L217]               __tmp__balance_ADDR := balance_ADDR;
[L218]               __tmp__M_Ref_int := M_Ref_int;
[L219]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L220]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L221]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L222]               __tmp__sum_allowance1 := sum_allowance1;
[L223]               __tmp__M_Ref_bool := M_Ref_bool;
[L224]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L225]               __tmp__Length := Length;
[L226]               __tmp__now := now;
[L227]               __tmp__owner_owned := owner_owned;
[L228]               __tmp__name_TokenERC20 := name_TokenERC20;
[L229]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L230]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L231]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L232]               __tmp__released_TokenERC20 := released_TokenERC20;
[L233]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L234]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L235]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L236]   CALL        call transferOwnership~address_owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L2363]  CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND TRUE   !(msgsender_MSG == __tmp__owner_owned[this])
[L4299]              revert := true;
[L2363]  RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND TRUE   revert
[L236]   RET         call transferOwnership~address_owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L237]               assume revert || gas < 0;
[L4809]  RET         call transferOwnership~address_owned(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L4941]  RET         call CorralChoice_ITEN(this);

[2020-11-25 18:42:54,171 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:54,172 INFO  L82        PathProgramCache]: Analyzing trace with hash 1125936243, now seen corresponding path program 1 times
[2020-11-25 18:42:54,172 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:54,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:54,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:54,273 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:54,273 INFO  L82        PathProgramCache]: Analyzing trace with hash 282918426, now seen corresponding path program 1 times
[2020-11-25 18:42:54,274 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:54,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:54,281 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:54,289 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:42:54,289 INFO  L82        PathProgramCache]: Analyzing trace with hash 705469416, now seen corresponding path program 1 times
[2020-11-25 18:42:54,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:42:54,302 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:54,316 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 18:42:54,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 18:42:55,518 WARN  L188               SmtUtils]: Spent 196.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 194
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 18:42:56,128 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification that was a NOOP. DAG size: 207
[2020-11-25 18:42:56,538 WARN  L188               SmtUtils]: Spent 407.00 ms on a formula simplification. DAG size of input: 285 DAG size of output: 244
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 18:42:56,785 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification that was a NOOP. DAG size: 318
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 18:42:56,966 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification that was a NOOP. DAG size: 255
[2020-11-25 18:42:58,540 WARN  L188               SmtUtils]: Spent 1.57 s on a formula simplification. DAG size of input: 656 DAG size of output: 638
Garbage collection #1: 269 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 269 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16519 to 33037
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 18:42:58,802 WARN  L188               SmtUtils]: Spent 244.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 204
[2020-11-25 18:42:58,965 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 311
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 18:42:59,369 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 312
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 18:42:59,519 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 308
[2020-11-25 18:42:59,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:59,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 18:42:59,558 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:42:59 BasicIcfg
[2020-11-25 18:42:59,558 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:42:59,558 INFO  L168              Benchmark]: Toolchain (without parser) took 28967.26 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 1.1 GB in the end (delta: -212.0 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,559 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,559 INFO  L168              Benchmark]: Boogie Preprocessor took 98.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,559 INFO  L168              Benchmark]: UtopiaSpecLang took 58.68 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,561 INFO  L168              Benchmark]: Boogie Printer took 17.04 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,561 INFO  L168              Benchmark]: RCFGBuilder took 787.06 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,561 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.15 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,561 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1384.62 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.2 MB). Free memory was 775.9 MB in the beginning and 916.8 MB in the end (delta: -140.9 MB). Peak memory consumption was 172.5 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,562 INFO  L168              Benchmark]: BlockEncodingV2 took 153.17 ms. Allocated memory is still 1.2 GB. Free memory was 916.8 MB in the beginning and 840.2 MB in the end (delta: 76.6 MB). Peak memory consumption was 76.6 MB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,562 INFO  L168              Benchmark]: BuchiAutomizer took 26426.38 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 840.2 MB in the beginning and 1.1 GB in the end (delta: -307.0 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 18:42:59,564 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4500 locations, 8005 edges
  - StatisticsResult: Encoded RCFG
    4448 locations, 7869 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.28 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 98.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.68 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.04 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 787.06 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.15 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1384.62 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 209.2 MB). Free memory was 775.9 MB in the beginning and 916.8 MB in the end (delta: -140.9 MB). Peak memory consumption was 172.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 153.17 ms. Allocated memory is still 1.2 GB. Free memory was 916.8 MB in the beginning and 840.2 MB in the end (delta: 76.6 MB). Peak memory consumption was 76.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 26426.38 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 840.2 MB in the beginning and 1.1 GB in the end (delta: -307.0 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1827 locations, 2456 edges
  - StatisticsResult: BuchiProgram size
    4500 locations, 8005 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.15 modules have a trivial ranking function, the largest among these consists of 24 locations. The remainder module has 4090 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 26.3s and 16 iterations.  TraceHistogramMax:3. Analysis of lassos took 6.9s. Construction of modules took 14.0s. BÃ¼chi inclusion checks took 4.2s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 15 MinimizatonAttempts, 8659 StatesRemovedByMinimization, 14 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 4142 states and ocurred in iteration 14.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 54875 SDtfs, 55077 SDslu, 158833 SDs, 0 SdLazy, 236314 SolverSat, 9933 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 14.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(500000000000000000000000006) = (new ITEN)({from : 500000000000000000000000007, initialSupply : 500000000000000000000000010, tokenName : 500000000000000000000000015, tokenSymbol : 500000000000000000000000001});
[L1363]              havoc __exception;
[L1364]              revert := false;
[L1365]  COND FALSE  !(__exception)
[L1391]  CALL        call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3104]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L3104]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3105]  COND FALSE  !(revert)
[L3108]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L2489]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2355]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              assume msgsender_MSG != null;
[L2339]              Balance[this] := 0;
[L2340]              owner_owned[this] := null;
[L2342]              owner_owned[this] := msgsender_MSG;
[L2355]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2356]  COND FALSE  !(revert)
[L2489]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2490]  COND FALSE  !(revert)
[L2493]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2452]              assume msgsender_MSG != null;
[L2453]              Balance[this] := 0;
[L2454]              name_TokenERC20[this] := 484439318;
[L2455]              symbol_TokenERC20[this] := 484439318;
[L2456]              decimals_TokenERC20[this] := 18;
[L2457]              totalSupply_TokenERC20[this] := 500000000000000000000000000;
[L2458]              released_TokenERC20[this] := true;
[L2459]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2460]              sum_balanceOf0[this] := 0;
[L2461]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2462]              sum_allowance1[this] := 0;
[L2464]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2465]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s261, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2466]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2467]              balanceOf_TokenERC20[this][msgsender_MSG] := 0;
[L2468]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2469]              name_TokenERC20[this] := 484439318;
[L2470]              symbol_TokenERC20[this] := 484439318;
[L2493]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s261, tokenName_s261, tokenSymbol_s261);
[L2494]  COND FALSE  !(revert)
[L3108]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3109]  COND FALSE  !(revert)
[L3112]  CALL        call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3080]              assume msgsender_MSG != null;
[L3081]              Balance[this] := 0;
[L3082]              frozenAccount_ITEN[this] := zeroRefboolArr();
[L3112]  RET         call ITEN_ITEN_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L3113]  COND FALSE  !(revert)
[L1391]  RET         call ITEN_ITEN__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
[L1392]              assume !revert && gas >= 0;
[L4937]  RET         call ITEN_ITEN(this, msgsender_MSG, msgvalue_MSG, initialSupply_s678, tokenName_s678, tokenSymbol_s678);
ITEN(500000000000000000000000006).freezeAccount~address~bool.gas(3979002)({from : 500000000000000000000000007, target : 500000000000000000000000007, freeze : true});
[L1491]              havoc __exception;
[L1492]              revert := false;
[L1493]  COND FALSE  !(__exception)
[L1519]  CALL        call freezeAccount~address~bool_ITEN__success(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L3276]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4306]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L3276]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]              frozenAccount_ITEN[this][target_s833] := freeze_s833;
[L3281]              assert { :EventEmitted "FrozenFunds_ITEN" } true;
[L1519]  RET         call freezeAccount~address~bool_ITEN__success(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
[L1520]              assume !revert && gas >= 0;
[L4918]  RET         call freezeAccount~address~bool_ITEN(this, msgsender_MSG, msgvalue_MSG, target_s833, freeze_s833);
TokenERC20(500000000000000000000000006).transfer~address~uint256.gas(3979003)({from : 500000000000000000000000007, _to : 500000000000000000000000007, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s478 && _value_s478 <= balanceOf_TokenERC20[this][msgsender_MSG]) && _value_s478 >= 0) && _value_s478 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s478] >= 0) && balanceOf_TokenERC20[this][_to_s478] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L675]               havoc __exception;
[L676]               revert := false;
[L677]   COND TRUE   __exception
[L678]               __tmp__Balance := Balance;
[L679]               __tmp__DType := DType;
[L680]               __tmp__Alloc := Alloc;
[L681]               __tmp__balance_ADDR := balance_ADDR;
[L682]               __tmp__M_Ref_int := M_Ref_int;
[L683]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L684]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L685]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L686]               __tmp__sum_allowance1 := sum_allowance1;
[L687]               __tmp__M_Ref_bool := M_Ref_bool;
[L688]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L689]               __tmp__Length := Length;
[L690]               __tmp__now := now;
[L691]               __tmp__owner_owned := owner_owned;
[L692]               __tmp__name_TokenERC20 := name_TokenERC20;
[L693]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L694]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L695]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L696]               __tmp__released_TokenERC20 := released_TokenERC20;
[L697]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L698]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L699]               __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L700]   CALL        call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L2732]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L2732]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2733]  COND FALSE  !(revert)
[L2736]  COND TRUE   __tmp__DType[this] == ITEN
[L2737]  CALL        call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L3123]  CALL        call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4314]  COND FALSE  !(!__tmp__released_TokenERC20[this])
[L3123]  RET         call onlyReleased_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3124]  COND FALSE  !(revert)
[L3127]              __var_16 := null;
[L3128]  COND FALSE  !(!(_to_s760 != null))
[L3132]  COND FALSE  !(!(__tmp__balanceOf_TokenERC20[this][_from_s760] >= _value_s760))
[L3136]  COND FALSE  !(!((__tmp__balanceOf_TokenERC20[this][_to_s760] + _value_s760) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= __tmp__balanceOf_TokenERC20[this][_to_s760]))
[L3140]  COND TRUE   !!__tmp__frozenAccount_ITEN[this][_from_s760]
[L3141]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_ITEN__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s478, _value_s478);
[L2738]  COND TRUE   revert
[L700]   RET         call success_s478 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);
[L701]               assume revert || gas < 0;
[L4878]  RET         call success_s478 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s478, _value_s478);

Loop:
owned(500000000000000000000000006).transferOwnership~address.gas(3979001)({from : 500000000000000000000000005, newOwner : 500000000000000000000000003});
[L211]              havoc __exception;
[L212]              revert := false;
[L213]   COND TRUE  __exception
[L214]              __tmp__Balance := Balance;
[L215]              __tmp__DType := DType;
[L216]              __tmp__Alloc := Alloc;
[L217]              __tmp__balance_ADDR := balance_ADDR;
[L218]              __tmp__M_Ref_int := M_Ref_int;
[L219]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L220]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L221]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L222]              __tmp__sum_allowance1 := sum_allowance1;
[L223]              __tmp__M_Ref_bool := M_Ref_bool;
[L224]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L225]              __tmp__Length := Length;
[L226]              __tmp__now := now;
[L227]              __tmp__owner_owned := owner_owned;
[L228]              __tmp__name_TokenERC20 := name_TokenERC20;
[L229]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L230]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L231]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L232]              __tmp__released_TokenERC20 := released_TokenERC20;
[L233]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L234]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L235]              __tmp__frozenAccount_ITEN := frozenAccount_ITEN;
[L236]   CALL       call transferOwnership~address_owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L2363]  CALL       call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4298]  COND TRUE  !(msgsender_MSG == __tmp__owner_owned[this])
[L4299]             revert := true;
[L2363]  RET        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L2364]  COND TRUE  revert
[L236]   RET        call transferOwnership~address_owned__fail(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);
[L237]              assume revert || gas < 0;
[L4809]  RET        call transferOwnership~address_owned(this, msgsender_MSG, msgvalue_MSG, newOwner_s161);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
